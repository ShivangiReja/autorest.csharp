// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace AnomalyDetector.Models
{
    public partial class WholeMetricConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("conditionOperator");
            writer.WriteStringValue(ConditionOperator.ToString());
            if (SmartDetectionCondition != null)
            {
                writer.WritePropertyName("smartDetectionCondition");
                writer.WriteObjectValue(SmartDetectionCondition);
            }
            if (HardThresholdCondition != null)
            {
                writer.WritePropertyName("hardThresholdCondition");
                writer.WriteObjectValue(HardThresholdCondition);
            }
            if (ChangeThresholdCondition != null)
            {
                writer.WritePropertyName("changeThresholdCondition");
                writer.WriteObjectValue(ChangeThresholdCondition);
            }
            writer.WriteEndObject();
        }

        internal static WholeMetricConfiguration DeserializeWholeMetricConfiguration(JsonElement element)
        {
            AnomalyDetectionConfigurationLogicType conditionOperator = default;
            SmartDetectionCondition smartDetectionCondition = default;
            HardThresholdCondition hardThresholdCondition = default;
            ChangeThresholdCondition changeThresholdCondition = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("conditionOperator"))
                {
                    conditionOperator = new AnomalyDetectionConfigurationLogicType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("smartDetectionCondition"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    smartDetectionCondition = SmartDetectionCondition.DeserializeSmartDetectionCondition(property.Value);
                    continue;
                }
                if (property.NameEquals("hardThresholdCondition"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hardThresholdCondition = HardThresholdCondition.DeserializeHardThresholdCondition(property.Value);
                    continue;
                }
                if (property.NameEquals("changeThresholdCondition"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    changeThresholdCondition = ChangeThresholdCondition.DeserializeChangeThresholdCondition(property.Value);
                    continue;
                }
            }
            return new WholeMetricConfiguration(conditionOperator, smartDetectionCondition, hardThresholdCondition, changeThresholdCondition);
        }
    }
}
