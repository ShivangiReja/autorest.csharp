// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace AnomalyDetector.Models
{
    public partial class AnomalyResult
    {
        internal static AnomalyResult DeserializeAnomalyResult(JsonElement element)
        {
            Optional<Guid> metricId = default;
            Optional<Guid> anomalyDetectionConfigurationId = default;
            Optional<DateTimeOffset> timestamp = default;
            Optional<DateTimeOffset> createdTime = default;
            Optional<DateTimeOffset> modifiedTime = default;
            Optional<IReadOnlyDictionary<string, string>> dimension = default;
            Optional<AnomalyProperty> property = default;
            foreach (var property0 in element.EnumerateObject())
            {
                if (property0.NameEquals("metricId"))
                {
                    metricId = property0.Value.GetGuid();
                    continue;
                }
                if (property0.NameEquals("anomalyDetectionConfigurationId"))
                {
                    anomalyDetectionConfigurationId = property0.Value.GetGuid();
                    continue;
                }
                if (property0.NameEquals("timestamp"))
                {
                    timestamp = property0.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property0.NameEquals("createdTime"))
                {
                    createdTime = property0.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property0.NameEquals("modifiedTime"))
                {
                    modifiedTime = property0.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property0.NameEquals("dimension"))
                {
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property1 in property0.Value.EnumerateObject())
                    {
                        dictionary.Add(property1.Name, property1.Value.GetString());
                    }
                    dimension = dictionary;
                    continue;
                }
                if (property0.NameEquals("property"))
                {
                    property = AnomalyProperty.DeserializeAnomalyProperty(property0.Value);
                    continue;
                }
            }
            return new AnomalyResult(Optional.ToNullable(metricId), Optional.ToNullable(anomalyDetectionConfigurationId), Optional.ToNullable(timestamp), Optional.ToNullable(createdTime), Optional.ToNullable(modifiedTime), Optional.ToDictionary(dimension), property.Value);
        }
    }
}
