// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace AnomalyDetector.Models
{
    public partial class IncidentResult
    {
        internal static IncidentResult DeserializeIncidentResult(JsonElement element)
        {
            Optional<Guid> metricId = default;
            Optional<Guid> anomalyDetectionConfigurationId = default;
            Optional<string> incidentId = default;
            Optional<DateTimeOffset> startTime = default;
            Optional<DateTimeOffset> lastTime = default;
            Optional<SeriesIdentity> rootNode = default;
            Optional<IncidentProperty> property = default;
            foreach (var property0 in element.EnumerateObject())
            {
                if (property0.NameEquals("metricId"))
                {
                    metricId = property0.Value.GetGuid();
                    continue;
                }
                if (property0.NameEquals("anomalyDetectionConfigurationId"))
                {
                    anomalyDetectionConfigurationId = property0.Value.GetGuid();
                    continue;
                }
                if (property0.NameEquals("incidentId"))
                {
                    incidentId = property0.Value.GetString();
                    continue;
                }
                if (property0.NameEquals("startTime"))
                {
                    startTime = property0.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property0.NameEquals("lastTime"))
                {
                    lastTime = property0.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property0.NameEquals("rootNode"))
                {
                    rootNode = SeriesIdentity.DeserializeSeriesIdentity(property0.Value);
                    continue;
                }
                if (property0.NameEquals("property"))
                {
                    property = IncidentProperty.DeserializeIncidentProperty(property0.Value);
                    continue;
                }
            }
            return new IncidentResult(Optional.ToNullable(metricId), Optional.ToNullable(anomalyDetectionConfigurationId), incidentId.Value, Optional.ToNullable(startTime), Optional.ToNullable(lastTime), rootNode.Value, property.Value);
        }
    }
}
