// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace AnomalyDetector.Models
{
    /// <summary> The DimensionGroupConfiguration. </summary>
    public partial class DimensionGroupConfiguration
    {
        /// <summary> Initializes a new instance of DimensionGroupConfiguration. </summary>
        /// <param name="group"> . </param>
        /// <param name="conditionOperator"> . </param>
        /// <exception cref="ArgumentNullException"> <paramref name="group"/> is null. </exception>
        public DimensionGroupConfiguration(DimensionGroupIdentity group, AnomalyDetectionConfigurationLogicType conditionOperator)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }

            Group = group;
            ConditionOperator = conditionOperator;
        }

        /// <summary> Initializes a new instance of DimensionGroupConfiguration. </summary>
        /// <param name="group"> . </param>
        /// <param name="conditionOperator"> . </param>
        /// <param name="smartDetectionCondition"> . </param>
        /// <param name="hardThresholdCondition"> . </param>
        /// <param name="changeThresholdCondition"> . </param>
        internal DimensionGroupConfiguration(DimensionGroupIdentity group, AnomalyDetectionConfigurationLogicType conditionOperator, SmartDetectionCondition smartDetectionCondition, HardThresholdCondition hardThresholdCondition, ChangeThresholdCondition changeThresholdCondition)
        {
            Group = group;
            ConditionOperator = conditionOperator;
            SmartDetectionCondition = smartDetectionCondition;
            HardThresholdCondition = hardThresholdCondition;
            ChangeThresholdCondition = changeThresholdCondition;
        }

        public DimensionGroupIdentity Group { get; set; }
        public AnomalyDetectionConfigurationLogicType ConditionOperator { get; set; }
        public SmartDetectionCondition SmartDetectionCondition { get; set; }
        public HardThresholdCondition HardThresholdCondition { get; set; }
        public ChangeThresholdCondition ChangeThresholdCondition { get; set; }
    }
}
