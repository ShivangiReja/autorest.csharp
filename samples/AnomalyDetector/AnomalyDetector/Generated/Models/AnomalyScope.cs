// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace AnomalyDetector.Models
{
    /// <summary> The AnomalyScope. </summary>
    public readonly partial struct AnomalyScope : IEquatable<AnomalyScope>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="AnomalyScope"/> values are the same. </summary>
        public AnomalyScope(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AllValue = "All";
        private const string DimensionValue = "Dimension";
        private const string TopNValue = "TopN";

        /// <summary> All. </summary>
        public static AnomalyScope All { get; } = new AnomalyScope(AllValue);
        /// <summary> Dimension. </summary>
        public static AnomalyScope Dimension { get; } = new AnomalyScope(DimensionValue);
        /// <summary> TopN. </summary>
        public static AnomalyScope TopN { get; } = new AnomalyScope(TopNValue);
        /// <summary> Determines if two <see cref="AnomalyScope"/> values are the same. </summary>
        public static bool operator ==(AnomalyScope left, AnomalyScope right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AnomalyScope"/> values are not the same. </summary>
        public static bool operator !=(AnomalyScope left, AnomalyScope right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AnomalyScope"/>. </summary>
        public static implicit operator AnomalyScope(string value) => new AnomalyScope(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AnomalyScope other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AnomalyScope other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
