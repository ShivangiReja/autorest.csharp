// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace AnomalyDetector.Models
{
    public partial class AnomalyAlertingConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (AnomalyAlertingConfigurationId != null)
            {
                writer.WritePropertyName("anomalyAlertingConfigurationId");
                writer.WriteStringValue(AnomalyAlertingConfigurationId.Value);
            }
            writer.WritePropertyName("name");
            writer.WriteStringValue(Name);
            writer.WritePropertyName("crossMetricsOperator");
            writer.WriteStringValue(CrossMetricsOperator.ToString());
            writer.WritePropertyName("hookIds");
            writer.WriteStartArray();
            foreach (var item in HookIds)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("metricAlertingConfigurations");
            writer.WriteStartArray();
            foreach (var item in MetricAlertingConfigurations)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WriteEndObject();
        }

        internal static AnomalyAlertingConfiguration DeserializeAnomalyAlertingConfiguration(JsonElement element)
        {
            Guid? anomalyAlertingConfigurationId = default;
            string name = default;
            AnomalyAlertingConfigurationLogicType crossMetricsOperator = default;
            IList<Guid> hookIds = default;
            IList<MetricAlertingConfiguration> metricAlertingConfigurations = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("anomalyAlertingConfigurationId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    anomalyAlertingConfigurationId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("crossMetricsOperator"))
                {
                    crossMetricsOperator = new AnomalyAlertingConfigurationLogicType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("hookIds"))
                {
                    List<Guid> array = new List<Guid>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetGuid());
                    }
                    hookIds = array;
                    continue;
                }
                if (property.NameEquals("metricAlertingConfigurations"))
                {
                    List<MetricAlertingConfiguration> array = new List<MetricAlertingConfiguration>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(MetricAlertingConfiguration.DeserializeMetricAlertingConfiguration(item));
                        }
                    }
                    metricAlertingConfigurations = array;
                    continue;
                }
            }
            return new AnomalyAlertingConfiguration(anomalyAlertingConfigurationId, name, crossMetricsOperator, hookIds, metricAlertingConfigurations);
        }
    }
}
