// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace AnomalyDetector.Models
{
    /// <summary> The AnomalyAlertingConfigurationPatch. </summary>
    internal partial class AnomalyAlertingConfigurationPatch
    {
        /// <summary> Initializes a new instance of AnomalyAlertingConfigurationPatch. </summary>
        internal AnomalyAlertingConfigurationPatch()
        {
        }

        /// <summary> Initializes a new instance of AnomalyAlertingConfigurationPatch. </summary>
        /// <param name="name"> Anomaly alerting configuration name. </param>
        /// <param name="crossMetricsOperator"> . </param>
        /// <param name="hookIds"> hook unique ids. </param>
        /// <param name="metricAlertingConfigurations"> Anomaly alerting configurations. </param>
        internal AnomalyAlertingConfigurationPatch(string name, AnomalyAlertingConfigurationLogicType? crossMetricsOperator, IReadOnlyList<Guid> hookIds, IReadOnlyList<MetricAlertingConfiguration> metricAlertingConfigurations)
        {
            Name = name;
            CrossMetricsOperator = crossMetricsOperator;
            HookIds = hookIds;
            MetricAlertingConfigurations = metricAlertingConfigurations;
        }

        /// <summary> Anomaly alerting configuration name. </summary>
        public string Name { get; }
        public AnomalyAlertingConfigurationLogicType? CrossMetricsOperator { get; }
        /// <summary> hook unique ids. </summary>
        public IReadOnlyList<Guid> HookIds { get; }
        /// <summary> Anomaly alerting configurations. </summary>
        public IReadOnlyList<MetricAlertingConfiguration> MetricAlertingConfigurations { get; }
    }
}
