// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace AnomalyDetector.Models
{
    /// <summary> The DataFeedDetail. </summary>
    internal partial class DataFeedDetail
    {
        /// <summary> Initializes a new instance of DataFeedDetail. </summary>
        /// <param name="dataFeedName"> data feed name. </param>
        /// <param name="granularityName"> . </param>
        /// <param name="metrics"> measure list. </param>
        /// <param name="dimension"> dimension list. </param>
        /// <param name="dataStartFrom"> ingestion start time. </param>
        internal DataFeedDetail(string dataFeedName, Granularity granularityName, IEnumerable<Metric> metrics, IEnumerable<Dimension> dimension, DateTimeOffset dataStartFrom)
        {
            if (dataFeedName == null)
            {
                throw new ArgumentNullException(nameof(dataFeedName));
            }
            if (metrics == null)
            {
                throw new ArgumentNullException(nameof(metrics));
            }
            if (dimension == null)
            {
                throw new ArgumentNullException(nameof(dimension));
            }

            DataFeedName = dataFeedName;
            GranularityName = granularityName;
            Metrics = metrics.ToArray();
            Dimension = dimension.ToArray();
            DataStartFrom = dataStartFrom;
        }

        /// <summary> Initializes a new instance of DataFeedDetail. </summary>
        /// <param name="dataSourceType"> . </param>
        /// <param name="dataFeedId"> data feed unique id. </param>
        /// <param name="dataFeedName"> data feed name. </param>
        /// <param name="dataFeedDescription"> data feed description. </param>
        /// <param name="granularityName"> . </param>
        /// <param name="granularityAmount"> if granularity is custom,it is required. </param>
        /// <param name="metrics"> measure list. </param>
        /// <param name="dimension"> dimension list. </param>
        /// <param name="dataStartFrom"> ingestion start time. </param>
        /// <param name="timestampColumn"> user-defined timestamp column. if timestampColumn is null, start time of every time slice will be used as default value. </param>
        /// <param name="startOffsetInSeconds"> the time that the beginning of data ingestion task will delay for every data slice according to this offset. </param>
        /// <param name="maxConcurrency"> the max concurrency of data ingestion queries against user data source. 0 means no limitation. </param>
        /// <param name="minRetryIntervalInSeconds"> the min retry interval for failed data ingestion tasks. </param>
        /// <param name="stopRetryAfterInSeconds"> stop retry data ingestion after the data slice first schedule time in seconds. </param>
        /// <param name="needRollup"> . </param>
        /// <param name="rollUpMethod"> . </param>
        /// <param name="rollUpColumns"> roll up columns. </param>
        /// <param name="allUpIdentification"> the identification value for the row of calculated all-up value. </param>
        /// <param name="fillMissingPointType"> . </param>
        /// <param name="fillMissingPointValue"> the value of fill missing point for anomaly detection. </param>
        /// <param name="viewMode"> . </param>
        /// <param name="admins"> data feed administrator. </param>
        /// <param name="viewers"> data feed viewer. </param>
        /// <param name="isAdmin"> the query user is one of data feed administrator or not. </param>
        /// <param name="creator"> data feed creator. </param>
        /// <param name="status"> . </param>
        /// <param name="createdTime"> data feed created time. </param>
        /// <param name="actionLinkTemplate"> action link for alert. </param>
        internal DataFeedDetail(DataSourceType dataSourceType, Guid? dataFeedId, string dataFeedName, string dataFeedDescription, Granularity granularityName, int? granularityAmount, IReadOnlyList<Metric> metrics, IReadOnlyList<Dimension> dimension, DateTimeOffset dataStartFrom, string timestampColumn, long? startOffsetInSeconds, int? maxConcurrency, long? minRetryIntervalInSeconds, long? stopRetryAfterInSeconds, NeedRollupEnum? needRollup, RollUpMethod? rollUpMethod, string rollUpColumns, string allUpIdentification, FillMissingPointType? fillMissingPointType, double? fillMissingPointValue, ViewMode? viewMode, IReadOnlyList<string> admins, IReadOnlyList<string> viewers, bool? isAdmin, string creator, EntityStatus? status, DateTimeOffset? createdTime, string actionLinkTemplate)
        {
            DataSourceType = dataSourceType;
            DataFeedId = dataFeedId;
            DataFeedName = dataFeedName;
            DataFeedDescription = dataFeedDescription;
            GranularityName = granularityName;
            GranularityAmount = granularityAmount;
            Metrics = metrics ?? new List<Metric>();
            Dimension = dimension ?? new List<Dimension>();
            DataStartFrom = dataStartFrom;
            TimestampColumn = timestampColumn;
            StartOffsetInSeconds = startOffsetInSeconds;
            MaxConcurrency = maxConcurrency;
            MinRetryIntervalInSeconds = minRetryIntervalInSeconds;
            StopRetryAfterInSeconds = stopRetryAfterInSeconds;
            NeedRollup = needRollup;
            RollUpMethod = rollUpMethod;
            RollUpColumns = rollUpColumns;
            AllUpIdentification = allUpIdentification;
            FillMissingPointType = fillMissingPointType;
            FillMissingPointValue = fillMissingPointValue;
            ViewMode = viewMode;
            Admins = admins;
            Viewers = viewers;
            IsAdmin = isAdmin;
            Creator = creator;
            Status = status;
            CreatedTime = createdTime;
            ActionLinkTemplate = actionLinkTemplate;
        }

        internal DataSourceType DataSourceType { get; set; }
        /// <summary> data feed unique id. </summary>
        public Guid? DataFeedId { get; }
        /// <summary> data feed name. </summary>
        public string DataFeedName { get; }
        /// <summary> data feed description. </summary>
        public string DataFeedDescription { get; }
        public Granularity GranularityName { get; }
        /// <summary> if granularity is custom,it is required. </summary>
        public int? GranularityAmount { get; }
        /// <summary> measure list. </summary>
        public IReadOnlyList<Metric> Metrics { get; }
        /// <summary> dimension list. </summary>
        public IReadOnlyList<Dimension> Dimension { get; }
        /// <summary> ingestion start time. </summary>
        public DateTimeOffset DataStartFrom { get; }
        /// <summary> user-defined timestamp column. if timestampColumn is null, start time of every time slice will be used as default value. </summary>
        public string TimestampColumn { get; }
        /// <summary> the time that the beginning of data ingestion task will delay for every data slice according to this offset. </summary>
        public long? StartOffsetInSeconds { get; }
        /// <summary> the max concurrency of data ingestion queries against user data source. 0 means no limitation. </summary>
        public int? MaxConcurrency { get; }
        /// <summary> the min retry interval for failed data ingestion tasks. </summary>
        public long? MinRetryIntervalInSeconds { get; }
        /// <summary> stop retry data ingestion after the data slice first schedule time in seconds. </summary>
        public long? StopRetryAfterInSeconds { get; }
        public NeedRollupEnum? NeedRollup { get; }
        public RollUpMethod? RollUpMethod { get; }
        /// <summary> roll up columns. </summary>
        public string RollUpColumns { get; }
        /// <summary> the identification value for the row of calculated all-up value. </summary>
        public string AllUpIdentification { get; }
        public FillMissingPointType? FillMissingPointType { get; }
        /// <summary> the value of fill missing point for anomaly detection. </summary>
        public double? FillMissingPointValue { get; }
        public ViewMode? ViewMode { get; }
        /// <summary> data feed administrator. </summary>
        public IReadOnlyList<string> Admins { get; }
        /// <summary> data feed viewer. </summary>
        public IReadOnlyList<string> Viewers { get; }
        /// <summary> the query user is one of data feed administrator or not. </summary>
        public bool? IsAdmin { get; }
        /// <summary> data feed creator. </summary>
        public string Creator { get; }
        public EntityStatus? Status { get; }
        /// <summary> data feed created time. </summary>
        public DateTimeOffset? CreatedTime { get; }
        /// <summary> action link for alert. </summary>
        public string ActionLinkTemplate { get; }
    }
}
