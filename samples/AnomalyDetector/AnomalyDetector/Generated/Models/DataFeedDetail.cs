// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace AnomalyDetector.Models
{
    /// <summary> The DataFeedDetail. </summary>
    internal partial class DataFeedDetail
    {
        /// <summary> Initializes a new instance of DataFeedDetail. </summary>
        /// <param name="dataFeedName"> data feed name. </param>
        /// <param name="granularityName"> . </param>
        /// <param name="metrics"> measure list. </param>
        /// <param name="dimension"> dimension list. </param>
        /// <param name="dataStartFrom"> ingestion start time. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataFeedName"/>, <paramref name="metrics"/>, or <paramref name="dimension"/> is null. </exception>
        internal DataFeedDetail(string dataFeedName, Granularity granularityName, IEnumerable<Metric> metrics, IEnumerable<Dimension> dimension, DateTimeOffset dataStartFrom)
        {
            if (dataFeedName == null)
            {
                throw new ArgumentNullException(nameof(dataFeedName));
            }
            if (metrics == null)
            {
                throw new ArgumentNullException(nameof(metrics));
            }
            if (dimension == null)
            {
                throw new ArgumentNullException(nameof(dimension));
            }

            DataFeedName = dataFeedName;
            GranularityName = granularityName;
            Metrics = metrics.ToList();
            Dimension = dimension.ToList();
            DataStartFrom = dataStartFrom;
            Admins = new ChangeTrackingList<string>();
            Viewers = new ChangeTrackingList<string>();
        }

        internal DataSourceType DataSourceType { get; set; }
        /// <summary> data feed unique id. </summary>
        public Guid? DataFeedId { get; }
        /// <summary> data feed name. </summary>
        public string DataFeedName { get; }
        /// <summary> data feed description. </summary>
        public string DataFeedDescription { get; }
        public Granularity GranularityName { get; }
        /// <summary> if granularity is custom,it is required. </summary>
        public int? GranularityAmount { get; }
        /// <summary> measure list. </summary>
        public IReadOnlyList<Metric> Metrics { get; }
        /// <summary> dimension list. </summary>
        public IReadOnlyList<Dimension> Dimension { get; }
        /// <summary> ingestion start time. </summary>
        public DateTimeOffset DataStartFrom { get; }
        /// <summary> user-defined timestamp column. if timestampColumn is null, start time of every time slice will be used as default value. </summary>
        public string TimestampColumn { get; }
        /// <summary> the time that the beginning of data ingestion task will delay for every data slice according to this offset. </summary>
        public long? StartOffsetInSeconds { get; }
        /// <summary> the max concurrency of data ingestion queries against user data source. 0 means no limitation. </summary>
        public int? MaxConcurrency { get; }
        /// <summary> the min retry interval for failed data ingestion tasks. </summary>
        public long? MinRetryIntervalInSeconds { get; }
        /// <summary> stop retry data ingestion after the data slice first schedule time in seconds. </summary>
        public long? StopRetryAfterInSeconds { get; }
        public NeedRollupEnum? NeedRollup { get; }
        public RollUpMethod? RollUpMethod { get; }
        /// <summary> roll up columns. </summary>
        public string RollUpColumns { get; }
        /// <summary> the identification value for the row of calculated all-up value. </summary>
        public string AllUpIdentification { get; }
        public FillMissingPointType? FillMissingPointType { get; }
        /// <summary> the value of fill missing point for anomaly detection. </summary>
        public double? FillMissingPointValue { get; }
        public ViewMode? ViewMode { get; }
        /// <summary> data feed administrator. </summary>
        public IReadOnlyList<string> Admins { get; }
        /// <summary> data feed viewer. </summary>
        public IReadOnlyList<string> Viewers { get; }
        /// <summary> the query user is one of data feed administrator or not. </summary>
        public bool? IsAdmin { get; }
        /// <summary> data feed creator. </summary>
        public string Creator { get; }
        public EntityStatus? Status { get; }
        /// <summary> data feed created time. </summary>
        public DateTimeOffset? CreatedTime { get; }
        /// <summary> action link for alert. </summary>
        public string ActionLinkTemplate { get; }
    }
}
