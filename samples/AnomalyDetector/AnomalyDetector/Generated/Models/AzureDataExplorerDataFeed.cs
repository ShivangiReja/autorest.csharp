// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace AnomalyDetector.Models
{
    /// <summary> The AzureDataExplorerDataFeed. </summary>
    internal partial class AzureDataExplorerDataFeed : DataFeedDetail
    {
        /// <summary> Initializes a new instance of AzureDataExplorerDataFeed. </summary>
        /// <param name="dataFeedName"> data feed name. </param>
        /// <param name="granularityName"> . </param>
        /// <param name="metrics"> measure list. </param>
        /// <param name="dimension"> dimension list. </param>
        /// <param name="dataStartFrom"> ingestion start time. </param>
        /// <param name="dataSourceParameter"> . </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataFeedName"/>, <paramref name="metrics"/>, <paramref name="dimension"/>, or <paramref name="dataSourceParameter"/> is null. </exception>
        internal AzureDataExplorerDataFeed(string dataFeedName, Granularity granularityName, IEnumerable<Metric> metrics, IEnumerable<Dimension> dimension, DateTimeOffset dataStartFrom, SqlSourceParameter dataSourceParameter) : base(dataFeedName, granularityName, metrics, dimension, dataStartFrom)
        {
            if (dataFeedName == null)
            {
                throw new ArgumentNullException(nameof(dataFeedName));
            }
            if (metrics == null)
            {
                throw new ArgumentNullException(nameof(metrics));
            }
            if (dimension == null)
            {
                throw new ArgumentNullException(nameof(dimension));
            }
            if (dataSourceParameter == null)
            {
                throw new ArgumentNullException(nameof(dataSourceParameter));
            }

            DataSourceParameter = dataSourceParameter;
            DataSourceType = new DataSourceType("AzureDataExplorerDataFeed");
        }

        public SqlSourceParameter DataSourceParameter { get; }
    }
}
