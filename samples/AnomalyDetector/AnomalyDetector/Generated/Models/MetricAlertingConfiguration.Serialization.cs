// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace AnomalyDetector.Models
{
    public partial class MetricAlertingConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("anomalyDetectionConfigurationId");
            writer.WriteStringValue(AnomalyDetectionConfigurationId);
            writer.WritePropertyName("anomalyScopeType");
            writer.WriteStringValue(AnomalyScopeType.ToString());
            writer.WritePropertyName("negationOperation");
            writer.WriteBooleanValue(NegationOperation);
            if (Optional.IsDefined(DimensionAnomalyScope))
            {
                writer.WritePropertyName("dimensionAnomalyScope");
                writer.WriteObjectValue(DimensionAnomalyScope);
            }
            if (Optional.IsDefined(TopNAnomalyScope))
            {
                writer.WritePropertyName("topNAnomalyScope");
                writer.WriteObjectValue(TopNAnomalyScope);
            }
            if (Optional.IsDefined(SeverityFilter))
            {
                writer.WritePropertyName("severityFilter");
                writer.WriteObjectValue(SeverityFilter);
            }
            if (Optional.IsDefined(SnoozeFilter))
            {
                writer.WritePropertyName("snoozeFilter");
                writer.WriteObjectValue(SnoozeFilter);
            }
            if (Optional.IsDefined(ValueFilter))
            {
                writer.WritePropertyName("valueFilter");
                writer.WriteObjectValue(ValueFilter);
            }
            writer.WriteEndObject();
        }

        internal static MetricAlertingConfiguration DeserializeMetricAlertingConfiguration(JsonElement element)
        {
            Guid anomalyDetectionConfigurationId = default;
            AnomalyScope anomalyScopeType = default;
            bool negationOperation = default;
            Optional<DimensionGroupIdentity> dimensionAnomalyScope = default;
            Optional<TopNGroupScope> topNAnomalyScope = default;
            Optional<SeverityCondition> severityFilter = default;
            Optional<AlertSnoozeCondition> snoozeFilter = default;
            Optional<ValueCondition> valueFilter = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("anomalyDetectionConfigurationId"))
                {
                    anomalyDetectionConfigurationId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("anomalyScopeType"))
                {
                    anomalyScopeType = new AnomalyScope(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("negationOperation"))
                {
                    negationOperation = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("dimensionAnomalyScope"))
                {
                    dimensionAnomalyScope = DimensionGroupIdentity.DeserializeDimensionGroupIdentity(property.Value);
                    continue;
                }
                if (property.NameEquals("topNAnomalyScope"))
                {
                    topNAnomalyScope = TopNGroupScope.DeserializeTopNGroupScope(property.Value);
                    continue;
                }
                if (property.NameEquals("severityFilter"))
                {
                    severityFilter = SeverityCondition.DeserializeSeverityCondition(property.Value);
                    continue;
                }
                if (property.NameEquals("snoozeFilter"))
                {
                    snoozeFilter = AlertSnoozeCondition.DeserializeAlertSnoozeCondition(property.Value);
                    continue;
                }
                if (property.NameEquals("valueFilter"))
                {
                    valueFilter = ValueCondition.DeserializeValueCondition(property.Value);
                    continue;
                }
            }
            return new MetricAlertingConfiguration(anomalyDetectionConfigurationId, anomalyScopeType, negationOperation, dimensionAnomalyScope.Value, topNAnomalyScope.Value, severityFilter.Value, snoozeFilter.Value, valueFilter.Value);
        }
    }
}
