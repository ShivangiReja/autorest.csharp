// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace AnomalyDetector.Models
{
    /// <summary> The FillMissingPointType. </summary>
    public readonly partial struct FillMissingPointType : IEquatable<FillMissingPointType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="FillMissingPointType"/> values are the same. </summary>
        public FillMissingPointType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SmartFillingValue = "SmartFilling";
        private const string PreviousValueValue = "PreviousValue";
        private const string CustomValueValue = "CustomValue";
        private const string NoFillingValue = "NoFilling";

        /// <summary> SmartFilling. </summary>
        public static FillMissingPointType SmartFilling { get; } = new FillMissingPointType(SmartFillingValue);
        /// <summary> PreviousValue. </summary>
        public static FillMissingPointType PreviousValue { get; } = new FillMissingPointType(PreviousValueValue);
        /// <summary> CustomValue. </summary>
        public static FillMissingPointType CustomValue { get; } = new FillMissingPointType(CustomValueValue);
        /// <summary> NoFilling. </summary>
        public static FillMissingPointType NoFilling { get; } = new FillMissingPointType(NoFillingValue);
        /// <summary> Determines if two <see cref="FillMissingPointType"/> values are the same. </summary>
        public static bool operator ==(FillMissingPointType left, FillMissingPointType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FillMissingPointType"/> values are not the same. </summary>
        public static bool operator !=(FillMissingPointType left, FillMissingPointType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FillMissingPointType"/>. </summary>
        public static implicit operator FillMissingPointType(string value) => new FillMissingPointType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FillMissingPointType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FillMissingPointType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
