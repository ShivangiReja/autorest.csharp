// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace AnomalyDetector.Models
{
    public partial class ValueCondition : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Lower))
            {
                if (Lower != null)
                {
                    writer.WritePropertyName("lower");
                    writer.WriteNumberValue(Lower.Value);
                }
                else
                {
                    writer.WriteNull("lower");
                }
            }
            if (Optional.IsDefined(Upper))
            {
                if (Upper != null)
                {
                    writer.WritePropertyName("upper");
                    writer.WriteNumberValue(Upper.Value);
                }
                else
                {
                    writer.WriteNull("upper");
                }
            }
            writer.WritePropertyName("direction");
            writer.WriteStringValue(Direction.ToString());
            if (Optional.IsDefined(MetricId))
            {
                if (MetricId != null)
                {
                    writer.WritePropertyName("metricId");
                    writer.WriteStringValue(MetricId.Value);
                }
                else
                {
                    writer.WriteNull("metricId");
                }
            }
            if (Optional.IsDefined(TriggerForMissing))
            {
                writer.WritePropertyName("triggerForMissing");
                writer.WriteBooleanValue(TriggerForMissing.Value);
            }
            writer.WriteEndObject();
        }

        internal static ValueCondition DeserializeValueCondition(JsonElement element)
        {
            Optional<double?> lower = default;
            Optional<double?> upper = default;
            Direction direction = default;
            Optional<Guid?> metricId = default;
            Optional<bool> triggerForMissing = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("lower"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        lower = null;
                        continue;
                    }
                    lower = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("upper"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        upper = null;
                        continue;
                    }
                    upper = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("direction"))
                {
                    direction = new Direction(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("metricId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        metricId = null;
                        continue;
                    }
                    metricId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("triggerForMissing"))
                {
                    triggerForMissing = property.Value.GetBoolean();
                    continue;
                }
            }
            return new ValueCondition(Optional.ToNullable(lower), Optional.ToNullable(upper), direction, Optional.ToNullable(metricId), Optional.ToNullable(triggerForMissing));
        }
    }
}
