// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace AnomalyDetector.Models
{
    /// <summary> The HookInfo. </summary>
    internal partial class HookInfo
    {
        /// <summary> Initializes a new instance of HookInfo. </summary>
        /// <param name="hookName"> hook unique name. </param>
        internal HookInfo(string hookName)
        {
            if (hookName == null)
            {
                throw new ArgumentNullException(nameof(hookName));
            }

            HookName = hookName;
        }

        /// <summary> Initializes a new instance of HookInfo. </summary>
        /// <param name="hookType"> . </param>
        /// <param name="hookId"> Hook unique id. </param>
        /// <param name="hookName"> hook unique name. </param>
        /// <param name="description"> hook description. </param>
        /// <param name="externalLink"> hook external link. </param>
        /// <param name="admins"> hook administrators. </param>
        internal HookInfo(HookType hookType, Guid? hookId, string hookName, string description, string externalLink, IReadOnlyList<string> admins)
        {
            HookType = hookType;
            HookId = hookId;
            HookName = hookName;
            Description = description;
            ExternalLink = externalLink;
            Admins = admins;
        }

        internal HookType HookType { get; set; }
        /// <summary> Hook unique id. </summary>
        public Guid? HookId { get; }
        /// <summary> hook unique name. </summary>
        public string HookName { get; }
        /// <summary> hook description. </summary>
        public string Description { get; }
        /// <summary> hook external link. </summary>
        public string ExternalLink { get; }
        /// <summary> hook administrators. </summary>
        public IReadOnlyList<string> Admins { get; }
    }
}
