// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace AnomalyDetector.Models
{
    public partial class AnomalyDetectionConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (AnomalyDetectionConfigurationId != null)
            {
                writer.WritePropertyName("anomalyDetectionConfigurationId");
                writer.WriteStringValue(AnomalyDetectionConfigurationId.Value);
            }
            writer.WritePropertyName("name");
            writer.WriteStringValue(Name);
            writer.WritePropertyName("description");
            writer.WriteStringValue(Description);
            writer.WritePropertyName("metricId");
            writer.WriteStringValue(MetricId);
            writer.WritePropertyName("wholeMetricConfiguration");
            writer.WriteObjectValue(WholeMetricConfiguration);
            writer.WritePropertyName("dimensionGroupOverrideConfigurations");
            writer.WriteStartArray();
            foreach (var item in DimensionGroupOverrideConfigurations)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("seriesOverrideConfigurations");
            writer.WriteStartArray();
            foreach (var item in SeriesOverrideConfigurations)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WriteEndObject();
        }

        internal static AnomalyDetectionConfiguration DeserializeAnomalyDetectionConfiguration(JsonElement element)
        {
            Guid? anomalyDetectionConfigurationId = default;
            string name = default;
            string description = default;
            Guid metricId = default;
            WholeMetricConfiguration wholeMetricConfiguration = default;
            IList<DimensionGroupConfiguration> dimensionGroupOverrideConfigurations = default;
            IList<SeriesConfiguration> seriesOverrideConfigurations = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("anomalyDetectionConfigurationId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    anomalyDetectionConfigurationId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("metricId"))
                {
                    metricId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("wholeMetricConfiguration"))
                {
                    wholeMetricConfiguration = WholeMetricConfiguration.DeserializeWholeMetricConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("dimensionGroupOverrideConfigurations"))
                {
                    List<DimensionGroupConfiguration> array = new List<DimensionGroupConfiguration>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(DimensionGroupConfiguration.DeserializeDimensionGroupConfiguration(item));
                        }
                    }
                    dimensionGroupOverrideConfigurations = array;
                    continue;
                }
                if (property.NameEquals("seriesOverrideConfigurations"))
                {
                    List<SeriesConfiguration> array = new List<SeriesConfiguration>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(SeriesConfiguration.DeserializeSeriesConfiguration(item));
                        }
                    }
                    seriesOverrideConfigurations = array;
                    continue;
                }
            }
            return new AnomalyDetectionConfiguration(anomalyDetectionConfigurationId, name, description, metricId, wholeMetricConfiguration, dimensionGroupOverrideConfigurations, seriesOverrideConfigurations);
        }
    }
}
