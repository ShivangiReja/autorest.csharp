// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace AnomalyDetector.Models
{
    public partial class SeriesResult
    {
        internal static SeriesResult DeserializeSeriesResult(JsonElement element)
        {
            Optional<SeriesIdentity> series = default;
            Optional<IReadOnlyList<DateTimeOffset>> timestampList = default;
            Optional<IReadOnlyList<double>> valueList = default;
            Optional<IReadOnlyList<bool>> isAnomalyList = default;
            Optional<IReadOnlyList<bool>> trendChangeList = default;
            Optional<IReadOnlyList<int>> periodList = default;
            Optional<IReadOnlyList<double>> expectedValueList = default;
            Optional<IReadOnlyList<double>> lowerBoundaryList = default;
            Optional<IReadOnlyList<double>> upperBoundaryList = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("series"))
                {
                    series = SeriesIdentity.DeserializeSeriesIdentity(property.Value);
                    continue;
                }
                if (property.NameEquals("timestampList"))
                {
                    List<DateTimeOffset> array = new List<DateTimeOffset>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetDateTimeOffset("O"));
                    }
                    timestampList = array;
                    continue;
                }
                if (property.NameEquals("valueList"))
                {
                    List<double> array = new List<double>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetDouble());
                    }
                    valueList = array;
                    continue;
                }
                if (property.NameEquals("isAnomalyList"))
                {
                    List<bool> array = new List<bool>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetBoolean());
                    }
                    isAnomalyList = array;
                    continue;
                }
                if (property.NameEquals("trendChangeList"))
                {
                    List<bool> array = new List<bool>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetBoolean());
                    }
                    trendChangeList = array;
                    continue;
                }
                if (property.NameEquals("periodList"))
                {
                    List<int> array = new List<int>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    periodList = array;
                    continue;
                }
                if (property.NameEquals("expectedValueList"))
                {
                    List<double> array = new List<double>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetDouble());
                    }
                    expectedValueList = array;
                    continue;
                }
                if (property.NameEquals("lowerBoundaryList"))
                {
                    List<double> array = new List<double>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetDouble());
                    }
                    lowerBoundaryList = array;
                    continue;
                }
                if (property.NameEquals("upperBoundaryList"))
                {
                    List<double> array = new List<double>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetDouble());
                    }
                    upperBoundaryList = array;
                    continue;
                }
            }
            return new SeriesResult(series.Value, Optional.ToList(timestampList), Optional.ToList(valueList), Optional.ToList(isAnomalyList), Optional.ToList(trendChangeList), Optional.ToList(periodList), Optional.ToList(expectedValueList), Optional.ToList(lowerBoundaryList), Optional.ToList(upperBoundaryList));
        }
    }
}
