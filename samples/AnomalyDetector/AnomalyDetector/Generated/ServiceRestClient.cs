// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using AnomalyDetector.Models;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace AnomalyDetector
{
    internal partial class ServiceRestClient
    {
        private Uri endpoint;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of ServiceRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        public ServiceRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            endpoint ??= new Uri("");

            this.endpoint = endpoint;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateGetAnomalyAlertingConfigurationRequest(Guid configurationId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/alert/anomaly/configurations/", false);
            uri.AppendPath(configurationId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Query a single anomaly alerting configuration. </summary>
        /// <param name="configurationId"> anomaly alerting configuration unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<AnomalyAlertingConfiguration>> GetAnomalyAlertingConfigurationAsync(Guid configurationId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAnomalyAlertingConfigurationRequest(configurationId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AnomalyAlertingConfiguration value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = AnomalyAlertingConfiguration.DeserializeAnomalyAlertingConfiguration(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Query a single anomaly alerting configuration. </summary>
        /// <param name="configurationId"> anomaly alerting configuration unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<AnomalyAlertingConfiguration> GetAnomalyAlertingConfiguration(Guid configurationId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAnomalyAlertingConfigurationRequest(configurationId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AnomalyAlertingConfiguration value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = AnomalyAlertingConfiguration.DeserializeAnomalyAlertingConfiguration(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateAnomalyAlertingConfigurationRequest(Guid configurationId, Stream data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/alert/anomaly/configurations/", false);
            uri.AppendPath(configurationId, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json-merge-patch");
            request.Content = RequestContent.Create(data);
            return message;
        }

        /// <summary> Update anomaly alerting configuration. </summary>
        /// <param name="configurationId"> anomaly alerting configuration unique id. </param>
        /// <param name="data"> anomaly alerting configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> UpdateAnomalyAlertingConfigurationAsync(Guid configurationId, Stream data, CancellationToken cancellationToken = default)
        {
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreateUpdateAnomalyAlertingConfigurationRequest(configurationId, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update anomaly alerting configuration. </summary>
        /// <param name="configurationId"> anomaly alerting configuration unique id. </param>
        /// <param name="data"> anomaly alerting configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response UpdateAnomalyAlertingConfiguration(Guid configurationId, Stream data, CancellationToken cancellationToken = default)
        {
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreateUpdateAnomalyAlertingConfigurationRequest(configurationId, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteAnomalyAlertingConfigurationRequest(Guid configurationId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/alert/anomaly/configurations/", false);
            uri.AppendPath(configurationId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Delete anomaly alerting configuration. </summary>
        /// <param name="configurationId"> anomaly alerting configuration unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> DeleteAnomalyAlertingConfigurationAsync(Guid configurationId, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteAnomalyAlertingConfigurationRequest(configurationId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete anomaly alerting configuration. </summary>
        /// <param name="configurationId"> anomaly alerting configuration unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response DeleteAnomalyAlertingConfiguration(Guid configurationId, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteAnomalyAlertingConfigurationRequest(configurationId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateAnomalyAlertingConfigurationRequest(AnomalyAlertingConfiguration body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/alert/anomaly/configurations", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            if (body != null)
            {
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Create anomaly alerting configuration. </summary>
        /// <param name="body"> anomaly alerting configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<ResponseWithHeaders<ServiceCreateAnomalyAlertingConfigurationHeaders>> CreateAnomalyAlertingConfigurationAsync(AnomalyAlertingConfiguration body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateAnomalyAlertingConfigurationRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new ServiceCreateAnomalyAlertingConfigurationHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 201:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create anomaly alerting configuration. </summary>
        /// <param name="body"> anomaly alerting configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public ResponseWithHeaders<ServiceCreateAnomalyAlertingConfigurationHeaders> CreateAnomalyAlertingConfiguration(AnomalyAlertingConfiguration body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateAnomalyAlertingConfigurationRequest(body);
            _pipeline.Send(message, cancellationToken);
            var headers = new ServiceCreateAnomalyAlertingConfigurationHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 201:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAlertsByAnomalyAlertingConfigurationRequest(Guid configurationId, int? skip, int? top, AlertingResultQuery body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/alert/anomaly/configurations/", false);
            uri.AppendPath(configurationId, true);
            uri.AppendPath("/alerts/query", false);
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            if (body != null)
            {
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Query alerts under anomaly alerting configuration. </summary>
        /// <param name="configurationId"> anomaly alerting configuration unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query alerting result request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<AlertResultList>> GetAlertsByAnomalyAlertingConfigurationAsync(Guid configurationId, int? skip = null, int? top = null, AlertingResultQuery body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAlertsByAnomalyAlertingConfigurationRequest(configurationId, skip, top, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AlertResultList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = AlertResultList.DeserializeAlertResultList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Query alerts under anomaly alerting configuration. </summary>
        /// <param name="configurationId"> anomaly alerting configuration unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query alerting result request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<AlertResultList> GetAlertsByAnomalyAlertingConfiguration(Guid configurationId, int? skip = null, int? top = null, AlertingResultQuery body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAlertsByAnomalyAlertingConfigurationRequest(configurationId, skip, top, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AlertResultList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = AlertResultList.DeserializeAlertResultList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAnomaliesFromAlertByAnomalyAlertingConfigurationRequest(Guid configurationId, string alertId, int? skip, int? top)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/alert/anomaly/configurations/", false);
            uri.AppendPath(configurationId, true);
            uri.AppendPath("/alerts/", false);
            uri.AppendPath(alertId, true);
            uri.AppendPath("/anomalies", false);
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            request.Uri = uri;
            return message;
        }

        /// <summary> Query anomalies under a specific alert. </summary>
        /// <param name="configurationId"> anomaly alerting configuration unique id. </param>
        /// <param name="alertId"> alert id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<AnomalyResultList>> GetAnomaliesFromAlertByAnomalyAlertingConfigurationAsync(Guid configurationId, string alertId, int? skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            if (alertId == null)
            {
                throw new ArgumentNullException(nameof(alertId));
            }

            using var message = CreateGetAnomaliesFromAlertByAnomalyAlertingConfigurationRequest(configurationId, alertId, skip, top);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AnomalyResultList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = AnomalyResultList.DeserializeAnomalyResultList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Query anomalies under a specific alert. </summary>
        /// <param name="configurationId"> anomaly alerting configuration unique id. </param>
        /// <param name="alertId"> alert id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<AnomalyResultList> GetAnomaliesFromAlertByAnomalyAlertingConfiguration(Guid configurationId, string alertId, int? skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            if (alertId == null)
            {
                throw new ArgumentNullException(nameof(alertId));
            }

            using var message = CreateGetAnomaliesFromAlertByAnomalyAlertingConfigurationRequest(configurationId, alertId, skip, top);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AnomalyResultList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = AnomalyResultList.DeserializeAnomalyResultList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetIncidentsFromAlertByAnomalyAlertingConfigurationRequest(Guid configurationId, string alertId, int? skip, int? top)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/alert/anomaly/configurations/", false);
            uri.AppendPath(configurationId, true);
            uri.AppendPath("/alerts/", false);
            uri.AppendPath(alertId, true);
            uri.AppendPath("/incidents", false);
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            request.Uri = uri;
            return message;
        }

        /// <summary> Query incidents under a specific alert. </summary>
        /// <param name="configurationId"> anomaly alerting configuration unique id. </param>
        /// <param name="alertId"> alert id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<IncidentResultList>> GetIncidentsFromAlertByAnomalyAlertingConfigurationAsync(Guid configurationId, string alertId, int? skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            if (alertId == null)
            {
                throw new ArgumentNullException(nameof(alertId));
            }

            using var message = CreateGetIncidentsFromAlertByAnomalyAlertingConfigurationRequest(configurationId, alertId, skip, top);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IncidentResultList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = IncidentResultList.DeserializeIncidentResultList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Query incidents under a specific alert. </summary>
        /// <param name="configurationId"> anomaly alerting configuration unique id. </param>
        /// <param name="alertId"> alert id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<IncidentResultList> GetIncidentsFromAlertByAnomalyAlertingConfiguration(Guid configurationId, string alertId, int? skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            if (alertId == null)
            {
                throw new ArgumentNullException(nameof(alertId));
            }

            using var message = CreateGetIncidentsFromAlertByAnomalyAlertingConfigurationRequest(configurationId, alertId, skip, top);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IncidentResultList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = IncidentResultList.DeserializeIncidentResultList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAnomalyDetectionConfigurationRequest(Guid configurationId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/enrichment/anomalyDetection/configurations/", false);
            uri.AppendPath(configurationId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Query a single anomaly detection configuration. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<AnomalyDetectionConfiguration>> GetAnomalyDetectionConfigurationAsync(Guid configurationId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAnomalyDetectionConfigurationRequest(configurationId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AnomalyDetectionConfiguration value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = AnomalyDetectionConfiguration.DeserializeAnomalyDetectionConfiguration(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Query a single anomaly detection configuration. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<AnomalyDetectionConfiguration> GetAnomalyDetectionConfiguration(Guid configurationId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAnomalyDetectionConfigurationRequest(configurationId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AnomalyDetectionConfiguration value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = AnomalyDetectionConfiguration.DeserializeAnomalyDetectionConfiguration(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateAnomalyDetectionConfigurationRequest(Guid configurationId, Stream data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/enrichment/anomalyDetection/configurations/", false);
            uri.AppendPath(configurationId, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json-merge-patch");
            request.Content = RequestContent.Create(data);
            return message;
        }

        /// <summary> Update anomaly detection configuration. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="data"> anomaly detection configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> UpdateAnomalyDetectionConfigurationAsync(Guid configurationId, Stream data, CancellationToken cancellationToken = default)
        {
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreateUpdateAnomalyDetectionConfigurationRequest(configurationId, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update anomaly detection configuration. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="data"> anomaly detection configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response UpdateAnomalyDetectionConfiguration(Guid configurationId, Stream data, CancellationToken cancellationToken = default)
        {
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreateUpdateAnomalyDetectionConfigurationRequest(configurationId, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteAnomalyDetectionConfigurationRequest(Guid configurationId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/enrichment/anomalyDetection/configurations/", false);
            uri.AppendPath(configurationId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Delete anomaly detection configuration. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> DeleteAnomalyDetectionConfigurationAsync(Guid configurationId, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteAnomalyDetectionConfigurationRequest(configurationId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete anomaly detection configuration. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response DeleteAnomalyDetectionConfiguration(Guid configurationId, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteAnomalyDetectionConfigurationRequest(configurationId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateAnomalyDetectionConfigurationRequest(AnomalyDetectionConfiguration body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/enrichment/anomalyDetection/configurations", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            if (body != null)
            {
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Create anomaly detection configuration. </summary>
        /// <param name="body"> anomaly detection configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<ResponseWithHeaders<ServiceCreateAnomalyDetectionConfigurationHeaders>> CreateAnomalyDetectionConfigurationAsync(AnomalyDetectionConfiguration body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateAnomalyDetectionConfigurationRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new ServiceCreateAnomalyDetectionConfigurationHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 201:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create anomaly detection configuration. </summary>
        /// <param name="body"> anomaly detection configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public ResponseWithHeaders<ServiceCreateAnomalyDetectionConfigurationHeaders> CreateAnomalyDetectionConfiguration(AnomalyDetectionConfiguration body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateAnomalyDetectionConfigurationRequest(body);
            _pipeline.Send(message, cancellationToken);
            var headers = new ServiceCreateAnomalyDetectionConfigurationHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 201:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAnomalyAlertingConfigurationsByAnomalyDetectionConfigurationRequest(Guid configurationId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/enrichment/anomalyDetection/configurations/", false);
            uri.AppendPath(configurationId, true);
            uri.AppendPath("/alert/anomaly/configurations", false);
            request.Uri = uri;
            return message;
        }

        /// <summary> Query all anomaly alerting configurations for specific anomaly detection configuration. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<AnomalyAlertingConfigurationList>> GetAnomalyAlertingConfigurationsByAnomalyDetectionConfigurationAsync(Guid configurationId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAnomalyAlertingConfigurationsByAnomalyDetectionConfigurationRequest(configurationId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AnomalyAlertingConfigurationList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = AnomalyAlertingConfigurationList.DeserializeAnomalyAlertingConfigurationList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Query all anomaly alerting configurations for specific anomaly detection configuration. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<AnomalyAlertingConfigurationList> GetAnomalyAlertingConfigurationsByAnomalyDetectionConfiguration(Guid configurationId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAnomalyAlertingConfigurationsByAnomalyDetectionConfigurationRequest(configurationId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AnomalyAlertingConfigurationList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = AnomalyAlertingConfigurationList.DeserializeAnomalyAlertingConfigurationList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetSeriesByAnomalyDetectionConfigurationRequest(Guid configurationId, DetectionSeriesQuery body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/enrichment/anomalyDetection/configurations/", false);
            uri.AppendPath(configurationId, true);
            uri.AppendPath("/series/query", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            if (body != null)
            {
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Query series enriched by anomaly detection. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="body"> query series detection result request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<SeriesResultList>> GetSeriesByAnomalyDetectionConfigurationAsync(Guid configurationId, DetectionSeriesQuery body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetSeriesByAnomalyDetectionConfigurationRequest(configurationId, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SeriesResultList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = SeriesResultList.DeserializeSeriesResultList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Query series enriched by anomaly detection. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="body"> query series detection result request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<SeriesResultList> GetSeriesByAnomalyDetectionConfiguration(Guid configurationId, DetectionSeriesQuery body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetSeriesByAnomalyDetectionConfigurationRequest(configurationId, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SeriesResultList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = SeriesResultList.DeserializeSeriesResultList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAnomaliesByAnomalyDetectionConfigurationRequest(Guid configurationId, int? skip, int? top, DetectionResultQuery body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/enrichment/anomalyDetection/configurations/", false);
            uri.AppendPath(configurationId, true);
            uri.AppendPath("/anomalies/query", false);
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            if (body != null)
            {
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Query anomalies under anomaly detection configuration. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query detection result request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<AnomalyResultList>> GetAnomaliesByAnomalyDetectionConfigurationAsync(Guid configurationId, int? skip = null, int? top = null, DetectionResultQuery body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAnomaliesByAnomalyDetectionConfigurationRequest(configurationId, skip, top, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AnomalyResultList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = AnomalyResultList.DeserializeAnomalyResultList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Query anomalies under anomaly detection configuration. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query detection result request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<AnomalyResultList> GetAnomaliesByAnomalyDetectionConfiguration(Guid configurationId, int? skip = null, int? top = null, DetectionResultQuery body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAnomaliesByAnomalyDetectionConfigurationRequest(configurationId, skip, top, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AnomalyResultList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = AnomalyResultList.DeserializeAnomalyResultList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDimensionOfAnomaliesByAnomalyDetectionConfigurationRequest(Guid configurationId, int? skip, int? top, AnomalyDimensionQuery body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/enrichment/anomalyDetection/configurations/", false);
            uri.AppendPath(configurationId, true);
            uri.AppendPath("/anomalies/dimension/query", false);
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            if (body != null)
            {
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Query dimension values of anomalies. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query dimension values request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<AnomalyDimensionList>> GetDimensionOfAnomaliesByAnomalyDetectionConfigurationAsync(Guid configurationId, int? skip = null, int? top = null, AnomalyDimensionQuery body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDimensionOfAnomaliesByAnomalyDetectionConfigurationRequest(configurationId, skip, top, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AnomalyDimensionList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = AnomalyDimensionList.DeserializeAnomalyDimensionList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Query dimension values of anomalies. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query dimension values request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<AnomalyDimensionList> GetDimensionOfAnomaliesByAnomalyDetectionConfiguration(Guid configurationId, int? skip = null, int? top = null, AnomalyDimensionQuery body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDimensionOfAnomaliesByAnomalyDetectionConfigurationRequest(configurationId, skip, top, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AnomalyDimensionList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = AnomalyDimensionList.DeserializeAnomalyDimensionList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetIncidentsByAnomalyDetectionConfigurationRequest(Guid configurationId, int? skip, int? top, DetectionResultQuery body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/enrichment/anomalyDetection/configurations/", false);
            uri.AppendPath(configurationId, true);
            uri.AppendPath("/incidents/query", false);
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            if (body != null)
            {
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Query incidents under anomaly detection configuration. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query detection result request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<IncidentResultList>> GetIncidentsByAnomalyDetectionConfigurationAsync(Guid configurationId, int? skip = null, int? top = null, DetectionResultQuery body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetIncidentsByAnomalyDetectionConfigurationRequest(configurationId, skip, top, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IncidentResultList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = IncidentResultList.DeserializeIncidentResultList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Query incidents under anomaly detection configuration. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query detection result request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<IncidentResultList> GetIncidentsByAnomalyDetectionConfiguration(Guid configurationId, int? skip = null, int? top = null, DetectionResultQuery body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetIncidentsByAnomalyDetectionConfigurationRequest(configurationId, skip, top, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IncidentResultList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = IncidentResultList.DeserializeIncidentResultList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRootCauseOfIncidentByAnomalyDetectionConfigurationRequest(Guid configurationId, string incidentId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/enrichment/anomalyDetection/configurations/", false);
            uri.AppendPath(configurationId, true);
            uri.AppendPath("/incidents/", false);
            uri.AppendPath(incidentId, true);
            uri.AppendPath("/rootCause", false);
            request.Uri = uri;
            return message;
        }

        /// <summary> Query root cause for incident. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="incidentId"> incident id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<RootCauseList>> GetRootCauseOfIncidentByAnomalyDetectionConfigurationAsync(Guid configurationId, string incidentId, CancellationToken cancellationToken = default)
        {
            if (incidentId == null)
            {
                throw new ArgumentNullException(nameof(incidentId));
            }

            using var message = CreateGetRootCauseOfIncidentByAnomalyDetectionConfigurationRequest(configurationId, incidentId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RootCauseList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = RootCauseList.DeserializeRootCauseList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Query root cause for incident. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="incidentId"> incident id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<RootCauseList> GetRootCauseOfIncidentByAnomalyDetectionConfiguration(Guid configurationId, string incidentId, CancellationToken cancellationToken = default)
        {
            if (incidentId == null)
            {
                throw new ArgumentNullException(nameof(incidentId));
            }

            using var message = CreateGetRootCauseOfIncidentByAnomalyDetectionConfigurationRequest(configurationId, incidentId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RootCauseList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = RootCauseList.DeserializeRootCauseList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListDataFeedsRequest(string dataFeedName, DataSourceType? dataSourceType, Granularity? granularityName, EntityStatus? status, string creator, int? skip, int? top)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/dataFeeds", false);
            if (dataFeedName != null)
            {
                uri.AppendQuery("dataFeedName", dataFeedName, true);
            }
            if (dataSourceType != null)
            {
                uri.AppendQuery("dataSourceType", dataSourceType.Value.ToString(), true);
            }
            if (granularityName != null)
            {
                uri.AppendQuery("granularityName", granularityName.Value.ToString(), true);
            }
            if (status != null)
            {
                uri.AppendQuery("status", status.Value.ToString(), true);
            }
            if (creator != null)
            {
                uri.AppendQuery("creator", creator, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            request.Uri = uri;
            return message;
        }

        /// <summary> List all data feeds. </summary>
        /// <param name="dataFeedName"> filter data feed by its name. </param>
        /// <param name="dataSourceType"> filter data feed by its source type. </param>
        /// <param name="granularityName"> filter data feed by its granularity. </param>
        /// <param name="status"> filter data feed by its status. </param>
        /// <param name="creator"> filter data feed by its creator. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<DataFeedList>> ListDataFeedsAsync(string dataFeedName = null, DataSourceType? dataSourceType = null, Granularity? granularityName = null, EntityStatus? status = null, string creator = null, int? skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListDataFeedsRequest(dataFeedName, dataSourceType, granularityName, status, creator, skip, top);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DataFeedList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = DataFeedList.DeserializeDataFeedList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List all data feeds. </summary>
        /// <param name="dataFeedName"> filter data feed by its name. </param>
        /// <param name="dataSourceType"> filter data feed by its source type. </param>
        /// <param name="granularityName"> filter data feed by its granularity. </param>
        /// <param name="status"> filter data feed by its status. </param>
        /// <param name="creator"> filter data feed by its creator. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<DataFeedList> ListDataFeeds(string dataFeedName = null, DataSourceType? dataSourceType = null, Granularity? granularityName = null, EntityStatus? status = null, string creator = null, int? skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListDataFeedsRequest(dataFeedName, dataSourceType, granularityName, status, creator, skip, top);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DataFeedList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = DataFeedList.DeserializeDataFeedList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateDataFeedRequest(Paths1Rbc4PuDatafeedsPostRequestbodyContentApplicationJsonSchema body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/dataFeeds", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            if (body != null)
            {
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Create a new data feed. </summary>
        /// <param name="body"> parameters to create a data feed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<ResponseWithHeaders<ServiceCreateDataFeedHeaders>> CreateDataFeedAsync(Paths1Rbc4PuDatafeedsPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateDataFeedRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new ServiceCreateDataFeedHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 201:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create a new data feed. </summary>
        /// <param name="body"> parameters to create a data feed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public ResponseWithHeaders<ServiceCreateDataFeedHeaders> CreateDataFeed(Paths1Rbc4PuDatafeedsPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateDataFeedRequest(body);
            _pipeline.Send(message, cancellationToken);
            var headers = new ServiceCreateDataFeedHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 201:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDataFeedByIdRequest(Guid dataFeedId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/dataFeeds/", false);
            uri.AppendPath(dataFeedId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Get a data feed by its id. </summary>
        /// <param name="dataFeedId"> The data feed unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<PathsGmfhusDatafeedsDatafeedidGetResponses200ContentApplicationJsonSchema>> GetDataFeedByIdAsync(Guid dataFeedId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDataFeedByIdRequest(dataFeedId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PathsGmfhusDatafeedsDatafeedidGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = PathsGmfhusDatafeedsDatafeedidGetResponses200ContentApplicationJsonSchema.DeserializePathsGmfhusDatafeedsDatafeedidGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get a data feed by its id. </summary>
        /// <param name="dataFeedId"> The data feed unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<PathsGmfhusDatafeedsDatafeedidGetResponses200ContentApplicationJsonSchema> GetDataFeedById(Guid dataFeedId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDataFeedByIdRequest(dataFeedId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PathsGmfhusDatafeedsDatafeedidGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = PathsGmfhusDatafeedsDatafeedidGetResponses200ContentApplicationJsonSchema.DeserializePathsGmfhusDatafeedsDatafeedidGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateDataFeedRequest(Guid dataFeedId, Stream data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/dataFeeds/", false);
            uri.AppendPath(dataFeedId, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json-merge-patch");
            request.Content = RequestContent.Create(data);
            return message;
        }

        /// <summary> Update a data feed. </summary>
        /// <param name="dataFeedId"> The data feed unique id. </param>
        /// <param name="data"> parameters to update a data feed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> UpdateDataFeedAsync(Guid dataFeedId, Stream data, CancellationToken cancellationToken = default)
        {
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreateUpdateDataFeedRequest(dataFeedId, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update a data feed. </summary>
        /// <param name="dataFeedId"> The data feed unique id. </param>
        /// <param name="data"> parameters to update a data feed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response UpdateDataFeed(Guid dataFeedId, Stream data, CancellationToken cancellationToken = default)
        {
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreateUpdateDataFeedRequest(dataFeedId, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteDataFeedRequest(Guid dataFeedId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/dataFeeds/", false);
            uri.AppendPath(dataFeedId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Delete a data feed. </summary>
        /// <param name="dataFeedId"> The data feed unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> DeleteDataFeedAsync(Guid dataFeedId, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteDataFeedRequest(dataFeedId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete a data feed. </summary>
        /// <param name="dataFeedId"> The data feed unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response DeleteDataFeed(Guid dataFeedId, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteDataFeedRequest(dataFeedId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetMetricFeedbackRequest(Guid feedbackId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/feedback/metric/", false);
            uri.AppendPath(feedbackId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Get a metric feedback by its id. </summary>
        /// <param name="feedbackId"> The Uuid to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<PathsK7L8KkFeedbackMetricFeedbackidGetResponses200ContentApplicationJsonSchema>> GetMetricFeedbackAsync(Guid feedbackId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetMetricFeedbackRequest(feedbackId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PathsK7L8KkFeedbackMetricFeedbackidGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = PathsK7L8KkFeedbackMetricFeedbackidGetResponses200ContentApplicationJsonSchema.DeserializePathsK7L8KkFeedbackMetricFeedbackidGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get a metric feedback by its id. </summary>
        /// <param name="feedbackId"> The Uuid to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<PathsK7L8KkFeedbackMetricFeedbackidGetResponses200ContentApplicationJsonSchema> GetMetricFeedback(Guid feedbackId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetMetricFeedbackRequest(feedbackId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PathsK7L8KkFeedbackMetricFeedbackidGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = PathsK7L8KkFeedbackMetricFeedbackidGetResponses200ContentApplicationJsonSchema.DeserializePathsK7L8KkFeedbackMetricFeedbackidGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListMetricFeedbacksRequest(int? skip, int? top, Paths1AmeiraFeedbackMetricQueryPostRequestbodyContentApplicationJsonSchema body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/feedback/metric/query", false);
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            if (body != null)
            {
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> List feedback on the given metric. </summary>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> metric feedback filter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<MetricFeedbackList>> ListMetricFeedbacksAsync(int? skip = null, int? top = null, Paths1AmeiraFeedbackMetricQueryPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListMetricFeedbacksRequest(skip, top, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetricFeedbackList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = MetricFeedbackList.DeserializeMetricFeedbackList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List feedback on the given metric. </summary>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> metric feedback filter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<MetricFeedbackList> ListMetricFeedbacks(int? skip = null, int? top = null, Paths1AmeiraFeedbackMetricQueryPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListMetricFeedbacksRequest(skip, top, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetricFeedbackList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = MetricFeedbackList.DeserializeMetricFeedbackList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateMetricFeedbackRequest(PathsEnzgflFeedbackMetricPostRequestbodyContentApplicationJsonSchema body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/feedback/metric", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            if (body != null)
            {
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Create a new metric feedback. </summary>
        /// <param name="body"> metric feedback. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<ResponseWithHeaders<ServiceCreateMetricFeedbackHeaders>> CreateMetricFeedbackAsync(PathsEnzgflFeedbackMetricPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateMetricFeedbackRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new ServiceCreateMetricFeedbackHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 201:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create a new metric feedback. </summary>
        /// <param name="body"> metric feedback. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public ResponseWithHeaders<ServiceCreateMetricFeedbackHeaders> CreateMetricFeedback(PathsEnzgflFeedbackMetricPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateMetricFeedbackRequest(body);
            _pipeline.Send(message, cancellationToken);
            var headers = new ServiceCreateMetricFeedbackHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 201:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListHooksRequest(string hookName, int? skip, int? top)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/hooks", false);
            if (hookName != null)
            {
                uri.AppendQuery("hookName", hookName, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            request.Uri = uri;
            return message;
        }

        /// <summary> List all hooks. </summary>
        /// <param name="hookName"> filter hook by its name. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<HookList>> ListHooksAsync(string hookName = null, int? skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListHooksRequest(hookName, skip, top);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        HookList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = HookList.DeserializeHookList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List all hooks. </summary>
        /// <param name="hookName"> filter hook by its name. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<HookList> ListHooks(string hookName = null, int? skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListHooksRequest(hookName, skip, top);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        HookList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = HookList.DeserializeHookList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateHookRequest(Paths1SkbhkhHooksPostRequestbodyContentApplicationJsonSchema body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/hooks", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            if (body != null)
            {
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Create a new hook. </summary>
        /// <param name="body"> Create hook request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<ResponseWithHeaders<ServiceCreateHookHeaders>> CreateHookAsync(Paths1SkbhkhHooksPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateHookRequest(body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new ServiceCreateHookHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 201:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create a new hook. </summary>
        /// <param name="body"> Create hook request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public ResponseWithHeaders<ServiceCreateHookHeaders> CreateHook(Paths1SkbhkhHooksPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateHookRequest(body);
            _pipeline.Send(message, cancellationToken);
            var headers = new ServiceCreateHookHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 201:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetHookRequest(Guid hookId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/hooks/", false);
            uri.AppendPath(hookId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Get a hook by its id. </summary>
        /// <param name="hookId"> Hook unique ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<Paths14A3T2HHooksHookidGetResponses200ContentApplicationJsonSchema>> GetHookAsync(Guid hookId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetHookRequest(hookId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Paths14A3T2HHooksHookidGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = Paths14A3T2HHooksHookidGetResponses200ContentApplicationJsonSchema.DeserializePaths14A3T2HHooksHookidGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get a hook by its id. </summary>
        /// <param name="hookId"> Hook unique ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<Paths14A3T2HHooksHookidGetResponses200ContentApplicationJsonSchema> GetHook(Guid hookId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetHookRequest(hookId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Paths14A3T2HHooksHookidGetResponses200ContentApplicationJsonSchema value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = Paths14A3T2HHooksHookidGetResponses200ContentApplicationJsonSchema.DeserializePaths14A3T2HHooksHookidGetResponses200ContentApplicationJsonSchema(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateHookRequest(Guid hookId, Stream data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/hooks/", false);
            uri.AppendPath(hookId, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json-merge-patch");
            request.Content = RequestContent.Create(data);
            return message;
        }

        /// <summary> Update a hook. </summary>
        /// <param name="hookId"> Hook unique ID. </param>
        /// <param name="data"> Update hook request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> UpdateHookAsync(Guid hookId, Stream data, CancellationToken cancellationToken = default)
        {
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreateUpdateHookRequest(hookId, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update a hook. </summary>
        /// <param name="hookId"> Hook unique ID. </param>
        /// <param name="data"> Update hook request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response UpdateHook(Guid hookId, Stream data, CancellationToken cancellationToken = default)
        {
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreateUpdateHookRequest(hookId, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteHookRequest(Guid hookId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/hooks/", false);
            uri.AppendPath(hookId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Delete a hook. </summary>
        /// <param name="hookId"> Hook unique ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> DeleteHookAsync(Guid hookId, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteHookRequest(hookId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete a hook. </summary>
        /// <param name="hookId"> Hook unique ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response DeleteHook(Guid hookId, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteHookRequest(hookId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDataFeedIngestionStatusRequest(Guid dataFeedId, int? skip, int? top, IngestionStatusQueryOptions body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/dataFeeds/", false);
            uri.AppendPath(dataFeedId, true);
            uri.AppendPath("/ingestionStatus/query", false);
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            if (body != null)
            {
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Get data ingestion status by data feed. </summary>
        /// <param name="dataFeedId"> The data feed unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> The query time range. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<IngestionStatusList>> GetDataFeedIngestionStatusAsync(Guid dataFeedId, int? skip = null, int? top = null, IngestionStatusQueryOptions body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDataFeedIngestionStatusRequest(dataFeedId, skip, top, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IngestionStatusList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = IngestionStatusList.DeserializeIngestionStatusList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get data ingestion status by data feed. </summary>
        /// <param name="dataFeedId"> The data feed unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> The query time range. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<IngestionStatusList> GetDataFeedIngestionStatus(Guid dataFeedId, int? skip = null, int? top = null, IngestionStatusQueryOptions body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDataFeedIngestionStatusRequest(dataFeedId, skip, top, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IngestionStatusList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = IngestionStatusList.DeserializeIngestionStatusList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateResetDataFeedIngestionStatusRequest(Guid dataFeedId, IngestionProgressResetOptions body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/dataFeeds/", false);
            uri.AppendPath(dataFeedId, true);
            uri.AppendPath("/ingestionProgress/reset", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            if (body != null)
            {
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Reset data ingestion status by data feed to backfill data. </summary>
        /// <param name="dataFeedId"> The data feed unique id. </param>
        /// <param name="body"> The backfill time range. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> ResetDataFeedIngestionStatusAsync(Guid dataFeedId, IngestionProgressResetOptions body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateResetDataFeedIngestionStatusRequest(dataFeedId, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Reset data ingestion status by data feed to backfill data. </summary>
        /// <param name="dataFeedId"> The data feed unique id. </param>
        /// <param name="body"> The backfill time range. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response ResetDataFeedIngestionStatus(Guid dataFeedId, IngestionProgressResetOptions body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateResetDataFeedIngestionStatusRequest(dataFeedId, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetIngestionProgressRequest(Guid dataFeedId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/dataFeeds/", false);
            uri.AppendPath(dataFeedId, true);
            uri.AppendPath("/ingestionProgress", false);
            request.Uri = uri;
            return message;
        }

        /// <summary> Get data last success ingestion job timestamp by data feed. </summary>
        /// <param name="dataFeedId"> The data feed unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<DataFeedIngestionProgress>> GetIngestionProgressAsync(Guid dataFeedId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetIngestionProgressRequest(dataFeedId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DataFeedIngestionProgress value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = DataFeedIngestionProgress.DeserializeDataFeedIngestionProgress(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get data last success ingestion job timestamp by data feed. </summary>
        /// <param name="dataFeedId"> The data feed unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<DataFeedIngestionProgress> GetIngestionProgress(Guid dataFeedId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetIngestionProgressRequest(dataFeedId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DataFeedIngestionProgress value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = DataFeedIngestionProgress.DeserializeDataFeedIngestionProgress(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetMetricDataRequest(Guid metricId, int? skip, int? top, MetricDataQueryOptions body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/metrics/", false);
            uri.AppendPath(metricId, true);
            uri.AppendPath("/data/query", false);
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            if (body != null)
            {
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Get time series data from metric. </summary>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query time series data condition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<MetricDataList>> GetMetricDataAsync(Guid metricId, int? skip = null, int? top = null, MetricDataQueryOptions body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetMetricDataRequest(metricId, skip, top, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetricDataList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = MetricDataList.DeserializeMetricDataList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get time series data from metric. </summary>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query time series data condition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<MetricDataList> GetMetricData(Guid metricId, int? skip = null, int? top = null, MetricDataQueryOptions body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetMetricDataRequest(metricId, skip, top, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetricDataList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = MetricDataList.DeserializeMetricDataList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetMetricSeriesRequest(Guid metricId, int? skip, int? top, MetricSeriesQueryOptions body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/metrics/", false);
            uri.AppendPath(metricId, true);
            uri.AppendPath("/series/query", false);
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            if (body != null)
            {
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> List series (dimension combinations) from metric. </summary>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> filter to query series. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<MetricSeriesList>> GetMetricSeriesAsync(Guid metricId, int? skip = null, int? top = null, MetricSeriesQueryOptions body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetMetricSeriesRequest(metricId, skip, top, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetricSeriesList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = MetricSeriesList.DeserializeMetricSeriesList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List series (dimension combinations) from metric. </summary>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> filter to query series. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<MetricSeriesList> GetMetricSeries(Guid metricId, int? skip = null, int? top = null, MetricSeriesQueryOptions body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetMetricSeriesRequest(metricId, skip, top, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetricSeriesList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = MetricSeriesList.DeserializeMetricSeriesList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetMetricDimensionRequest(Guid metricId, int? skip, int? top, MetricDimensionQueryOptions body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/metrics/", false);
            uri.AppendPath(metricId, true);
            uri.AppendPath("/dimension/query", false);
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            if (body != null)
            {
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> List dimension from certain metric. </summary>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query dimension option. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<MetricDimensionList>> GetMetricDimensionAsync(Guid metricId, int? skip = null, int? top = null, MetricDimensionQueryOptions body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetMetricDimensionRequest(metricId, skip, top, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetricDimensionList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = MetricDimensionList.DeserializeMetricDimensionList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List dimension from certain metric. </summary>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query dimension option. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<MetricDimensionList> GetMetricDimension(Guid metricId, int? skip = null, int? top = null, MetricDimensionQueryOptions body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetMetricDimensionRequest(metricId, skip, top, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetricDimensionList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = MetricDimensionList.DeserializeMetricDimensionList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAnomalyDetectionConfigurationsByMetricRequest(Guid metricId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/metrics/", false);
            uri.AppendPath(metricId, true);
            uri.AppendPath("/enrichment/anomalyDetection/configurations", false);
            request.Uri = uri;
            return message;
        }

        /// <summary> Query all anomaly detection configurations for specific metric. </summary>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<AnomalyDetectionConfigurationList>> GetAnomalyDetectionConfigurationsByMetricAsync(Guid metricId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAnomalyDetectionConfigurationsByMetricRequest(metricId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AnomalyDetectionConfigurationList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = AnomalyDetectionConfigurationList.DeserializeAnomalyDetectionConfigurationList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Query all anomaly detection configurations for specific metric. </summary>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<AnomalyDetectionConfigurationList> GetAnomalyDetectionConfigurationsByMetric(Guid metricId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAnomalyDetectionConfigurationsByMetricRequest(metricId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AnomalyDetectionConfigurationList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = AnomalyDetectionConfigurationList.DeserializeAnomalyDetectionConfigurationList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetEnrichmentStatusByMetricRequest(Guid metricId, int? skip, int? top, EnrichmentStatusQueryOption body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/metrics/", false);
            uri.AppendPath(metricId, true);
            uri.AppendPath("/status/enrichment/anomalyDetection/query", false);
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            if (body != null)
            {
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Query anomaly detection status. </summary>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<EnrichmentStatusList>> GetEnrichmentStatusByMetricAsync(Guid metricId, int? skip = null, int? top = null, EnrichmentStatusQueryOption body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetEnrichmentStatusByMetricRequest(metricId, skip, top, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EnrichmentStatusList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = EnrichmentStatusList.DeserializeEnrichmentStatusList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Query anomaly detection status. </summary>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<EnrichmentStatusList> GetEnrichmentStatusByMetric(Guid metricId, int? skip = null, int? top = null, EnrichmentStatusQueryOption body = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetEnrichmentStatusByMetricRequest(metricId, skip, top, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EnrichmentStatusList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = EnrichmentStatusList.DeserializeEnrichmentStatusList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAlertsByAnomalyAlertingConfigurationNextPageRequest(string nextLink, Guid configurationId, int? skip, int? top, AlertingResultQuery body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            return message;
        }

        /// <summary> Query alerts under anomaly alerting configuration. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="configurationId"> anomaly alerting configuration unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query alerting result request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<AlertResultList>> GetAlertsByAnomalyAlertingConfigurationNextPageAsync(string nextLink, Guid configurationId, int? skip = null, int? top = null, AlertingResultQuery body = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetAlertsByAnomalyAlertingConfigurationNextPageRequest(nextLink, configurationId, skip, top, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AlertResultList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = AlertResultList.DeserializeAlertResultList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Query alerts under anomaly alerting configuration. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="configurationId"> anomaly alerting configuration unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query alerting result request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<AlertResultList> GetAlertsByAnomalyAlertingConfigurationNextPage(string nextLink, Guid configurationId, int? skip = null, int? top = null, AlertingResultQuery body = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetAlertsByAnomalyAlertingConfigurationNextPageRequest(nextLink, configurationId, skip, top, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AlertResultList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = AlertResultList.DeserializeAlertResultList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAnomaliesFromAlertByAnomalyAlertingConfigurationNextPageRequest(string nextLink, Guid configurationId, string alertId, int? skip, int? top)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            return message;
        }

        /// <summary> Query anomalies under a specific alert. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="configurationId"> anomaly alerting configuration unique id. </param>
        /// <param name="alertId"> alert id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<AnomalyResultList>> GetAnomaliesFromAlertByAnomalyAlertingConfigurationNextPageAsync(string nextLink, Guid configurationId, string alertId, int? skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (alertId == null)
            {
                throw new ArgumentNullException(nameof(alertId));
            }

            using var message = CreateGetAnomaliesFromAlertByAnomalyAlertingConfigurationNextPageRequest(nextLink, configurationId, alertId, skip, top);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AnomalyResultList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = AnomalyResultList.DeserializeAnomalyResultList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Query anomalies under a specific alert. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="configurationId"> anomaly alerting configuration unique id. </param>
        /// <param name="alertId"> alert id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<AnomalyResultList> GetAnomaliesFromAlertByAnomalyAlertingConfigurationNextPage(string nextLink, Guid configurationId, string alertId, int? skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (alertId == null)
            {
                throw new ArgumentNullException(nameof(alertId));
            }

            using var message = CreateGetAnomaliesFromAlertByAnomalyAlertingConfigurationNextPageRequest(nextLink, configurationId, alertId, skip, top);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AnomalyResultList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = AnomalyResultList.DeserializeAnomalyResultList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetIncidentsFromAlertByAnomalyAlertingConfigurationNextPageRequest(string nextLink, Guid configurationId, string alertId, int? skip, int? top)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            return message;
        }

        /// <summary> Query incidents under a specific alert. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="configurationId"> anomaly alerting configuration unique id. </param>
        /// <param name="alertId"> alert id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<IncidentResultList>> GetIncidentsFromAlertByAnomalyAlertingConfigurationNextPageAsync(string nextLink, Guid configurationId, string alertId, int? skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (alertId == null)
            {
                throw new ArgumentNullException(nameof(alertId));
            }

            using var message = CreateGetIncidentsFromAlertByAnomalyAlertingConfigurationNextPageRequest(nextLink, configurationId, alertId, skip, top);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IncidentResultList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = IncidentResultList.DeserializeIncidentResultList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Query incidents under a specific alert. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="configurationId"> anomaly alerting configuration unique id. </param>
        /// <param name="alertId"> alert id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<IncidentResultList> GetIncidentsFromAlertByAnomalyAlertingConfigurationNextPage(string nextLink, Guid configurationId, string alertId, int? skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (alertId == null)
            {
                throw new ArgumentNullException(nameof(alertId));
            }

            using var message = CreateGetIncidentsFromAlertByAnomalyAlertingConfigurationNextPageRequest(nextLink, configurationId, alertId, skip, top);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IncidentResultList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = IncidentResultList.DeserializeIncidentResultList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAnomaliesByAnomalyDetectionConfigurationNextPageRequest(string nextLink, Guid configurationId, int? skip, int? top, DetectionResultQuery body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            return message;
        }

        /// <summary> Query anomalies under anomaly detection configuration. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query detection result request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<AnomalyResultList>> GetAnomaliesByAnomalyDetectionConfigurationNextPageAsync(string nextLink, Guid configurationId, int? skip = null, int? top = null, DetectionResultQuery body = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetAnomaliesByAnomalyDetectionConfigurationNextPageRequest(nextLink, configurationId, skip, top, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AnomalyResultList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = AnomalyResultList.DeserializeAnomalyResultList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Query anomalies under anomaly detection configuration. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query detection result request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<AnomalyResultList> GetAnomaliesByAnomalyDetectionConfigurationNextPage(string nextLink, Guid configurationId, int? skip = null, int? top = null, DetectionResultQuery body = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetAnomaliesByAnomalyDetectionConfigurationNextPageRequest(nextLink, configurationId, skip, top, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AnomalyResultList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = AnomalyResultList.DeserializeAnomalyResultList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDimensionOfAnomaliesByAnomalyDetectionConfigurationNextPageRequest(string nextLink, Guid configurationId, int? skip, int? top, AnomalyDimensionQuery body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            return message;
        }

        /// <summary> Query dimension values of anomalies. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query dimension values request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<AnomalyDimensionList>> GetDimensionOfAnomaliesByAnomalyDetectionConfigurationNextPageAsync(string nextLink, Guid configurationId, int? skip = null, int? top = null, AnomalyDimensionQuery body = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetDimensionOfAnomaliesByAnomalyDetectionConfigurationNextPageRequest(nextLink, configurationId, skip, top, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AnomalyDimensionList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = AnomalyDimensionList.DeserializeAnomalyDimensionList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Query dimension values of anomalies. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query dimension values request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<AnomalyDimensionList> GetDimensionOfAnomaliesByAnomalyDetectionConfigurationNextPage(string nextLink, Guid configurationId, int? skip = null, int? top = null, AnomalyDimensionQuery body = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetDimensionOfAnomaliesByAnomalyDetectionConfigurationNextPageRequest(nextLink, configurationId, skip, top, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AnomalyDimensionList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = AnomalyDimensionList.DeserializeAnomalyDimensionList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetIncidentsByAnomalyDetectionConfigurationNextPageRequest(string nextLink, Guid configurationId, int? skip, int? top, DetectionResultQuery body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            return message;
        }

        /// <summary> Query incidents under anomaly detection configuration. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query detection result request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<IncidentResultList>> GetIncidentsByAnomalyDetectionConfigurationNextPageAsync(string nextLink, Guid configurationId, int? skip = null, int? top = null, DetectionResultQuery body = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetIncidentsByAnomalyDetectionConfigurationNextPageRequest(nextLink, configurationId, skip, top, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IncidentResultList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = IncidentResultList.DeserializeIncidentResultList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Query incidents under anomaly detection configuration. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query detection result request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<IncidentResultList> GetIncidentsByAnomalyDetectionConfigurationNextPage(string nextLink, Guid configurationId, int? skip = null, int? top = null, DetectionResultQuery body = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetIncidentsByAnomalyDetectionConfigurationNextPageRequest(nextLink, configurationId, skip, top, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IncidentResultList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = IncidentResultList.DeserializeIncidentResultList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListDataFeedsNextPageRequest(string nextLink, string dataFeedName, DataSourceType? dataSourceType, Granularity? granularityName, EntityStatus? status, string creator, int? skip, int? top)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            return message;
        }

        /// <summary> List all data feeds. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="dataFeedName"> filter data feed by its name. </param>
        /// <param name="dataSourceType"> filter data feed by its source type. </param>
        /// <param name="granularityName"> filter data feed by its granularity. </param>
        /// <param name="status"> filter data feed by its status. </param>
        /// <param name="creator"> filter data feed by its creator. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<DataFeedList>> ListDataFeedsNextPageAsync(string nextLink, string dataFeedName = null, DataSourceType? dataSourceType = null, Granularity? granularityName = null, EntityStatus? status = null, string creator = null, int? skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListDataFeedsNextPageRequest(nextLink, dataFeedName, dataSourceType, granularityName, status, creator, skip, top);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DataFeedList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = DataFeedList.DeserializeDataFeedList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List all data feeds. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="dataFeedName"> filter data feed by its name. </param>
        /// <param name="dataSourceType"> filter data feed by its source type. </param>
        /// <param name="granularityName"> filter data feed by its granularity. </param>
        /// <param name="status"> filter data feed by its status. </param>
        /// <param name="creator"> filter data feed by its creator. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<DataFeedList> ListDataFeedsNextPage(string nextLink, string dataFeedName = null, DataSourceType? dataSourceType = null, Granularity? granularityName = null, EntityStatus? status = null, string creator = null, int? skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListDataFeedsNextPageRequest(nextLink, dataFeedName, dataSourceType, granularityName, status, creator, skip, top);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DataFeedList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = DataFeedList.DeserializeDataFeedList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListMetricFeedbacksNextPageRequest(string nextLink, int? skip, int? top, Paths1AmeiraFeedbackMetricQueryPostRequestbodyContentApplicationJsonSchema body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            return message;
        }

        /// <summary> List feedback on the given metric. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> metric feedback filter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<MetricFeedbackList>> ListMetricFeedbacksNextPageAsync(string nextLink, int? skip = null, int? top = null, Paths1AmeiraFeedbackMetricQueryPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListMetricFeedbacksNextPageRequest(nextLink, skip, top, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetricFeedbackList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = MetricFeedbackList.DeserializeMetricFeedbackList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List feedback on the given metric. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> metric feedback filter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<MetricFeedbackList> ListMetricFeedbacksNextPage(string nextLink, int? skip = null, int? top = null, Paths1AmeiraFeedbackMetricQueryPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListMetricFeedbacksNextPageRequest(nextLink, skip, top, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetricFeedbackList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = MetricFeedbackList.DeserializeMetricFeedbackList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListHooksNextPageRequest(string nextLink, string hookName, int? skip, int? top)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            return message;
        }

        /// <summary> List all hooks. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="hookName"> filter hook by its name. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<HookList>> ListHooksNextPageAsync(string nextLink, string hookName = null, int? skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListHooksNextPageRequest(nextLink, hookName, skip, top);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        HookList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = HookList.DeserializeHookList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List all hooks. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="hookName"> filter hook by its name. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<HookList> ListHooksNextPage(string nextLink, string hookName = null, int? skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListHooksNextPageRequest(nextLink, hookName, skip, top);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        HookList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = HookList.DeserializeHookList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDataFeedIngestionStatusNextPageRequest(string nextLink, Guid dataFeedId, int? skip, int? top, IngestionStatusQueryOptions body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            return message;
        }

        /// <summary> Get data ingestion status by data feed. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="dataFeedId"> The data feed unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> The query time range. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<IngestionStatusList>> GetDataFeedIngestionStatusNextPageAsync(string nextLink, Guid dataFeedId, int? skip = null, int? top = null, IngestionStatusQueryOptions body = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetDataFeedIngestionStatusNextPageRequest(nextLink, dataFeedId, skip, top, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IngestionStatusList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = IngestionStatusList.DeserializeIngestionStatusList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get data ingestion status by data feed. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="dataFeedId"> The data feed unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> The query time range. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<IngestionStatusList> GetDataFeedIngestionStatusNextPage(string nextLink, Guid dataFeedId, int? skip = null, int? top = null, IngestionStatusQueryOptions body = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetDataFeedIngestionStatusNextPageRequest(nextLink, dataFeedId, skip, top, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IngestionStatusList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = IngestionStatusList.DeserializeIngestionStatusList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetMetricDataNextPageRequest(string nextLink, Guid metricId, int? skip, int? top, MetricDataQueryOptions body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            return message;
        }

        /// <summary> Get time series data from metric. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query time series data condition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<MetricDataList>> GetMetricDataNextPageAsync(string nextLink, Guid metricId, int? skip = null, int? top = null, MetricDataQueryOptions body = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetMetricDataNextPageRequest(nextLink, metricId, skip, top, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetricDataList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = MetricDataList.DeserializeMetricDataList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get time series data from metric. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query time series data condition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<MetricDataList> GetMetricDataNextPage(string nextLink, Guid metricId, int? skip = null, int? top = null, MetricDataQueryOptions body = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetMetricDataNextPageRequest(nextLink, metricId, skip, top, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetricDataList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = MetricDataList.DeserializeMetricDataList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetMetricSeriesNextPageRequest(string nextLink, Guid metricId, int? skip, int? top, MetricSeriesQueryOptions body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            return message;
        }

        /// <summary> List series (dimension combinations) from metric. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> filter to query series. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<MetricSeriesList>> GetMetricSeriesNextPageAsync(string nextLink, Guid metricId, int? skip = null, int? top = null, MetricSeriesQueryOptions body = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetMetricSeriesNextPageRequest(nextLink, metricId, skip, top, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetricSeriesList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = MetricSeriesList.DeserializeMetricSeriesList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List series (dimension combinations) from metric. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> filter to query series. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<MetricSeriesList> GetMetricSeriesNextPage(string nextLink, Guid metricId, int? skip = null, int? top = null, MetricSeriesQueryOptions body = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetMetricSeriesNextPageRequest(nextLink, metricId, skip, top, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetricSeriesList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = MetricSeriesList.DeserializeMetricSeriesList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetMetricDimensionNextPageRequest(string nextLink, Guid metricId, int? skip, int? top, MetricDimensionQueryOptions body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            return message;
        }

        /// <summary> List dimension from certain metric. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query dimension option. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<MetricDimensionList>> GetMetricDimensionNextPageAsync(string nextLink, Guid metricId, int? skip = null, int? top = null, MetricDimensionQueryOptions body = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetMetricDimensionNextPageRequest(nextLink, metricId, skip, top, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetricDimensionList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = MetricDimensionList.DeserializeMetricDimensionList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List dimension from certain metric. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query dimension option. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<MetricDimensionList> GetMetricDimensionNextPage(string nextLink, Guid metricId, int? skip = null, int? top = null, MetricDimensionQueryOptions body = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetMetricDimensionNextPageRequest(nextLink, metricId, skip, top, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetricDimensionList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = MetricDimensionList.DeserializeMetricDimensionList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetEnrichmentStatusByMetricNextPageRequest(string nextLink, Guid metricId, int? skip, int? top, EnrichmentStatusQueryOption body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            return message;
        }

        /// <summary> Query anomaly detection status. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<EnrichmentStatusList>> GetEnrichmentStatusByMetricNextPageAsync(string nextLink, Guid metricId, int? skip = null, int? top = null, EnrichmentStatusQueryOption body = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetEnrichmentStatusByMetricNextPageRequest(nextLink, metricId, skip, top, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EnrichmentStatusList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = EnrichmentStatusList.DeserializeEnrichmentStatusList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Query anomaly detection status. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<EnrichmentStatusList> GetEnrichmentStatusByMetricNextPage(string nextLink, Guid metricId, int? skip = null, int? top = null, EnrichmentStatusQueryOption body = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetEnrichmentStatusByMetricNextPageRequest(nextLink, metricId, skip, top, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EnrichmentStatusList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = EnrichmentStatusList.DeserializeEnrichmentStatusList(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
