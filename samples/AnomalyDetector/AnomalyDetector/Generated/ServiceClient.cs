// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using AnomalyDetector.Models;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace AnomalyDetector
{
    /// <summary> The Service service client. </summary>
    public partial class ServiceClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal ServiceRestClient RestClient { get; }
        /// <summary> Initializes a new instance of ServiceClient for mocking. </summary>
        protected ServiceClient()
        {
        }
        /// <summary> Initializes a new instance of ServiceClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        internal ServiceClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            RestClient = new ServiceRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Query a single anomaly alerting configuration. </summary>
        /// <param name="configurationId"> anomaly alerting configuration unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AnomalyAlertingConfiguration>> GetAnomalyAlertingConfigurationAsync(Guid configurationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetAnomalyAlertingConfiguration");
            scope.Start();
            try
            {
                return await RestClient.GetAnomalyAlertingConfigurationAsync(configurationId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Query a single anomaly alerting configuration. </summary>
        /// <param name="configurationId"> anomaly alerting configuration unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AnomalyAlertingConfiguration> GetAnomalyAlertingConfiguration(Guid configurationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetAnomalyAlertingConfiguration");
            scope.Start();
            try
            {
                return RestClient.GetAnomalyAlertingConfiguration(configurationId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update anomaly alerting configuration. </summary>
        /// <param name="configurationId"> anomaly alerting configuration unique id. </param>
        /// <param name="data"> anomaly alerting configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdateAnomalyAlertingConfigurationAsync(Guid configurationId, Stream data, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.UpdateAnomalyAlertingConfiguration");
            scope.Start();
            try
            {
                return await RestClient.UpdateAnomalyAlertingConfigurationAsync(configurationId, data, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update anomaly alerting configuration. </summary>
        /// <param name="configurationId"> anomaly alerting configuration unique id. </param>
        /// <param name="data"> anomaly alerting configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response UpdateAnomalyAlertingConfiguration(Guid configurationId, Stream data, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.UpdateAnomalyAlertingConfiguration");
            scope.Start();
            try
            {
                return RestClient.UpdateAnomalyAlertingConfiguration(configurationId, data, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete anomaly alerting configuration. </summary>
        /// <param name="configurationId"> anomaly alerting configuration unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteAnomalyAlertingConfigurationAsync(Guid configurationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.DeleteAnomalyAlertingConfiguration");
            scope.Start();
            try
            {
                return await RestClient.DeleteAnomalyAlertingConfigurationAsync(configurationId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete anomaly alerting configuration. </summary>
        /// <param name="configurationId"> anomaly alerting configuration unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteAnomalyAlertingConfiguration(Guid configurationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.DeleteAnomalyAlertingConfiguration");
            scope.Start();
            try
            {
                return RestClient.DeleteAnomalyAlertingConfiguration(configurationId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create anomaly alerting configuration. </summary>
        /// <param name="body"> anomaly alerting configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CreateAnomalyAlertingConfigurationAsync(AnomalyAlertingConfiguration body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.CreateAnomalyAlertingConfiguration");
            scope.Start();
            try
            {
                return (await RestClient.CreateAnomalyAlertingConfigurationAsync(body, cancellationToken).ConfigureAwait(false)).GetRawResponse();
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create anomaly alerting configuration. </summary>
        /// <param name="body"> anomaly alerting configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CreateAnomalyAlertingConfiguration(AnomalyAlertingConfiguration body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.CreateAnomalyAlertingConfiguration");
            scope.Start();
            try
            {
                return RestClient.CreateAnomalyAlertingConfiguration(body, cancellationToken).GetRawResponse();
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Query a single anomaly detection configuration. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AnomalyDetectionConfiguration>> GetAnomalyDetectionConfigurationAsync(Guid configurationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetAnomalyDetectionConfiguration");
            scope.Start();
            try
            {
                return await RestClient.GetAnomalyDetectionConfigurationAsync(configurationId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Query a single anomaly detection configuration. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AnomalyDetectionConfiguration> GetAnomalyDetectionConfiguration(Guid configurationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetAnomalyDetectionConfiguration");
            scope.Start();
            try
            {
                return RestClient.GetAnomalyDetectionConfiguration(configurationId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update anomaly detection configuration. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="data"> anomaly detection configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdateAnomalyDetectionConfigurationAsync(Guid configurationId, Stream data, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.UpdateAnomalyDetectionConfiguration");
            scope.Start();
            try
            {
                return await RestClient.UpdateAnomalyDetectionConfigurationAsync(configurationId, data, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update anomaly detection configuration. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="data"> anomaly detection configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response UpdateAnomalyDetectionConfiguration(Guid configurationId, Stream data, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.UpdateAnomalyDetectionConfiguration");
            scope.Start();
            try
            {
                return RestClient.UpdateAnomalyDetectionConfiguration(configurationId, data, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete anomaly detection configuration. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteAnomalyDetectionConfigurationAsync(Guid configurationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.DeleteAnomalyDetectionConfiguration");
            scope.Start();
            try
            {
                return await RestClient.DeleteAnomalyDetectionConfigurationAsync(configurationId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete anomaly detection configuration. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteAnomalyDetectionConfiguration(Guid configurationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.DeleteAnomalyDetectionConfiguration");
            scope.Start();
            try
            {
                return RestClient.DeleteAnomalyDetectionConfiguration(configurationId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create anomaly detection configuration. </summary>
        /// <param name="body"> anomaly detection configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CreateAnomalyDetectionConfigurationAsync(AnomalyDetectionConfiguration body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.CreateAnomalyDetectionConfiguration");
            scope.Start();
            try
            {
                return (await RestClient.CreateAnomalyDetectionConfigurationAsync(body, cancellationToken).ConfigureAwait(false)).GetRawResponse();
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create anomaly detection configuration. </summary>
        /// <param name="body"> anomaly detection configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CreateAnomalyDetectionConfiguration(AnomalyDetectionConfiguration body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.CreateAnomalyDetectionConfiguration");
            scope.Start();
            try
            {
                return RestClient.CreateAnomalyDetectionConfiguration(body, cancellationToken).GetRawResponse();
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Query all anomaly alerting configurations for specific anomaly detection configuration. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AnomalyAlertingConfigurationList>> GetAnomalyAlertingConfigurationsByAnomalyDetectionConfigurationAsync(Guid configurationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetAnomalyAlertingConfigurationsByAnomalyDetectionConfiguration");
            scope.Start();
            try
            {
                return await RestClient.GetAnomalyAlertingConfigurationsByAnomalyDetectionConfigurationAsync(configurationId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Query all anomaly alerting configurations for specific anomaly detection configuration. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AnomalyAlertingConfigurationList> GetAnomalyAlertingConfigurationsByAnomalyDetectionConfiguration(Guid configurationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetAnomalyAlertingConfigurationsByAnomalyDetectionConfiguration");
            scope.Start();
            try
            {
                return RestClient.GetAnomalyAlertingConfigurationsByAnomalyDetectionConfiguration(configurationId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Query series enriched by anomaly detection. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="body"> query series detection result request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SeriesResultList>> GetSeriesByAnomalyDetectionConfigurationAsync(Guid configurationId, DetectionSeriesQuery body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetSeriesByAnomalyDetectionConfiguration");
            scope.Start();
            try
            {
                return await RestClient.GetSeriesByAnomalyDetectionConfigurationAsync(configurationId, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Query series enriched by anomaly detection. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="body"> query series detection result request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SeriesResultList> GetSeriesByAnomalyDetectionConfiguration(Guid configurationId, DetectionSeriesQuery body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetSeriesByAnomalyDetectionConfiguration");
            scope.Start();
            try
            {
                return RestClient.GetSeriesByAnomalyDetectionConfiguration(configurationId, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Query root cause for incident. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="incidentId"> incident id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<RootCauseList>> GetRootCauseOfIncidentByAnomalyDetectionConfigurationAsync(Guid configurationId, string incidentId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetRootCauseOfIncidentByAnomalyDetectionConfiguration");
            scope.Start();
            try
            {
                return await RestClient.GetRootCauseOfIncidentByAnomalyDetectionConfigurationAsync(configurationId, incidentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Query root cause for incident. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="incidentId"> incident id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<RootCauseList> GetRootCauseOfIncidentByAnomalyDetectionConfiguration(Guid configurationId, string incidentId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetRootCauseOfIncidentByAnomalyDetectionConfiguration");
            scope.Start();
            try
            {
                return RestClient.GetRootCauseOfIncidentByAnomalyDetectionConfiguration(configurationId, incidentId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new data feed. </summary>
        /// <param name="body"> parameters to create a data feed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CreateDataFeedAsync(Paths1Rbc4PuDatafeedsPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.CreateDataFeed");
            scope.Start();
            try
            {
                return (await RestClient.CreateDataFeedAsync(body, cancellationToken).ConfigureAwait(false)).GetRawResponse();
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new data feed. </summary>
        /// <param name="body"> parameters to create a data feed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CreateDataFeed(Paths1Rbc4PuDatafeedsPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.CreateDataFeed");
            scope.Start();
            try
            {
                return RestClient.CreateDataFeed(body, cancellationToken).GetRawResponse();
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a data feed by its id. </summary>
        /// <param name="dataFeedId"> The data feed unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PathsGmfhusDatafeedsDatafeedidGetResponses200ContentApplicationJsonSchema>> GetDataFeedByIdAsync(Guid dataFeedId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetDataFeedById");
            scope.Start();
            try
            {
                return await RestClient.GetDataFeedByIdAsync(dataFeedId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a data feed by its id. </summary>
        /// <param name="dataFeedId"> The data feed unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PathsGmfhusDatafeedsDatafeedidGetResponses200ContentApplicationJsonSchema> GetDataFeedById(Guid dataFeedId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetDataFeedById");
            scope.Start();
            try
            {
                return RestClient.GetDataFeedById(dataFeedId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update a data feed. </summary>
        /// <param name="dataFeedId"> The data feed unique id. </param>
        /// <param name="data"> parameters to update a data feed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdateDataFeedAsync(Guid dataFeedId, Stream data, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.UpdateDataFeed");
            scope.Start();
            try
            {
                return await RestClient.UpdateDataFeedAsync(dataFeedId, data, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update a data feed. </summary>
        /// <param name="dataFeedId"> The data feed unique id. </param>
        /// <param name="data"> parameters to update a data feed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response UpdateDataFeed(Guid dataFeedId, Stream data, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.UpdateDataFeed");
            scope.Start();
            try
            {
                return RestClient.UpdateDataFeed(dataFeedId, data, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a data feed. </summary>
        /// <param name="dataFeedId"> The data feed unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteDataFeedAsync(Guid dataFeedId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.DeleteDataFeed");
            scope.Start();
            try
            {
                return await RestClient.DeleteDataFeedAsync(dataFeedId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a data feed. </summary>
        /// <param name="dataFeedId"> The data feed unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteDataFeed(Guid dataFeedId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.DeleteDataFeed");
            scope.Start();
            try
            {
                return RestClient.DeleteDataFeed(dataFeedId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a metric feedback by its id. </summary>
        /// <param name="feedbackId"> The Uuid to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PathsK7L8KkFeedbackMetricFeedbackidGetResponses200ContentApplicationJsonSchema>> GetMetricFeedbackAsync(Guid feedbackId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetMetricFeedback");
            scope.Start();
            try
            {
                return await RestClient.GetMetricFeedbackAsync(feedbackId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a metric feedback by its id. </summary>
        /// <param name="feedbackId"> The Uuid to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PathsK7L8KkFeedbackMetricFeedbackidGetResponses200ContentApplicationJsonSchema> GetMetricFeedback(Guid feedbackId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetMetricFeedback");
            scope.Start();
            try
            {
                return RestClient.GetMetricFeedback(feedbackId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new metric feedback. </summary>
        /// <param name="body"> metric feedback. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CreateMetricFeedbackAsync(PathsEnzgflFeedbackMetricPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.CreateMetricFeedback");
            scope.Start();
            try
            {
                return (await RestClient.CreateMetricFeedbackAsync(body, cancellationToken).ConfigureAwait(false)).GetRawResponse();
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new metric feedback. </summary>
        /// <param name="body"> metric feedback. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CreateMetricFeedback(PathsEnzgflFeedbackMetricPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.CreateMetricFeedback");
            scope.Start();
            try
            {
                return RestClient.CreateMetricFeedback(body, cancellationToken).GetRawResponse();
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new hook. </summary>
        /// <param name="body"> Create hook request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CreateHookAsync(Paths1SkbhkhHooksPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.CreateHook");
            scope.Start();
            try
            {
                return (await RestClient.CreateHookAsync(body, cancellationToken).ConfigureAwait(false)).GetRawResponse();
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new hook. </summary>
        /// <param name="body"> Create hook request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CreateHook(Paths1SkbhkhHooksPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.CreateHook");
            scope.Start();
            try
            {
                return RestClient.CreateHook(body, cancellationToken).GetRawResponse();
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a hook by its id. </summary>
        /// <param name="hookId"> Hook unique ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Paths14A3T2HHooksHookidGetResponses200ContentApplicationJsonSchema>> GetHookAsync(Guid hookId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetHook");
            scope.Start();
            try
            {
                return await RestClient.GetHookAsync(hookId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a hook by its id. </summary>
        /// <param name="hookId"> Hook unique ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Paths14A3T2HHooksHookidGetResponses200ContentApplicationJsonSchema> GetHook(Guid hookId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetHook");
            scope.Start();
            try
            {
                return RestClient.GetHook(hookId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update a hook. </summary>
        /// <param name="hookId"> Hook unique ID. </param>
        /// <param name="data"> Update hook request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdateHookAsync(Guid hookId, Stream data, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.UpdateHook");
            scope.Start();
            try
            {
                return await RestClient.UpdateHookAsync(hookId, data, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update a hook. </summary>
        /// <param name="hookId"> Hook unique ID. </param>
        /// <param name="data"> Update hook request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response UpdateHook(Guid hookId, Stream data, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.UpdateHook");
            scope.Start();
            try
            {
                return RestClient.UpdateHook(hookId, data, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a hook. </summary>
        /// <param name="hookId"> Hook unique ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteHookAsync(Guid hookId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.DeleteHook");
            scope.Start();
            try
            {
                return await RestClient.DeleteHookAsync(hookId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a hook. </summary>
        /// <param name="hookId"> Hook unique ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteHook(Guid hookId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.DeleteHook");
            scope.Start();
            try
            {
                return RestClient.DeleteHook(hookId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Reset data ingestion status by data feed to backfill data. </summary>
        /// <param name="dataFeedId"> The data feed unique id. </param>
        /// <param name="body"> The backfill time range. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> ResetDataFeedIngestionStatusAsync(Guid dataFeedId, IngestionProgressResetOptions body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.ResetDataFeedIngestionStatus");
            scope.Start();
            try
            {
                return await RestClient.ResetDataFeedIngestionStatusAsync(dataFeedId, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Reset data ingestion status by data feed to backfill data. </summary>
        /// <param name="dataFeedId"> The data feed unique id. </param>
        /// <param name="body"> The backfill time range. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response ResetDataFeedIngestionStatus(Guid dataFeedId, IngestionProgressResetOptions body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.ResetDataFeedIngestionStatus");
            scope.Start();
            try
            {
                return RestClient.ResetDataFeedIngestionStatus(dataFeedId, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get data last success ingestion job timestamp by data feed. </summary>
        /// <param name="dataFeedId"> The data feed unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DataFeedIngestionProgress>> GetIngestionProgressAsync(Guid dataFeedId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetIngestionProgress");
            scope.Start();
            try
            {
                return await RestClient.GetIngestionProgressAsync(dataFeedId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get data last success ingestion job timestamp by data feed. </summary>
        /// <param name="dataFeedId"> The data feed unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DataFeedIngestionProgress> GetIngestionProgress(Guid dataFeedId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetIngestionProgress");
            scope.Start();
            try
            {
                return RestClient.GetIngestionProgress(dataFeedId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Query all anomaly detection configurations for specific metric. </summary>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AnomalyDetectionConfigurationList>> GetAnomalyDetectionConfigurationsByMetricAsync(Guid metricId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetAnomalyDetectionConfigurationsByMetric");
            scope.Start();
            try
            {
                return await RestClient.GetAnomalyDetectionConfigurationsByMetricAsync(metricId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Query all anomaly detection configurations for specific metric. </summary>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AnomalyDetectionConfigurationList> GetAnomalyDetectionConfigurationsByMetric(Guid metricId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetAnomalyDetectionConfigurationsByMetric");
            scope.Start();
            try
            {
                return RestClient.GetAnomalyDetectionConfigurationsByMetric(metricId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Query alerts under anomaly alerting configuration. </summary>
        /// <param name="configurationId"> anomaly alerting configuration unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query alerting result request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<AlertResult> GetAlertsByAnomalyAlertingConfigurationAsync(Guid configurationId, int? skip = null, int? top = null, AlertingResultQuery body = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<AlertResult>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetAlertsByAnomalyAlertingConfiguration");
                scope.Start();
                try
                {
                    var response = await RestClient.GetAlertsByAnomalyAlertingConfigurationAsync(configurationId, skip, top, body, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AlertResult>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetAlertsByAnomalyAlertingConfiguration");
                scope.Start();
                try
                {
                    var response = await RestClient.GetAlertsByAnomalyAlertingConfigurationNextPageAsync(nextLink, configurationId, skip, top, body, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Query alerts under anomaly alerting configuration. </summary>
        /// <param name="configurationId"> anomaly alerting configuration unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query alerting result request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<AlertResult> GetAlertsByAnomalyAlertingConfiguration(Guid configurationId, int? skip = null, int? top = null, AlertingResultQuery body = null, CancellationToken cancellationToken = default)
        {
            Page<AlertResult> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetAlertsByAnomalyAlertingConfiguration");
                scope.Start();
                try
                {
                    var response = RestClient.GetAlertsByAnomalyAlertingConfiguration(configurationId, skip, top, body, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AlertResult> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetAlertsByAnomalyAlertingConfiguration");
                scope.Start();
                try
                {
                    var response = RestClient.GetAlertsByAnomalyAlertingConfigurationNextPage(nextLink, configurationId, skip, top, body, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Query anomalies under a specific alert. </summary>
        /// <param name="configurationId"> anomaly alerting configuration unique id. </param>
        /// <param name="alertId"> alert id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="alertId"/> is null. </exception>
        public virtual AsyncPageable<AnomalyResult> GetAnomaliesFromAlertByAnomalyAlertingConfigurationAsync(Guid configurationId, string alertId, int? skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            if (alertId == null)
            {
                throw new ArgumentNullException(nameof(alertId));
            }

            async Task<Page<AnomalyResult>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetAnomaliesFromAlertByAnomalyAlertingConfiguration");
                scope.Start();
                try
                {
                    var response = await RestClient.GetAnomaliesFromAlertByAnomalyAlertingConfigurationAsync(configurationId, alertId, skip, top, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AnomalyResult>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetAnomaliesFromAlertByAnomalyAlertingConfiguration");
                scope.Start();
                try
                {
                    var response = await RestClient.GetAnomaliesFromAlertByAnomalyAlertingConfigurationNextPageAsync(nextLink, configurationId, alertId, skip, top, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Query anomalies under a specific alert. </summary>
        /// <param name="configurationId"> anomaly alerting configuration unique id. </param>
        /// <param name="alertId"> alert id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="alertId"/> is null. </exception>
        public virtual Pageable<AnomalyResult> GetAnomaliesFromAlertByAnomalyAlertingConfiguration(Guid configurationId, string alertId, int? skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            if (alertId == null)
            {
                throw new ArgumentNullException(nameof(alertId));
            }

            Page<AnomalyResult> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetAnomaliesFromAlertByAnomalyAlertingConfiguration");
                scope.Start();
                try
                {
                    var response = RestClient.GetAnomaliesFromAlertByAnomalyAlertingConfiguration(configurationId, alertId, skip, top, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AnomalyResult> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetAnomaliesFromAlertByAnomalyAlertingConfiguration");
                scope.Start();
                try
                {
                    var response = RestClient.GetAnomaliesFromAlertByAnomalyAlertingConfigurationNextPage(nextLink, configurationId, alertId, skip, top, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Query incidents under a specific alert. </summary>
        /// <param name="configurationId"> anomaly alerting configuration unique id. </param>
        /// <param name="alertId"> alert id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="alertId"/> is null. </exception>
        public virtual AsyncPageable<IncidentResult> GetIncidentsFromAlertByAnomalyAlertingConfigurationAsync(Guid configurationId, string alertId, int? skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            if (alertId == null)
            {
                throw new ArgumentNullException(nameof(alertId));
            }

            async Task<Page<IncidentResult>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetIncidentsFromAlertByAnomalyAlertingConfiguration");
                scope.Start();
                try
                {
                    var response = await RestClient.GetIncidentsFromAlertByAnomalyAlertingConfigurationAsync(configurationId, alertId, skip, top, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<IncidentResult>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetIncidentsFromAlertByAnomalyAlertingConfiguration");
                scope.Start();
                try
                {
                    var response = await RestClient.GetIncidentsFromAlertByAnomalyAlertingConfigurationNextPageAsync(nextLink, configurationId, alertId, skip, top, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Query incidents under a specific alert. </summary>
        /// <param name="configurationId"> anomaly alerting configuration unique id. </param>
        /// <param name="alertId"> alert id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="alertId"/> is null. </exception>
        public virtual Pageable<IncidentResult> GetIncidentsFromAlertByAnomalyAlertingConfiguration(Guid configurationId, string alertId, int? skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            if (alertId == null)
            {
                throw new ArgumentNullException(nameof(alertId));
            }

            Page<IncidentResult> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetIncidentsFromAlertByAnomalyAlertingConfiguration");
                scope.Start();
                try
                {
                    var response = RestClient.GetIncidentsFromAlertByAnomalyAlertingConfiguration(configurationId, alertId, skip, top, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<IncidentResult> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetIncidentsFromAlertByAnomalyAlertingConfiguration");
                scope.Start();
                try
                {
                    var response = RestClient.GetIncidentsFromAlertByAnomalyAlertingConfigurationNextPage(nextLink, configurationId, alertId, skip, top, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Query anomalies under anomaly detection configuration. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query detection result request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<AnomalyResult> GetAnomaliesByAnomalyDetectionConfigurationAsync(Guid configurationId, int? skip = null, int? top = null, DetectionResultQuery body = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<AnomalyResult>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetAnomaliesByAnomalyDetectionConfiguration");
                scope.Start();
                try
                {
                    var response = await RestClient.GetAnomaliesByAnomalyDetectionConfigurationAsync(configurationId, skip, top, body, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AnomalyResult>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetAnomaliesByAnomalyDetectionConfiguration");
                scope.Start();
                try
                {
                    var response = await RestClient.GetAnomaliesByAnomalyDetectionConfigurationNextPageAsync(nextLink, configurationId, skip, top, body, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Query anomalies under anomaly detection configuration. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query detection result request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<AnomalyResult> GetAnomaliesByAnomalyDetectionConfiguration(Guid configurationId, int? skip = null, int? top = null, DetectionResultQuery body = null, CancellationToken cancellationToken = default)
        {
            Page<AnomalyResult> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetAnomaliesByAnomalyDetectionConfiguration");
                scope.Start();
                try
                {
                    var response = RestClient.GetAnomaliesByAnomalyDetectionConfiguration(configurationId, skip, top, body, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AnomalyResult> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetAnomaliesByAnomalyDetectionConfiguration");
                scope.Start();
                try
                {
                    var response = RestClient.GetAnomaliesByAnomalyDetectionConfigurationNextPage(nextLink, configurationId, skip, top, body, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Query dimension values of anomalies. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query dimension values request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<string> GetDimensionOfAnomaliesByAnomalyDetectionConfigurationAsync(Guid configurationId, int? skip = null, int? top = null, AnomalyDimensionQuery body = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<string>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetDimensionOfAnomaliesByAnomalyDetectionConfiguration");
                scope.Start();
                try
                {
                    var response = await RestClient.GetDimensionOfAnomaliesByAnomalyDetectionConfigurationAsync(configurationId, skip, top, body, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<string>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetDimensionOfAnomaliesByAnomalyDetectionConfiguration");
                scope.Start();
                try
                {
                    var response = await RestClient.GetDimensionOfAnomaliesByAnomalyDetectionConfigurationNextPageAsync(nextLink, configurationId, skip, top, body, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Query dimension values of anomalies. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query dimension values request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<string> GetDimensionOfAnomaliesByAnomalyDetectionConfiguration(Guid configurationId, int? skip = null, int? top = null, AnomalyDimensionQuery body = null, CancellationToken cancellationToken = default)
        {
            Page<string> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetDimensionOfAnomaliesByAnomalyDetectionConfiguration");
                scope.Start();
                try
                {
                    var response = RestClient.GetDimensionOfAnomaliesByAnomalyDetectionConfiguration(configurationId, skip, top, body, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<string> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetDimensionOfAnomaliesByAnomalyDetectionConfiguration");
                scope.Start();
                try
                {
                    var response = RestClient.GetDimensionOfAnomaliesByAnomalyDetectionConfigurationNextPage(nextLink, configurationId, skip, top, body, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Query incidents under anomaly detection configuration. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query detection result request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<IncidentResult> GetIncidentsByAnomalyDetectionConfigurationAsync(Guid configurationId, int? skip = null, int? top = null, DetectionResultQuery body = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<IncidentResult>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetIncidentsByAnomalyDetectionConfiguration");
                scope.Start();
                try
                {
                    var response = await RestClient.GetIncidentsByAnomalyDetectionConfigurationAsync(configurationId, skip, top, body, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<IncidentResult>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetIncidentsByAnomalyDetectionConfiguration");
                scope.Start();
                try
                {
                    var response = await RestClient.GetIncidentsByAnomalyDetectionConfigurationNextPageAsync(nextLink, configurationId, skip, top, body, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Query incidents under anomaly detection configuration. </summary>
        /// <param name="configurationId"> anomaly detection configuration unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query detection result request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<IncidentResult> GetIncidentsByAnomalyDetectionConfiguration(Guid configurationId, int? skip = null, int? top = null, DetectionResultQuery body = null, CancellationToken cancellationToken = default)
        {
            Page<IncidentResult> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetIncidentsByAnomalyDetectionConfiguration");
                scope.Start();
                try
                {
                    var response = RestClient.GetIncidentsByAnomalyDetectionConfiguration(configurationId, skip, top, body, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<IncidentResult> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetIncidentsByAnomalyDetectionConfiguration");
                scope.Start();
                try
                {
                    var response = RestClient.GetIncidentsByAnomalyDetectionConfigurationNextPage(nextLink, configurationId, skip, top, body, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List all data feeds. </summary>
        /// <param name="dataFeedName"> filter data feed by its name. </param>
        /// <param name="dataSourceType"> filter data feed by its source type. </param>
        /// <param name="granularityName"> filter data feed by its granularity. </param>
        /// <param name="status"> filter data feed by its status. </param>
        /// <param name="creator"> filter data feed by its creator. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<DataFeedListValueItem> ListDataFeedsAsync(string dataFeedName = null, DataSourceType? dataSourceType = null, Granularity? granularityName = null, EntityStatus? status = null, string creator = null, int? skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<DataFeedListValueItem>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.ListDataFeeds");
                scope.Start();
                try
                {
                    var response = await RestClient.ListDataFeedsAsync(dataFeedName, dataSourceType, granularityName, status, creator, skip, top, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DataFeedListValueItem>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.ListDataFeeds");
                scope.Start();
                try
                {
                    var response = await RestClient.ListDataFeedsNextPageAsync(nextLink, dataFeedName, dataSourceType, granularityName, status, creator, skip, top, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List all data feeds. </summary>
        /// <param name="dataFeedName"> filter data feed by its name. </param>
        /// <param name="dataSourceType"> filter data feed by its source type. </param>
        /// <param name="granularityName"> filter data feed by its granularity. </param>
        /// <param name="status"> filter data feed by its status. </param>
        /// <param name="creator"> filter data feed by its creator. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<DataFeedListValueItem> ListDataFeeds(string dataFeedName = null, DataSourceType? dataSourceType = null, Granularity? granularityName = null, EntityStatus? status = null, string creator = null, int? skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            Page<DataFeedListValueItem> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.ListDataFeeds");
                scope.Start();
                try
                {
                    var response = RestClient.ListDataFeeds(dataFeedName, dataSourceType, granularityName, status, creator, skip, top, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DataFeedListValueItem> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.ListDataFeeds");
                scope.Start();
                try
                {
                    var response = RestClient.ListDataFeedsNextPage(nextLink, dataFeedName, dataSourceType, granularityName, status, creator, skip, top, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List feedback on the given metric. </summary>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> metric feedback filter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<MetricFeedbackListValueItem> ListMetricFeedbacksAsync(int? skip = null, int? top = null, Paths1AmeiraFeedbackMetricQueryPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<MetricFeedbackListValueItem>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.ListMetricFeedbacks");
                scope.Start();
                try
                {
                    var response = await RestClient.ListMetricFeedbacksAsync(skip, top, body, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<MetricFeedbackListValueItem>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.ListMetricFeedbacks");
                scope.Start();
                try
                {
                    var response = await RestClient.ListMetricFeedbacksNextPageAsync(nextLink, skip, top, body, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List feedback on the given metric. </summary>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> metric feedback filter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<MetricFeedbackListValueItem> ListMetricFeedbacks(int? skip = null, int? top = null, Paths1AmeiraFeedbackMetricQueryPostRequestbodyContentApplicationJsonSchema body = null, CancellationToken cancellationToken = default)
        {
            Page<MetricFeedbackListValueItem> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.ListMetricFeedbacks");
                scope.Start();
                try
                {
                    var response = RestClient.ListMetricFeedbacks(skip, top, body, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<MetricFeedbackListValueItem> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.ListMetricFeedbacks");
                scope.Start();
                try
                {
                    var response = RestClient.ListMetricFeedbacksNextPage(nextLink, skip, top, body, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List all hooks. </summary>
        /// <param name="hookName"> filter hook by its name. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<HookListValueItem> ListHooksAsync(string hookName = null, int? skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<HookListValueItem>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.ListHooks");
                scope.Start();
                try
                {
                    var response = await RestClient.ListHooksAsync(hookName, skip, top, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<HookListValueItem>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.ListHooks");
                scope.Start();
                try
                {
                    var response = await RestClient.ListHooksNextPageAsync(nextLink, hookName, skip, top, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List all hooks. </summary>
        /// <param name="hookName"> filter hook by its name. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<HookListValueItem> ListHooks(string hookName = null, int? skip = null, int? top = null, CancellationToken cancellationToken = default)
        {
            Page<HookListValueItem> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.ListHooks");
                scope.Start();
                try
                {
                    var response = RestClient.ListHooks(hookName, skip, top, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<HookListValueItem> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.ListHooks");
                scope.Start();
                try
                {
                    var response = RestClient.ListHooksNextPage(nextLink, hookName, skip, top, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get data ingestion status by data feed. </summary>
        /// <param name="dataFeedId"> The data feed unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> The query time range. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<IngestionStatus> GetDataFeedIngestionStatusAsync(Guid dataFeedId, int? skip = null, int? top = null, IngestionStatusQueryOptions body = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<IngestionStatus>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetDataFeedIngestionStatus");
                scope.Start();
                try
                {
                    var response = await RestClient.GetDataFeedIngestionStatusAsync(dataFeedId, skip, top, body, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<IngestionStatus>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetDataFeedIngestionStatus");
                scope.Start();
                try
                {
                    var response = await RestClient.GetDataFeedIngestionStatusNextPageAsync(nextLink, dataFeedId, skip, top, body, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get data ingestion status by data feed. </summary>
        /// <param name="dataFeedId"> The data feed unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> The query time range. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<IngestionStatus> GetDataFeedIngestionStatus(Guid dataFeedId, int? skip = null, int? top = null, IngestionStatusQueryOptions body = null, CancellationToken cancellationToken = default)
        {
            Page<IngestionStatus> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetDataFeedIngestionStatus");
                scope.Start();
                try
                {
                    var response = RestClient.GetDataFeedIngestionStatus(dataFeedId, skip, top, body, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<IngestionStatus> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetDataFeedIngestionStatus");
                scope.Start();
                try
                {
                    var response = RestClient.GetDataFeedIngestionStatusNextPage(nextLink, dataFeedId, skip, top, body, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get time series data from metric. </summary>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query time series data condition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<MetricDataItem> GetMetricDataAsync(Guid metricId, int? skip = null, int? top = null, MetricDataQueryOptions body = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<MetricDataItem>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetMetricData");
                scope.Start();
                try
                {
                    var response = await RestClient.GetMetricDataAsync(metricId, skip, top, body, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<MetricDataItem>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetMetricData");
                scope.Start();
                try
                {
                    var response = await RestClient.GetMetricDataNextPageAsync(nextLink, metricId, skip, top, body, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get time series data from metric. </summary>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query time series data condition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<MetricDataItem> GetMetricData(Guid metricId, int? skip = null, int? top = null, MetricDataQueryOptions body = null, CancellationToken cancellationToken = default)
        {
            Page<MetricDataItem> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetMetricData");
                scope.Start();
                try
                {
                    var response = RestClient.GetMetricData(metricId, skip, top, body, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<MetricDataItem> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetMetricData");
                scope.Start();
                try
                {
                    var response = RestClient.GetMetricDataNextPage(nextLink, metricId, skip, top, body, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List series (dimension combinations) from metric. </summary>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> filter to query series. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<MetricSeriesItem> GetMetricSeriesAsync(Guid metricId, int? skip = null, int? top = null, MetricSeriesQueryOptions body = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<MetricSeriesItem>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetMetricSeries");
                scope.Start();
                try
                {
                    var response = await RestClient.GetMetricSeriesAsync(metricId, skip, top, body, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<MetricSeriesItem>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetMetricSeries");
                scope.Start();
                try
                {
                    var response = await RestClient.GetMetricSeriesNextPageAsync(nextLink, metricId, skip, top, body, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List series (dimension combinations) from metric. </summary>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> filter to query series. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<MetricSeriesItem> GetMetricSeries(Guid metricId, int? skip = null, int? top = null, MetricSeriesQueryOptions body = null, CancellationToken cancellationToken = default)
        {
            Page<MetricSeriesItem> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetMetricSeries");
                scope.Start();
                try
                {
                    var response = RestClient.GetMetricSeries(metricId, skip, top, body, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<MetricSeriesItem> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetMetricSeries");
                scope.Start();
                try
                {
                    var response = RestClient.GetMetricSeriesNextPage(nextLink, metricId, skip, top, body, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List dimension from certain metric. </summary>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query dimension option. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<string> GetMetricDimensionAsync(Guid metricId, int? skip = null, int? top = null, MetricDimensionQueryOptions body = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<string>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetMetricDimension");
                scope.Start();
                try
                {
                    var response = await RestClient.GetMetricDimensionAsync(metricId, skip, top, body, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<string>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetMetricDimension");
                scope.Start();
                try
                {
                    var response = await RestClient.GetMetricDimensionNextPageAsync(nextLink, metricId, skip, top, body, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List dimension from certain metric. </summary>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query dimension option. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<string> GetMetricDimension(Guid metricId, int? skip = null, int? top = null, MetricDimensionQueryOptions body = null, CancellationToken cancellationToken = default)
        {
            Page<string> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetMetricDimension");
                scope.Start();
                try
                {
                    var response = RestClient.GetMetricDimension(metricId, skip, top, body, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<string> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetMetricDimension");
                scope.Start();
                try
                {
                    var response = RestClient.GetMetricDimensionNextPage(nextLink, metricId, skip, top, body, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Query anomaly detection status. </summary>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<EnrichmentStatus> GetEnrichmentStatusByMetricAsync(Guid metricId, int? skip = null, int? top = null, EnrichmentStatusQueryOption body = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<EnrichmentStatus>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetEnrichmentStatusByMetric");
                scope.Start();
                try
                {
                    var response = await RestClient.GetEnrichmentStatusByMetricAsync(metricId, skip, top, body, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<EnrichmentStatus>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetEnrichmentStatusByMetric");
                scope.Start();
                try
                {
                    var response = await RestClient.GetEnrichmentStatusByMetricNextPageAsync(nextLink, metricId, skip, top, body, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Query anomaly detection status. </summary>
        /// <param name="metricId"> metric unique id. </param>
        /// <param name="skip"> The Integer to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="body"> query options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<EnrichmentStatus> GetEnrichmentStatusByMetric(Guid metricId, int? skip = null, int? top = null, EnrichmentStatusQueryOption body = null, CancellationToken cancellationToken = default)
        {
            Page<EnrichmentStatus> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetEnrichmentStatusByMetric");
                scope.Start();
                try
                {
                    var response = RestClient.GetEnrichmentStatusByMetric(metricId, skip, top, body, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<EnrichmentStatus> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ServiceClient.GetEnrichmentStatusByMetric");
                scope.Start();
                try
                {
                    var response = RestClient.GetEnrichmentStatusByMetricNextPage(nextLink, metricId, skip, top, body, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
