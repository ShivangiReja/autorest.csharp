{
    "swagger": "2.0",
    "info": {
      "title": "Anomaly Detector v2 API (OpenAPI v2)",
      "description": "Anomaly Detector v2 API (OpenAPI v2)",
      "version": "2.0-preview.20200424"
    },
    "paths": {
      "/alert/anomaly/configurations/{configurationId}": {
        "get": {
          "tags": [
            "AnomalyAlerting"
          ],
          "summary": "Query a single anomaly alerting configuration",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "configurationId",
              "description": "anomaly alerting configuration unique id",
              "required": true,
              "type": "string",
              "format": "uuid"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/AnomalyAlertingConfiguration"
              }
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        },
        "patch": {
          "tags": [
            "AnomalyAlerting"
          ],
          "summary": "Update anomaly alerting configuration",
          "consumes": [
            "application/json-merge-patch"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "configurationId",
              "description": "anomaly alerting configuration unique id",
              "required": true,
              "type": "string",
              "format": "uuid"
            },
            {
              "in": "body",
              "name": "body",
              "description": "anomaly alerting configuration",
              "schema": {
                "$ref": "#/definitions/AnomalyAlertingConfigurationPatch"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Success"
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        },
        "delete": {
          "tags": [
            "AnomalyAlerting"
          ],
          "summary": "Delete anomaly alerting configuration",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "configurationId",
              "description": "anomaly alerting configuration unique id",
              "required": true,
              "type": "string",
              "format": "uuid"
            }
          ],
          "responses": {
            "204": {
              "description": "The resource is deleted successfully or does not exist."
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        }
      },
      "/alert/anomaly/configurations": {
        "post": {
          "tags": [
            "AnomalyAlerting"
          ],
          "summary": "Create anomaly alerting configuration",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "anomaly alerting configuration",
              "schema": {
                "$ref": "#/definitions/AnomalyAlertingConfiguration"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "Success",
              "headers": {
                "Location": {
                  "description": "Location of the newly created resource.",
                  "type": "string"
                }
              }
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        }
      },
      "/alert/anomaly/configurations/{configurationId}/anomalies/query": {
        "post": {
          "tags": [
            "AnomalyAlerting"
          ],
          "summary": "Query anomalies under anomaly alerting configuration",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "configurationId",
              "description": "anomaly alerting configuration unique id",
              "required": true,
              "type": "string",
              "format": "uuid"
            },
            {
              "in": "query",
              "name": "$skip",
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "query",
              "name": "$top",
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "body",
              "description": "query alerting result request",
              "schema": {
                "$ref": "#/definitions/AlertingResultQuery"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/AnomalyResultList"
              }
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        }
      },
      "/alert/anomaly/configurations/{configurationId}/incidents/query": {
        "post": {
          "tags": [
            "AnomalyAlerting"
          ],
          "summary": "Query incidents under anomaly alerting configuration",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "configurationId",
              "description": "anomaly alerting configuration unique id",
              "required": true,
              "type": "string",
              "format": "uuid"
            },
            {
              "in": "query",
              "name": "$skip",
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "query",
              "name": "$top",
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "body",
              "description": "query alerting result request",
              "schema": {
                "$ref": "#/definitions/AlertingResultQuery"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/IncidentResultList"
              }
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        }
      },
      "/alert/anomaly/configurations/{configurationId}/alerts/query": {
        "post": {
          "tags": [
            "AnomalyAlerting"
          ],
          "summary": "Query alerts under anomaly alerting configuration",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "configurationId",
              "description": "anomaly alerting configuration unique id",
              "required": true,
              "type": "string",
              "format": "uuid"
            },
            {
              "in": "query",
              "name": "$skip",
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "query",
              "name": "$top",
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "body",
              "description": "query alerting result request",
              "schema": {
                "$ref": "#/definitions/AlertingResultQuery"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/AlertResultList"
              }
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        }
      },
      "/alert/anomaly/configurations/{configurationId}/alerts/{alertId}/anomalies": {
        "get": {
          "tags": [
            "AnomalyAlerting"
          ],
          "summary": "Query anomalies under a specific alert",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "configurationId",
              "description": "anomaly alerting configuration unique id",
              "required": true,
              "type": "string",
              "format": "uuid"
            },
            {
              "in": "path",
              "name": "alertId",
              "description": "alert id",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "$skip",
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "query",
              "name": "$top",
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/AnomalyResultList"
              }
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        }
      },
      "/alert/anomaly/configurations/{configurationId}/alerts/{alertId}/incidents": {
        "get": {
          "tags": [
            "AnomalyAlerting"
          ],
          "summary": "Query incidents under a specific alert",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "configurationId",
              "description": "anomaly alerting configuration unique id",
              "required": true,
              "type": "string",
              "format": "uuid"
            },
            {
              "in": "path",
              "name": "alertId",
              "description": "alert id",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "$skip",
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "query",
              "name": "$top",
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/IncidentResultList"
              }
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        }
      },
      "/enrichment/anomalyDetection/configurations/{configurationId}": {
        "get": {
          "tags": [
            "AnomalyDetection"
          ],
          "summary": "Query a single anomaly detection configuration",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "configurationId",
              "description": "anomaly detection configuration unique id",
              "required": true,
              "type": "string",
              "format": "uuid"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/AnomalyDetectionConfiguration"
              }
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        },
        "patch": {
          "tags": [
            "AnomalyDetection"
          ],
          "summary": "Update anomaly detection configuration",
          "consumes": [
            "application/json-merge-patch"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "configurationId",
              "description": "anomaly detection configuration unique id",
              "required": true,
              "type": "string",
              "format": "uuid"
            },
            {
              "in": "body",
              "name": "body",
              "description": "anomaly detection configuration",
              "schema": {
                "$ref": "#/definitions/AnomalyDetectionConfigurationPatch"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Success"
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        },
        "delete": {
          "tags": [
            "AnomalyDetection"
          ],
          "summary": "Delete anomaly detection configuration",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "configurationId",
              "description": "anomaly detection configuration unique id",
              "required": true,
              "type": "string",
              "format": "uuid"
            }
          ],
          "responses": {
            "204": {
              "description": "The resource is deleted successfully or does not exist."
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        }
      },
      "/enrichment/anomalyDetection/configurations": {
        "post": {
          "tags": [
            "AnomalyDetection"
          ],
          "summary": "Create anomaly detection configuration",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "anomaly detection configuration",
              "schema": {
                "$ref": "#/definitions/AnomalyDetectionConfiguration"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "Success",
              "headers": {
                "Location": {
                  "description": "Location of the newly created resource.",
                  "type": "string"
                }
              }
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        }
      },
      "/enrichment/anomalyDetection/configurations/{configurationId}/alert/anomaly/configurations": {
        "get": {
          "tags": [
            "AnomalyDetection"
          ],
          "summary": "Query all anomaly alerting configurations for specific anomaly detection configuration",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "configurationId",
              "description": "anomaly detection configuration unique id",
              "required": true,
              "type": "string",
              "format": "uuid"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/AnomalyAlertingConfigurationList"
              }
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        }
      },
      "/enrichment/anomalyDetection/configurations/{configurationId}/series/query": {
        "post": {
          "tags": [
            "AnomalyDetection"
          ],
          "summary": "Query series enriched by anomaly detection",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "configurationId",
              "description": "anomaly detection configuration unique id",
              "required": true,
              "type": "string",
              "format": "uuid"
            },
            {
              "in": "query",
              "name": "$skip",
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "query",
              "name": "$top",
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "body",
              "description": "query series detection result request",
              "schema": {
                "$ref": "#/definitions/DetectionSeriesQuery"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/SeriesResultList"
              }
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        }
      },
      "/enrichment/anomalyDetection/configurations/{configurationId}/anomalies/query": {
        "post": {
          "tags": [
            "AnomalyDetection"
          ],
          "summary": "Query anomalies under anomaly detection configuration",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "configurationId",
              "description": "anomaly detection configuration unique id",
              "required": true,
              "type": "string",
              "format": "uuid"
            },
            {
              "in": "query",
              "name": "$skip",
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "query",
              "name": "$top",
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "body",
              "description": "query detection result request",
              "schema": {
                "$ref": "#/definitions/DetectionResultQuery"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/AnomalyResultList"
              }
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        }
      },
      "/enrichment/anomalyDetection/configurations/{configurationId}/incidents/query": {
        "post": {
          "tags": [
            "AnomalyDetection"
          ],
          "summary": "Query incidents under anomaly detection configuration",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "configurationId",
              "description": "anomaly detection configuration unique id",
              "required": true,
              "type": "string",
              "format": "uuid"
            },
            {
              "in": "query",
              "name": "$skip",
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "query",
              "name": "$top",
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "body",
              "description": "query detection result request",
              "schema": {
                "$ref": "#/definitions/DetectionResultQuery"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/IncidentResultList"
              }
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        }
      },
      "/enrichment/anomalyDetection/configurations/{configurationId}/incidents/{incidentId}/incidentTree": {
        "get": {
          "tags": [
            "AnomalyDetection"
          ],
          "summary": "Query incident tree",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "configurationId",
              "description": "anomaly detection configuration unique id",
              "required": true,
              "type": "string",
              "format": "uuid"
            },
            {
              "in": "path",
              "name": "incidentId",
              "description": "incident id",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/IncidentTree"
              }
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        }
      },
      "/enrichment/anomalyDetection/configurations/{configurationId}/incidents/{incidentId}/rootCause": {
        "get": {
          "tags": [
            "AnomalyDetection"
          ],
          "summary": "Query root cause for incident",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "configurationId",
              "description": "anomaly detection configuration unique id",
              "required": true,
              "type": "string",
              "format": "uuid"
            },
            {
              "in": "path",
              "name": "incidentId",
              "description": "incident id",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/RootCauseList"
              }
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        }
      },
      "/datafeeds/{datafeedId}": {
        "get": {
          "tags": [
            "Datafeed"
          ],
          "summary": "Get a data feed by its id",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "datafeedId",
              "description": "The data feed unique id",
              "required": true,
              "type": "string",
              "format": "uuid"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": { }
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        },
        "patch": {
          "tags": [
            "Datafeed"
          ],
          "summary": "Update a data feed",
          "consumes": [
            "application/json-merge-patch"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "datafeedId",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Datafeed detail",
              "schema": {
                "description": "Datafeed detail"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Success"
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Datafeed"
          ],
          "summary": "Delete a data feed",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "datafeedId",
              "description": "The data feed id",
              "required": true,
              "type": "string",
              "format": "uuid"
            }
          ],
          "responses": {
            "204": {
              "description": "The resource is deleted successfully or does not exist."
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        }
      },
      "/datafeeds": {
        "get": {
          "tags": [
            "Datafeed"
          ],
          "summary": "List all data feeds",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "datafeedName",
              "description": "filter data feed by its name",
              "type": "string"
            },
            {
              "in": "query",
              "name": "dataSourceType",
              "description": "filter data feed by its source type",
              "type": "string",
              "enum": [
                "AzureBlob",
                "AzureCosmosDB",
                "AzureDataExplorer",
                "AzureEventHubs",
                "AzureTable",
                "HttpRequest",
                "InfluxDB",
                "MongoDB",
                "MySql",
                "PostgreSql",
                "SqlServer"
              ],
              "x-ms-enum": {
                "name": "DataSourceType",
                "modelAsString": true
              }
            },
            {
              "in": "query",
              "name": "granularityName",
              "description": "filter data feed by its granularity",
              "type": "string",
              "enum": [
                "Yearly",
                "Monthly",
                "Weekly",
                "Daily",
                "Hourly",
                "Minutely",
                "Secondly",
                "Custom"
              ],
              "x-ms-enum": {
                "name": "Granularity",
                "modelAsString": true
              }
            },
            {
              "in": "query",
              "name": "status",
              "description": "filter data feed by its status",
              "type": "string",
              "enum": [
                "Active",
                "Paused"
              ],
              "x-ms-enum": {
                "name": "EntityStatus",
                "modelAsString": true
              }
            },
            {
              "in": "query",
              "name": "creator",
              "description": "filter data feed by its creator",
              "type": "string"
            },
            {
              "in": "query",
              "name": "$skip",
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "query",
              "name": "$top",
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/DatafeedList"
              }
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Datafeed"
          ],
          "summary": "Create a new data feed",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Datafeed detail",
              "schema": {
                "description": "Datafeed detail"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "Success",
              "headers": {
                "Location": {
                  "description": "Location of the newly created resource.",
                  "type": "string"
                }
              }
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        }
      },
      "/hooks/{hookId}": {
        "get": {
          "tags": [
            "Hook"
          ],
          "summary": "Get a hook by its id",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "hookId",
              "description": "Hook unique ID",
              "required": true,
              "type": "string",
              "format": "uuid"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": { }
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        },
        "patch": {
          "tags": [
            "Hook"
          ],
          "summary": "Update a hook",
          "consumes": [
            "application/json-merge-patch"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "hookId",
              "description": "hook unique id",
              "required": true,
              "type": "string",
              "format": "uuid"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Update hook request",
              "schema": {
                "description": "Update hook request"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Success"
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Hook"
          ],
          "summary": "Delete a hook",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "hookId",
              "description": "hook unique id",
              "required": true,
              "type": "string",
              "format": "uuid"
            }
          ],
          "responses": {
            "204": {
              "description": "The resource is deleted successfully or does not exist."
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        }
      },
      "/hooks": {
        "get": {
          "tags": [
            "Hook"
          ],
          "summary": "List all hooks",
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/HookList"
              }
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Hook"
          ],
          "summary": "Create a new hook",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Create hook request",
              "schema": {
                "description": "Create hook request"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "Success",
              "headers": {
                "Location": {
                  "description": "Location of the newly created resource.",
                  "type": "string"
                }
              }
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        }
      },
      "/datafeeds/{datafeedId}/ingestionStatus/query": {
        "post": {
          "tags": [
            "IngestionStatus"
          ],
          "summary": "Get data ingestion status by datafeed",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "datafeedId",
              "description": "The data feed Id",
              "required": true,
              "type": "string",
              "format": "uuid"
            },
            {
              "in": "query",
              "name": "$skip",
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "query",
              "name": "$top",
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "body",
              "description": "The query time range",
              "schema": {
                "$ref": "#/definitions/IngestionStatusQueryOptions"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/IngestionStatusList"
              }
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        }
      },
      "/datafeeds/{datafeedId}/ingestionProgress/reset": {
        "post": {
          "tags": [
            "IngestionStatus"
          ],
          "summary": "Reset data ingestion status by data feed to backfill data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "datafeedId",
              "description": "The data feed id",
              "required": true,
              "type": "string",
              "format": "uuid"
            },
            {
              "in": "body",
              "name": "body",
              "description": "The backfill time range",
              "schema": {
                "$ref": "#/definitions/IngestionProgressResetOptions"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Success"
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        }
      },
      "/datafeeds/{datafeedId}/ingestionProgress": {
        "get": {
          "tags": [
            "IngestionStatus"
          ],
          "summary": "Get data last success ingestion job timestamp by data feed",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "datafeedId",
              "description": "The data feed Id",
              "required": true,
              "type": "string",
              "format": "uuid"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/DataFeedIngestionProgress"
              }
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        }
      },
      "/metrics/{metricId}/series/dimension/query": {
        "post": {
          "tags": [
            "Metric"
          ],
          "summary": "List series (dimension combinations) from metric",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "metricId",
              "description": "metric unique id",
              "required": true,
              "type": "string",
              "format": "uuid"
            },
            {
              "in": "query",
              "name": "$skip",
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "query",
              "name": "$top",
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "body",
              "description": "filter to query series",
              "schema": {
                "$ref": "#/definitions/SeriesDimensionQueryOptions"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/DimensionValueList"
              }
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        }
      },
      "/metrics/{metricId}/series/data/query": {
        "post": {
          "tags": [
            "Metric"
          ],
          "summary": "Get time series data from metric",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "metricId",
              "description": "metric unique id",
              "required": true,
              "type": "string",
              "format": "uuid"
            },
            {
              "in": "query",
              "name": "$skip",
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "query",
              "name": "$top",
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "body",
              "description": "query time series data condition",
              "schema": {
                "$ref": "#/definitions/SeriesDataQueryOptions"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/SeriesDataList"
              }
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        }
      },
      "/metrics/{metricId}/enrichment/anomalyDetection/configurations": {
        "get": {
          "tags": [
            "Metric"
          ],
          "summary": "Query all anomaly detection configurations for specific metric",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "metricId",
              "description": "metric unique id",
              "required": true,
              "type": "string",
              "format": "uuid"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/AnomalyDetectionConfigurationList"
              }
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        }
      },
      "/metrics/{metricId}/status/enrichment/anomalyDetection": {
        "post": {
          "tags": [
            "Metric"
          ],
          "summary": "Query anomaly detection status",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "metricId",
              "description": "metric unique id",
              "required": true,
              "type": "string",
              "format": "uuid"
            },
            {
              "in": "query",
              "name": "$skip",
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "query",
              "name": "$top",
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "body",
              "name": "body",
              "schema": {
                "$ref": "#/definitions/EnrichmentStatusQueryOption"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/EnrichmentStatusList"
              }
            },
            "default": {
              "description": "Client error or server error (4xx or 5xx)",
              "schema": {
                "$ref": "#/definitions/ErrorCode"
              }
            }
          }
        }
      }
    },
    "definitions": {
      "DimensionGroupIdentity": {
        "required": [
          "dimension"
        ],
        "type": "object",
        "properties": {
          "dimension": {
            "description": "dimension specified for series group",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "TopNGroupScope": {
        "required": [
          "minTopCount",
          "period",
          "top"
        ],
        "type": "object",
        "properties": {
          "top": {
            "format": "int32",
            "description": "top N",
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer"
          },
          "period": {
            "format": "int32",
            "description": "point count used to look back",
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer"
          },
          "minTopCount": {
            "format": "int32",
            "description": "min count should be in top N\r\n\r\nshould be less than or equal to period",
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer"
          }
        }
      },
      "SeverityCondition": {
        "required": [
          "maxAlertSeverity",
          "minAlertSeverity"
        ],
        "type": "object",
        "properties": {
          "minAlertSeverity": {
            "description": "min alert severity",
            "enum": [
              "Low",
              "Medium",
              "High"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "Severity",
              "modelAsString": true
            }
          },
          "maxAlertSeverity": {
            "description": "max alert severity",
            "enum": [
              "Low",
              "Medium",
              "High"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "Severity",
              "modelAsString": true
            }
          }
        }
      },
      "AlertSnoozeCondition": {
        "required": [
          "autoSnooze",
          "onlyForSuccessive",
          "snoozeScope"
        ],
        "type": "object",
        "properties": {
          "autoSnooze": {
            "format": "int32",
            "description": "snooze point count",
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer"
          },
          "snoozeScope": {
            "description": "snooze scope",
            "enum": [
              "Metric",
              "Series"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "SnoozeScope",
              "modelAsString": true
            }
          },
          "onlyForSuccessive": {
            "description": "only snooze for successive anomalies",
            "type": "boolean"
          }
        }
      },
      "ValueCondition": {
        "required": [
          "direction"
        ],
        "type": "object",
        "properties": {
          "lower": {
            "format": "double",
            "description": "lower bound\r\n\r\nshould be specified when direction is Both or Down",
            "type": "number"
          },
          "upper": {
            "format": "double",
            "description": "upper bound\r\n\r\nshould be specified when direction is Both or Up",
            "type": "number"
          },
          "direction": {
            "description": "value filter direction",
            "enum": [
              "Both",
              "Down",
              "Up"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "Direction",
              "modelAsString": true
            }
          },
          "metricId": {
            "format": "uuid",
            "description": "the other metric unique id used for value filter",
            "type": "string"
          },
          "triggerForMissing": {
            "description": "trigger alert when the corresponding point is missing in the other metric\r\n\r\nshould be specified only when using other metric to filter",
            "type": "boolean"
          }
        }
      },
      "MetricAlertingConfiguration": {
        "required": [
          "anomalyDetectionConfigurationId",
          "anomalyScopeType",
          "negationOperation"
        ],
        "type": "object",
        "properties": {
          "anomalyDetectionConfigurationId": {
            "format": "uuid",
            "description": "Anomaly detection configuration unique id",
            "type": "string"
          },
          "anomalyScopeType": {
            "description": "Anomaly scope",
            "enum": [
              "All",
              "Dimension",
              "TopN",
              "Favorite"
            ],
            "type": "string",
            "example": "All",
            "x-ms-enum": {
              "name": "AnomalyScope",
              "modelAsString": true
            }
          },
          "negationOperation": {
            "description": "Negation operation",
            "type": "boolean"
          },
          "dimensionAnomalyScope": {
            "$ref": "#/definitions/DimensionGroupIdentity"
          },
          "topNAnomalyScope": {
            "$ref": "#/definitions/TopNGroupScope"
          },
          "severityFilter": {
            "$ref": "#/definitions/SeverityCondition"
          },
          "snoozeFilter": {
            "$ref": "#/definitions/AlertSnoozeCondition"
          },
          "valueFilter": {
            "$ref": "#/definitions/ValueCondition"
          }
        }
      },
      "AnomalyAlertingConfiguration": {
        "required": [
          "crossMetricsOperator",
          "hookIds",
          "metricAlertingConfigurations",
          "name"
        ],
        "type": "object",
        "properties": {
          "anomalyAlertingConfigurationId": {
            "format": "uuid",
            "description": "Anomaly alerting configuration unique id",
            "type": "string",
            "readOnly": true
          },
          "name": {
            "description": "Anomaly alerting configuration name",
            "type": "string"
          },
          "crossMetricsOperator": {
            "description": "cross metrics operator",
            "enum": [
              "AND",
              "OR",
              "XOR"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "AnomalyAlertingConfigurationLogicType",
              "modelAsString": true
            }
          },
          "hookIds": {
            "description": "hook unique ids",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "format": "uuid",
              "type": "string"
            }
          },
          "metricAlertingConfigurations": {
            "description": "Anomaly alerting configurations",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/definitions/MetricAlertingConfiguration"
            }
          }
        }
      },
      "ErrorCode": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "code": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "AnomalyAlertingConfigurationPatch": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Anomaly alerting configuration name",
            "type": "string"
          },
          "crossMetricsOperator": {
            "description": "cross metrics operator",
            "enum": [
              "AND",
              "OR",
              "XOR"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "AnomalyAlertingConfigurationLogicType",
              "modelAsString": true
            }
          },
          "hookIds": {
            "description": "hook unique ids",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "format": "uuid",
              "type": "string"
            }
          },
          "metricAlertingConfigurations": {
            "description": "Anomaly alerting configurations",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/definitions/MetricAlertingConfiguration"
            }
          }
        }
      },
      "AlertingResultQuery": {
        "required": [
          "endTime",
          "startTime",
          "timeMode"
        ],
        "type": "object",
        "properties": {
          "startTime": {
            "format": "date-time",
            "description": "start time",
            "type": "string"
          },
          "endTime": {
            "format": "date-time",
            "description": "end time",
            "type": "string"
          },
          "timeMode": {
            "description": "time mode",
            "enum": [
              "AnomalyTime",
              "CreatedTime",
              "ModifiedTime"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "TimeMode",
              "modelAsString": true
            }
          }
        }
      },
      "AnomalyProperty": {
        "type": "object",
        "properties": {
          "anomalySeverity": {
            "description": "anomaly severity",
            "enum": [
              "Low",
              "Medium",
              "High"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "Severity",
              "modelAsString": true
            }
          },
          "anomalyStatus": {
            "description": "anomaly status\r\n\r\nonly return for alerting anomaly result",
            "enum": [
              "Active",
              "Resolved"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "AnomalyStatus",
              "modelAsString": true
            }
          }
        }
      },
      "AnomalyResult": {
        "type": "object",
        "properties": {
          "metricId": {
            "format": "uuid",
            "description": "metric unique id\r\n\r\nonly return for alerting anomaly result",
            "type": "string",
            "readOnly": true
          },
          "anomalyDetectionConfigurationId": {
            "format": "uuid",
            "description": "anomaly detection configuration unique id\r\n\r\nonly return for alerting anomaly result",
            "type": "string",
            "readOnly": true
          },
          "timestamp": {
            "format": "date-time",
            "description": "anomaly time",
            "type": "string",
            "readOnly": true
          },
          "createdTime": {
            "format": "date-time",
            "description": "created time\r\n\r\nonly return for alerting result",
            "type": "string",
            "readOnly": true
          },
          "modifiedTime": {
            "format": "date-time",
            "description": "modified time\r\n\r\nonly return for alerting result",
            "type": "string",
            "readOnly": true
          },
          "dimension": {
            "description": "dimension specified for series",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "readOnly": true
          },
          "value": {
            "format": "double",
            "description": "value",
            "type": "number",
            "readOnly": true
          },
          "property": {
            "$ref": "#/definitions/AnomalyProperty"
          }
        }
      },
      "AnomalyResultList": {
        "type": "object",
        "properties": {
          "@nextLink": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AnomalyResult"
            },
            "readOnly": true
          }
        }
      },
      "IncidentPoint": {
        "type": "object",
        "properties": {
          "dimension": {
            "description": "dimension specified for series",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "readOnly": true
          },
          "value": {
            "format": "double",
            "description": "value",
            "type": "number",
            "readOnly": true
          },
          "property": {
            "$ref": "#/definitions/AnomalyProperty"
          }
        }
      },
      "IncidentProperty": {
        "type": "object",
        "properties": {
          "incidentSeverity": {
            "description": "incident severity",
            "enum": [
              "Low",
              "Medium",
              "High"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "Severity",
              "modelAsString": true
            }
          },
          "incidentStatus": {
            "description": "incident status\r\n\r\nonly return for alerting incident result",
            "enum": [
              "Active",
              "Resolved"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "IncidentStatus",
              "modelAsString": true
            }
          }
        }
      },
      "IncidentResult": {
        "type": "object",
        "properties": {
          "metricId": {
            "format": "uuid",
            "description": "metric unique id\r\n\r\nonly return for alerting incident result",
            "type": "string",
            "readOnly": true
          },
          "anomalyDetectionConfigurationId": {
            "format": "uuid",
            "description": "anomaly detection configuration unique id\r\n\r\nonly return for alerting incident result",
            "type": "string",
            "readOnly": true
          },
          "incidentId": {
            "description": "incident id",
            "type": "string",
            "readOnly": true
          },
          "timestamp": {
            "format": "date-time",
            "description": "incident time",
            "type": "string",
            "readOnly": true
          },
          "createdTime": {
            "format": "date-time",
            "description": "created time\r\n\r\nonly return for alerting result",
            "type": "string",
            "readOnly": true
          },
          "modifiedTime": {
            "format": "date-time",
            "description": "modified time\r\n\r\nonly return for alerting result",
            "type": "string",
            "readOnly": true
          },
          "rootNode": {
            "$ref": "#/definitions/IncidentPoint"
          },
          "property": {
            "$ref": "#/definitions/IncidentProperty"
          }
        }
      },
      "IncidentResultList": {
        "type": "object",
        "properties": {
          "@nextLink": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/IncidentResult"
            },
            "readOnly": true
          }
        }
      },
      "AlertResult": {
        "type": "object",
        "properties": {
          "alertId": {
            "description": "alert id",
            "type": "string",
            "readOnly": true
          },
          "timestamp": {
            "format": "date-time",
            "description": "anomaly time",
            "type": "string",
            "readOnly": true
          },
          "createdTime": {
            "format": "date-time",
            "description": "created time",
            "type": "string",
            "readOnly": true
          },
          "modifiedTime": {
            "format": "date-time",
            "description": "modified time",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "AlertResultList": {
        "type": "object",
        "properties": {
          "@nextLink": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AlertResult"
            },
            "readOnly": true
          }
        }
      },
      "SuppressCondition": {
        "required": [
          "minNumber",
          "minRatio"
        ],
        "type": "object",
        "properties": {
          "minNumber": {
            "format": "int32",
            "description": "min point number",
            "type": "integer"
          },
          "minRatio": {
            "format": "double",
            "description": "min point ratio",
            "type": "number"
          }
        }
      },
      "SmartDetectionCondition": {
        "required": [
          "anomalyDetectorDirection",
          "boundaryVersion",
          "sensitivity",
          "suppressCondition"
        ],
        "type": "object",
        "properties": {
          "sensitivity": {
            "format": "double",
            "description": "sensitivity",
            "type": "number"
          },
          "boundaryVersion": {
            "format": "int32",
            "description": "boundaryVersion",
            "maximum": 2,
            "minimum": 1,
            "type": "integer"
          },
          "anomalyDetectorDirection": {
            "description": "detection direction",
            "enum": [
              "Both",
              "Down",
              "Up"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "AnomalyDetectorDirection",
              "modelAsString": true
            }
          },
          "suppressCondition": {
            "$ref": "#/definitions/SuppressCondition"
          }
        }
      },
      "HardThresholdCondition": {
        "required": [
          "anomalyDetectorDirection",
          "suppressCondition"
        ],
        "type": "object",
        "properties": {
          "lowerBound": {
            "format": "double",
            "description": "lower bound\r\n\r\nshould be specified when anomalyDetectorDirection is Both or Down",
            "type": "number"
          },
          "upperBound": {
            "format": "double",
            "description": "upper bound\r\n\r\nshould be specified when anomalyDetectorDirection is Both or Up",
            "type": "number"
          },
          "anomalyDetectorDirection": {
            "description": "detection direction",
            "enum": [
              "Both",
              "Down",
              "Up"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "AnomalyDetectorDirection",
              "modelAsString": true
            }
          },
          "suppressCondition": {
            "$ref": "#/definitions/SuppressCondition"
          }
        }
      },
      "ChangeThresholdCondition": {
        "required": [
          "anomalyDetectorDirection",
          "changePercentage",
          "shiftPoint",
          "suppressCondition"
        ],
        "type": "object",
        "properties": {
          "changePercentage": {
            "format": "double",
            "description": "change percentage",
            "type": "number"
          },
          "shiftPoint": {
            "format": "int32",
            "description": "shift point",
            "type": "integer"
          },
          "anomalyDetectorDirection": {
            "description": "detection direction",
            "enum": [
              "Both",
              "Down",
              "Up"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "AnomalyDetectorDirection",
              "modelAsString": true
            }
          },
          "suppressCondition": {
            "$ref": "#/definitions/SuppressCondition"
          }
        }
      },
      "WholeMetricConfiguration": {
        "required": [
          "conditionOperator"
        ],
        "type": "object",
        "properties": {
          "conditionOperator": {
            "description": "condition operator",
            "enum": [
              "AND",
              "OR"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "AnomalyDetectionConfigurationLogicType",
              "modelAsString": true
            }
          },
          "smartDetectionCondition": {
            "$ref": "#/definitions/SmartDetectionCondition"
          },
          "hardThresholdCondition": {
            "$ref": "#/definitions/HardThresholdCondition"
          },
          "changeThresholdCondition": {
            "$ref": "#/definitions/ChangeThresholdCondition"
          }
        }
      },
      "DimensionGroupConfiguration": {
        "required": [
          "conditionOperator",
          "group"
        ],
        "type": "object",
        "properties": {
          "group": {
            "$ref": "#/definitions/DimensionGroupIdentity"
          },
          "conditionOperator": {
            "description": "condition operator",
            "enum": [
              "AND",
              "OR"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "AnomalyDetectionConfigurationLogicType",
              "modelAsString": true
            }
          },
          "smartDetectionCondition": {
            "$ref": "#/definitions/SmartDetectionCondition"
          },
          "hardThresholdCondition": {
            "$ref": "#/definitions/HardThresholdCondition"
          },
          "changeThresholdCondition": {
            "$ref": "#/definitions/ChangeThresholdCondition"
          }
        }
      },
      "SeriesIdentity": {
        "required": [
          "dimension"
        ],
        "type": "object",
        "properties": {
          "seriesId": {
            "description": "series id\r\n\r\nonly used to internally represent series",
            "type": "string",
            "readOnly": true
          },
          "dimension": {
            "description": "dimension specified for series",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "SeriesConfiguration": {
        "required": [
          "conditionOperator",
          "series"
        ],
        "type": "object",
        "properties": {
          "series": {
            "$ref": "#/definitions/SeriesIdentity"
          },
          "conditionOperator": {
            "description": "condition operator",
            "enum": [
              "AND",
              "OR"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "AnomalyDetectionConfigurationLogicType",
              "modelAsString": true
            }
          },
          "smartDetectionCondition": {
            "$ref": "#/definitions/SmartDetectionCondition"
          },
          "hardThresholdCondition": {
            "$ref": "#/definitions/HardThresholdCondition"
          },
          "changeThresholdCondition": {
            "$ref": "#/definitions/ChangeThresholdCondition"
          }
        }
      },
      "AnomalyDetectionConfiguration": {
        "required": [
          "description",
          "dimensionGroupOverrideConfigurations",
          "favoriteSeries",
          "metricId",
          "name",
          "seriesOverrideConfigurations",
          "wholeMetricConfiguration"
        ],
        "type": "object",
        "properties": {
          "anomalyDetectionConfigurationId": {
            "format": "uuid",
            "description": "Anomaly detection configuration unique id",
            "type": "string",
            "readOnly": true
          },
          "name": {
            "description": "anomaly detection configuration name",
            "type": "string"
          },
          "description": {
            "description": "anomaly detection configuration description",
            "type": "string"
          },
          "metricId": {
            "format": "uuid",
            "description": "metric unique id",
            "type": "string"
          },
          "wholeMetricConfiguration": {
            "$ref": "#/definitions/WholeMetricConfiguration"
          },
          "dimensionGroupOverrideConfigurations": {
            "description": "detection configuration for series group",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/definitions/DimensionGroupConfiguration"
            }
          },
          "seriesOverrideConfigurations": {
            "description": "detection configuration for specific series",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/definitions/SeriesConfiguration"
            }
          },
          "favoriteSeries": {
            "description": "favorite series",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/definitions/SeriesIdentity"
            }
          }
        }
      },
      "AnomalyDetectionConfigurationPatch": {
        "type": "object",
        "properties": {
          "name": {
            "description": "anomaly detection configuration name",
            "type": "string"
          },
          "description": {
            "description": "anomaly detection configuration description",
            "type": "string"
          },
          "metricId": {
            "format": "uuid",
            "description": "metric unique id",
            "type": "string"
          },
          "wholeMetricConfiguration": {
            "$ref": "#/definitions/WholeMetricConfiguration"
          },
          "dimensionGroupOverrideConfigurations": {
            "description": "detection configuration for series group",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/definitions/DimensionGroupConfiguration"
            }
          },
          "seriesOverrideConfigurations": {
            "description": "detection configuration for specific series",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/definitions/SeriesConfiguration"
            }
          },
          "favoriteSeries": {
            "description": "favorite series",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/definitions/SeriesIdentity"
            }
          }
        }
      },
      "AnomalyAlertingConfigurationList": {
        "type": "object"
      },
      "DetectionSeriesQuery": {
        "required": [
          "endTime",
          "series",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "startTime": {
            "format": "date-time",
            "description": "start time",
            "type": "string"
          },
          "endTime": {
            "format": "date-time",
            "description": "end time",
            "type": "string"
          },
          "series": {
            "description": "series",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/definitions/SeriesIdentity"
            }
          }
        }
      },
      "SeriesResult": {
        "type": "object",
        "properties": {
          "series": {
            "description": "series",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/definitions/SeriesIdentity"
            },
            "readOnly": true
          },
          "timestampList": {
            "description": "timestamps of the series",
            "type": "array",
            "items": {
              "format": "date-time",
              "type": "string"
            },
            "readOnly": true
          },
          "valueList": {
            "description": "values of the series",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "readOnly": true
          },
          "isAnomalyList": {
            "description": "whether points of the series are anomalies",
            "type": "array",
            "items": {
              "type": "boolean"
            },
            "readOnly": true
          },
          "trendChangeList": {
            "description": "whether points of the series are trend change points",
            "type": "array",
            "items": {
              "type": "boolean"
            },
            "readOnly": true
          },
          "periodList": {
            "description": "period calculated on each point of the series",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "readOnly": true
          },
          "expectedValueList": {
            "description": "expected values of the series given by smart detector",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "readOnly": true
          },
          "lowerBoundaryList": {
            "description": "lower boundary list of the series given by smart detector",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "readOnly": true
          },
          "upperBoundaryList": {
            "description": "upper boundary list of the series given by smart detector",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "readOnly": true
          }
        }
      },
      "SeriesResultList": {
        "type": "object",
        "properties": {
          "@nextLink": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SeriesResult"
            },
            "readOnly": true
          }
        }
      },
      "SeverityFilterCondition": {
        "required": [
          "max",
          "min"
        ],
        "type": "object",
        "properties": {
          "min": {
            "description": "min severity",
            "enum": [
              "Low",
              "Medium",
              "High"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "Severity",
              "modelAsString": true
            }
          },
          "max": {
            "description": "max severity",
            "enum": [
              "Low",
              "Medium",
              "High"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "Severity",
              "modelAsString": true
            }
          }
        }
      },
      "DetectionFilterCondition": {
        "type": "object",
        "properties": {
          "dimensionFilter": {
            "description": "dimension filter",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/definitions/DimensionGroupIdentity"
            }
          },
          "severityFilter": {
            "$ref": "#/definitions/SeverityFilterCondition"
          }
        }
      },
      "DetectionResultQuery": {
        "required": [
          "endTime",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "startTime": {
            "format": "date-time",
            "description": "start time",
            "type": "string"
          },
          "endTime": {
            "format": "date-time",
            "description": "end time",
            "type": "string"
          },
          "filter": {
            "$ref": "#/definitions/DetectionFilterCondition"
          }
        }
      },
      "IncidentTree": {
        "type": "object",
        "properties": {
          "incidentRootNodes": {
            "description": "root nodes",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/definitions/SeriesIdentity"
            },
            "readOnly": true
          },
          "incidentTree": {
            "description": "parent-child relation among nodes",
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "readOnly": true
          },
          "points": {
            "description": "all nodes",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/definitions/SeriesIdentity"
            },
            "readOnly": true
          }
        }
      },
      "RootCauseList": {
        "type": "object"
      },
      "AzureBlobParameter": {
        "required": [
          "blobTemplate",
          "connectionString",
          "container"
        ],
        "type": "object",
        "properties": {
          "connectionString": {
            "description": "Azure Blob connection string",
            "type": "string"
          },
          "container": {
            "description": "Container",
            "type": "string"
          },
          "blobTemplate": {
            "description": "Blob Template",
            "type": "string"
          }
        }
      },
      "Metric": {
        "required": [
          "metricName"
        ],
        "type": "object",
        "properties": {
          "metricName": {
            "description": "metric name",
            "type": "string"
          },
          "metricDisplayName": {
            "description": "metric display name",
            "pattern": "[.a-zA-Z0-9_-]+",
            "type": "string"
          },
          "metricDescription": {
            "description": "metric description",
            "type": "string"
          }
        }
      },
      "Dimension": {
        "required": [
          "dimensionName"
        ],
        "type": "object",
        "properties": {
          "dimensionName": {
            "description": "dimension name",
            "type": "string"
          },
          "dimensionDisplayName": {
            "description": "dimension display name",
            "pattern": "[.a-zA-Z0-9_-]+",
            "type": "string"
          }
        }
      },
      "DatafeedDetail": {
        "required": [
          "datafeedName",
          "dataSourceType",
          "dataStartFrom",
          "dimension",
          "granularityName",
          "metrics"
        ],
        "type": "object",
        "properties": {
          "dataSourceType": {
            "description": "data source type",
            "enum": [
              "AzureBlob",
              "AzureCosmosDB",
              "AzureDataExplorer",
              "AzureEventHubs",
              "AzureTable",
              "HttpRequest",
              "InfluxDB",
              "MongoDB",
              "MySql",
              "PostgreSql",
              "SqlServer"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "DataSourceType",
              "modelAsString": true
            }
          },
          "datafeedId": {
            "format": "uuid",
            "description": "data feed unique id",
            "type": "string",
            "readOnly": true
          },
          "datafeedName": {
            "description": "data feed name",
            "type": "string",
            "example": "dummy datafeed name"
          },
          "metrics": {
            "description": "measure list",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/definitions/Metric"
            }
          },
          "dimension": {
            "description": "dimension list",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/definitions/Dimension"
            }
          },
          "dataStartFrom": {
            "format": "date-time",
            "description": "ingestion start time",
            "type": "string"
          },
          "timestampColumn": {
            "description": "user-defined timestamp column. if timestampColumn is null, start time of every time slice will be used as default value.",
            "type": "string"
          },
          "startOffsetInSeconds": {
            "format": "int64",
            "description": "the time that the beginning of data ingestion task will delay for every data slice according to this offset.",
            "default": 0,
            "type": "integer"
          },
          "maxQueryPerMinute": {
            "format": "float",
            "description": "the max number of queries per minute against user data source for data ingestion. A nagative value means no limitation.",
            "default": -1,
            "type": "number"
          },
          "granularityName": {
            "description": "granularity",
            "enum": [
              "Yearly",
              "Monthly",
              "Weekly",
              "Daily",
              "Hourly",
              "Minutely",
              "Secondly",
              "Custom"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "Granularity",
              "modelAsString": true
            }
          },
          "granularityAmount": {
            "format": "int32",
            "description": "if granularity is custom,it is required.",
            "type": "integer"
          },
          "allUpIdentification": {
            "description": "the identification value for the row of calculated all-up value.",
            "type": "string"
          },
          "needRollup": {
            "description": "mark if the data feed need rollup",
            "enum": [
              "NoRollup",
              "NeedRollup",
              "AlreadyRollup"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "NeedRollupEnum",
              "modelAsString": true
            }
          },
          "fillMissingPointForAd": {
            "description": "the type of fill missing point for anomaly detection",
            "enum": [
              "PreviousValue",
              "CustomValue",
              "NoFilling"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "FillMissingPointType",
              "modelAsString": true
            }
          },
          "fillMissingPointForAdValue": {
            "format": "double",
            "description": "the value of fill missing point for anomaly detection",
            "type": "number"
          },
          "rollUpMethod": {
            "description": "roll up method",
            "enum": [
              "None",
              "Sum",
              "Max",
              "Min",
              "Avg",
              "Count"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "RollUpMethod",
              "modelAsString": true
            }
          },
          "stopRetryAfterInSeconds": {
            "format": "int64",
            "description": "stop retry data ingestion after the data slice first schedule time in seconds.",
            "type": "integer"
          },
          "rollUpColumns": {
            "description": "roll up columns",
            "type": "string"
          },
          "minRetryIntervalInSeconds": {
            "format": "int64",
            "description": "the min retry interval for failed data ingestion tasks.",
            "type": "integer"
          },
          "maxConcurrency": {
            "format": "int32",
            "description": "the max concurrency of data ingestion queries against user data source. 0 means no limitation.",
            "default": 0,
            "maximum": 30,
            "minimum": 0,
            "type": "integer"
          },
          "datafeedDescription": {
            "description": "data feed description",
            "type": "string"
          },
          "viewMode": {
            "description": "data feed access mode, default is Private",
            "default": "Private",
            "enum": [
              "Private",
              "Public"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "ViewMode",
              "modelAsString": true
            }
          },
          "admins": {
            "description": "data feed administrator",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "viewers": {
            "description": "data feed viewer",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "creator": {
            "description": "data feed creator",
            "type": "string",
            "readOnly": true
          },
          "status": {
            "description": "data feed status",
            "default": "Active",
            "enum": [
              "Active",
              "Paused"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "EntityStatus",
              "modelAsString": true
            }
          },
          "createdTime": {
            "format": "date-time",
            "description": "data feed created time",
            "type": "string",
            "readOnly": true
          },
          "isAdmin": {
            "description": "the query user is one of data feed administrator or not",
            "type": "boolean",
            "readOnly": true
          },
          "actionLinkTemplate": {
            "description": "action link for alert",
            "type": "string"
          }
        },
        "discriminator": "dataSourceType"
      },
      "AzureBlobDatafeed": {
        "allOf": [
          {
            "$ref": "#/definitions/DatafeedDetail"
          },
          {
            "required": [
              "datafeedName",
              "dataSourceParameter",
              "dataSourceType",
              "dataStartFrom",
              "dimension",
              "granularityName",
              "metrics"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/definitions/AzureBlobParameter"
              }
            }
          }
        ]
      },
      "AzureCosmosDBParameter": {
        "required": [
          "collectionId",
          "connectionString",
          "database",
          "sqlQuery"
        ],
        "type": "object",
        "properties": {
          "connectionString": {
            "description": "Azure CosmosDB connection string",
            "type": "string"
          },
          "sqlQuery": {
            "description": "Query script",
            "type": "string"
          },
          "database": {
            "description": "Database name",
            "type": "string"
          },
          "collectionId": {
            "description": "Collection id",
            "type": "string"
          }
        }
      },
      "AzureCosmosDBDatafeed": {
        "allOf": [
          {
            "$ref": "#/definitions/DatafeedDetail"
          },
          {
            "required": [
              "datafeedName",
              "dataSourceParameter",
              "dataSourceType",
              "dataStartFrom",
              "dimension",
              "granularityName",
              "metrics"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/definitions/AzureCosmosDBParameter"
              }
            }
          }
        ]
      },
      "SqlSourceParameter": {
        "required": [
          "connectionString",
          "script"
        ],
        "type": "object",
        "properties": {
          "connectionString": {
            "description": "Database connection string",
            "type": "string"
          },
          "script": {
            "description": "Query script",
            "type": "string"
          }
        }
      },
      "AzureDataExplorerDatafeed": {
        "allOf": [
          {
            "$ref": "#/definitions/DatafeedDetail"
          },
          {
            "required": [
              "datafeedName",
              "dataSourceParameter",
              "dataSourceType",
              "dataStartFrom",
              "dimension",
              "granularityName",
              "metrics"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/definitions/SqlSourceParameter"
              }
            }
          }
        ]
      },
      "AzureEventHubsParameter": {
        "required": [
          "connectionString",
          "consumerGroup"
        ],
        "type": "object",
        "properties": {
          "connectionString": {
            "description": "Azure Event Hubs connection string",
            "type": "string"
          },
          "consumerGroup": {
            "description": "Azure Event Hubs consumer group",
            "type": "string"
          }
        }
      },
      "AzureEventHubsDatafeed": {
        "allOf": [
          {
            "$ref": "#/definitions/DatafeedDetail"
          },
          {
            "required": [
              "datafeedName",
              "dataSourceParameter",
              "dataSourceType",
              "dataStartFrom",
              "dimension",
              "granularityName",
              "metrics"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/definitions/AzureEventHubsParameter"
              }
            }
          }
        ]
      },
      "AzureTableParameter": {
        "required": [
          "connectionString",
          "script",
          "table"
        ],
        "type": "object",
        "properties": {
          "connectionString": {
            "description": "Azure Table connection string",
            "type": "string"
          },
          "script": {
            "description": "Query script",
            "type": "string"
          },
          "table": {
            "description": "Table name",
            "type": "string"
          }
        }
      },
      "AzureTableDatafeed": {
        "allOf": [
          {
            "$ref": "#/definitions/DatafeedDetail"
          },
          {
            "required": [
              "datafeedName",
              "dataSourceParameter",
              "dataSourceType",
              "dataStartFrom",
              "dimension",
              "granularityName",
              "metrics"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/definitions/AzureTableParameter"
              }
            }
          }
        ]
      },
      "HttpRequestParameter": {
        "required": [
          "httpHeader",
          "httpMethod",
          "payload",
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "description": "HTTP URL",
            "type": "string"
          },
          "httpHeader": {
            "description": "HTTP header",
            "type": "string"
          },
          "httpMethod": {
            "description": "HTTP method",
            "type": "string"
          },
          "payload": {
            "description": "HTTP reuqest body",
            "type": "string"
          }
        }
      },
      "HttpRequestDatafeed": {
        "allOf": [
          {
            "$ref": "#/definitions/DatafeedDetail"
          },
          {
            "required": [
              "datafeedName",
              "dataSourceParameter",
              "dataSourceType",
              "dataStartFrom",
              "dimension",
              "granularityName",
              "metrics"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/definitions/HttpRequestParameter"
              }
            }
          }
        ]
      },
      "InfluxDBParameter": {
        "required": [
          "connectionString",
          "database",
          "password",
          "query",
          "userName"
        ],
        "type": "object",
        "properties": {
          "connectionString": {
            "description": "InfluxDB connection string",
            "type": "string"
          },
          "database": {
            "description": "Database name",
            "type": "string"
          },
          "userName": {
            "description": "Database access user",
            "type": "string"
          },
          "password": {
            "description": "Database access password",
            "type": "string"
          },
          "query": {
            "description": "Query script",
            "type": "string"
          }
        }
      },
      "InfluxDBDatafeed": {
        "allOf": [
          {
            "$ref": "#/definitions/DatafeedDetail"
          },
          {
            "required": [
              "datafeedName",
              "dataSourceParameter",
              "dataSourceType",
              "dataStartFrom",
              "dimension",
              "granularityName",
              "metrics"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/definitions/InfluxDBParameter"
              }
            }
          }
        ]
      },
      "MySqlDatafeed": {
        "allOf": [
          {
            "$ref": "#/definitions/DatafeedDetail"
          },
          {
            "required": [
              "datafeedName",
              "dataSourceParameter",
              "dataSourceType",
              "dataStartFrom",
              "dimension",
              "granularityName",
              "metrics"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/definitions/SqlSourceParameter"
              }
            }
          }
        ]
      },
      "PostgreSqlDatafeed": {
        "allOf": [
          {
            "$ref": "#/definitions/DatafeedDetail"
          },
          {
            "required": [
              "datafeedName",
              "dataSourceParameter",
              "dataSourceType",
              "dataStartFrom",
              "dimension",
              "granularityName",
              "metrics"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/definitions/SqlSourceParameter"
              }
            }
          }
        ]
      },
      "SQLServerDatafeed": {
        "allOf": [
          {
            "$ref": "#/definitions/DatafeedDetail"
          },
          {
            "required": [
              "datafeedName",
              "dataSourceParameter",
              "dataSourceType",
              "dataStartFrom",
              "dimension",
              "granularityName",
              "metrics"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/definitions/SqlSourceParameter"
              }
            }
          }
        ]
      },
      "MongoDBParameter": {
        "required": [
          "command",
          "connectionString",
          "database"
        ],
        "type": "object",
        "properties": {
          "connectionString": {
            "description": "MongoDB connection string",
            "type": "string"
          },
          "database": {
            "description": "Database name",
            "type": "string"
          },
          "command": {
            "description": "Query script",
            "type": "string"
          }
        }
      },
      "MongoDBDatafeed": {
        "allOf": [
          {
            "$ref": "#/definitions/DatafeedDetail"
          },
          {
            "required": [
              "datafeedName",
              "dataSourceParameter",
              "dataSourceType",
              "dataStartFrom",
              "dimension",
              "granularityName",
              "metrics"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/definitions/MongoDBParameter"
              }
            }
          }
        ]
      },
      "DatafeedDetailPatch": {
        "required": [
          "dataSourceType"
        ],
        "type": "object",
        "properties": {
          "dataSourceType": {
            "description": "data source type",
            "enum": [
              "AzureBlob",
              "AzureCosmosDB",
              "AzureDataExplorer",
              "AzureEventHubs",
              "AzureTable",
              "HttpRequest",
              "InfluxDB",
              "MongoDB",
              "MySql",
              "PostgreSql",
              "SqlServer"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "DataSourceType",
              "modelAsString": true
            }
          },
          "datafeedName": {
            "description": "data feed name",
            "type": "string"
          },
          "dataStartFrom": {
            "format": "date-time",
            "description": "ingestion start time",
            "type": "string"
          },
          "timestampColumn": {
            "description": "user-defined timestamp column. if timestampColumn is null, start time of every time slice will be used as default value.",
            "type": "string"
          },
          "startOffsetInSeconds": {
            "format": "int64",
            "description": "the time that the beginning of data ingestion task will delay for every data slice according to this offset.",
            "default": 0,
            "type": "integer"
          },
          "maxQueryPerMinute": {
            "format": "float",
            "description": "the max number of queries per minute against user data source for data ingestion. A nagative value means no limitation.",
            "default": -1,
            "type": "number"
          },
          "allUpIdentification": {
            "description": "the identification value for the row of calculated all-up value.",
            "type": "string"
          },
          "needRollup": {
            "description": "mark if the data feed need rollup",
            "enum": [
              "NoRollup",
              "NeedRollup",
              "AlreadyRollup"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "NeedRollupEnum",
              "modelAsString": true
            }
          },
          "fillMissingPointForAd": {
            "description": "the type of fill missing point for anomaly detection",
            "enum": [
              "PreviousValue",
              "CustomValue",
              "NoFilling"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "FillMissingPointType",
              "modelAsString": true
            }
          },
          "fillMissingPointForAdValue": {
            "format": "double",
            "description": "the value of fill missing point for anomaly detection",
            "type": "number"
          },
          "rollUpMethod": {
            "description": "roll up method",
            "enum": [
              "None",
              "Sum",
              "Max",
              "Min",
              "Avg",
              "Count"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "RollUpMethod",
              "modelAsString": true
            }
          },
          "stopRetryAfterInSeconds": {
            "format": "int64",
            "description": "stop retry data ingestion after the data slice first schedule time in seconds.",
            "type": "integer"
          },
          "rollUpColumns": {
            "description": "roll up columns",
            "type": "string"
          },
          "minRetryIntervalInSeconds": {
            "format": "int64",
            "description": "the min retry interval for failed data ingestion tasks.",
            "type": "integer"
          },
          "maxConcurrency": {
            "format": "int32",
            "description": "the max concurrency of data ingestion queries against user data source. 0 means no limitation.",
            "default": 0,
            "maximum": 30,
            "minimum": 0,
            "type": "integer"
          },
          "datafeedDescription": {
            "description": "data feed description",
            "type": "string"
          },
          "viewMode": {
            "description": "data feed access mode, default is Private",
            "default": "Private",
            "enum": [
              "Private",
              "Public"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "ViewMode",
              "modelAsString": true
            }
          },
          "creator": {
            "description": "data feed creator",
            "type": "string",
            "readOnly": true
          },
          "status": {
            "description": "data feed status",
            "default": "Active",
            "enum": [
              "Active",
              "Paused"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "EntityStatus",
              "modelAsString": true
            }
          },
          "actionLinkTemplate": {
            "description": "action link for alert",
            "type": "string"
          }
        },
        "discriminator": "dataSourceType"
      },
      "AzureBlobDatafeedPatch": {
        "allOf": [
          {
            "$ref": "#/definitions/DatafeedDetailPatch"
          },
          {
            "required": [
              "dataSourceParameter",
              "dataSourceType"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/definitions/AzureBlobParameter"
              }
            }
          }
        ]
      },
      "AzureCosmosDBDatafeedPatch": {
        "allOf": [
          {
            "$ref": "#/definitions/DatafeedDetailPatch"
          },
          {
            "required": [
              "dataSourceParameter",
              "dataSourceType"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/definitions/AzureCosmosDBParameter"
              }
            }
          }
        ]
      },
      "AzureDataExplorerDatafeedPatch": {
        "allOf": [
          {
            "$ref": "#/definitions/DatafeedDetailPatch"
          },
          {
            "required": [
              "dataSourceParameter",
              "dataSourceType"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/definitions/SqlSourceParameter"
              }
            }
          }
        ]
      },
      "AzureEventHubsDatafeedPatch": {
        "allOf": [
          {
            "$ref": "#/definitions/DatafeedDetailPatch"
          },
          {
            "required": [
              "dataSourceParameter",
              "dataSourceType"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/definitions/AzureEventHubsParameter"
              }
            }
          }
        ]
      },
      "AzureTableDatafeedPatch": {
        "allOf": [
          {
            "$ref": "#/definitions/DatafeedDetailPatch"
          },
          {
            "required": [
              "dataSourceParameter",
              "dataSourceType"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/definitions/AzureTableParameter"
              }
            }
          }
        ]
      },
      "HttpRequestDatafeedPatch": {
        "allOf": [
          {
            "$ref": "#/definitions/DatafeedDetailPatch"
          },
          {
            "required": [
              "dataSourceParameter",
              "dataSourceType"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/definitions/HttpRequestParameter"
              }
            }
          }
        ]
      },
      "InfluxDBDatafeedPatch": {
        "allOf": [
          {
            "$ref": "#/definitions/DatafeedDetailPatch"
          },
          {
            "required": [
              "dataSourceParameter",
              "dataSourceType"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/definitions/InfluxDBParameter"
              }
            }
          }
        ]
      },
      "MySqlDatafeedPatch": {
        "allOf": [
          {
            "$ref": "#/definitions/DatafeedDetailPatch"
          },
          {
            "required": [
              "dataSourceParameter",
              "dataSourceType"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/definitions/SqlSourceParameter"
              }
            }
          }
        ]
      },
      "PostgreSqlDatafeedPatch": {
        "allOf": [
          {
            "$ref": "#/definitions/DatafeedDetailPatch"
          },
          {
            "required": [
              "dataSourceParameter",
              "dataSourceType"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/definitions/SqlSourceParameter"
              }
            }
          }
        ]
      },
      "SQLServerDatafeedPatch": {
        "allOf": [
          {
            "$ref": "#/definitions/DatafeedDetailPatch"
          },
          {
            "required": [
              "dataSourceParameter",
              "dataSourceType"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/definitions/SqlSourceParameter"
              }
            }
          }
        ]
      },
      "MongoDBDatafeedPatch": {
        "allOf": [
          {
            "$ref": "#/definitions/DatafeedDetailPatch"
          },
          {
            "required": [
              "dataSourceParameter",
              "dataSourceType"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/definitions/MongoDBParameter"
              }
            }
          }
        ]
      },
      "DatafeedList": {
        "type": "object",
        "properties": {
          "@nextLink": {
            "type": "string"
          },
          "value": {
            "type": "array",
            "items": { },
            "readOnly": true
          }
        }
      },
      "WebhookHookParameter": {
        "required": [
          "endpoint"
        ],
        "type": "object",
        "properties": {
          "endpoint": {
            "description": "API address, will be called when alert is triggered, only support POST method via SSL",
            "type": "string"
          },
          "username": {
            "description": "basic authentication",
            "type": "string"
          },
          "password": {
            "description": "basic authentication",
            "type": "string"
          },
          "headers": {
            "description": "custom headers in api call",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "HookInfo": {
        "required": [
          "hookName",
          "hookType"
        ],
        "type": "object",
        "properties": {
          "hookType": {
            "description": "hook type",
            "enum": [
              "Webhook",
              "Email"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "HookType",
              "modelAsString": true
            }
          },
          "hookId": {
            "format": "uuid",
            "description": "Hook unique id",
            "type": "string",
            "readOnly": true,
            "example": "01234567-8901-2345-6789-012345678901"
          },
          "hookName": {
            "description": "hook unique name",
            "type": "string"
          },
          "externalLink": {
            "description": "hook external link",
            "type": "string"
          },
          "description": {
            "description": "hook description",
            "type": "string"
          },
          "admins": {
            "description": "hook administrators",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "readOnly": true
          }
        },
        "discriminator": "hookType"
      },
      "WebhookHookInfo": {
        "allOf": [
          {
            "$ref": "#/definitions/HookInfo"
          },
          {
            "required": [
              "hookName",
              "hookParameter",
              "hookType"
            ],
            "type": "object",
            "properties": {
              "hookParameter": {
                "$ref": "#/definitions/WebhookHookParameter"
              }
            }
          }
        ]
      },
      "EmailHookParameter": {
        "required": [
          "toList"
        ],
        "type": "object",
        "properties": {
          "toList": {
            "description": "Email TO: list.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "EmailHookInfo": {
        "allOf": [
          {
            "$ref": "#/definitions/HookInfo"
          },
          {
            "required": [
              "hookName",
              "hookParameter",
              "hookType"
            ],
            "type": "object",
            "properties": {
              "hookParameter": {
                "$ref": "#/definitions/EmailHookParameter"
              }
            }
          }
        ]
      },
      "HookInfoPatch": {
        "required": [
          "hookType"
        ],
        "type": "object",
        "properties": {
          "hookType": {
            "description": "hook type",
            "enum": [
              "Webhook",
              "Email"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "HookType",
              "modelAsString": true
            }
          },
          "hookName": {
            "description": "hook unique name",
            "type": "string"
          },
          "externalLink": {
            "description": "hook external link",
            "type": "string"
          },
          "description": {
            "description": "hook description",
            "type": "string"
          }
        },
        "discriminator": "hookType"
      },
      "WebhookHookInfoPatch": {
        "allOf": [
          {
            "$ref": "#/definitions/HookInfoPatch"
          },
          {
            "required": [
              "hookType"
            ],
            "type": "object",
            "properties": {
              "hookParameter": {
                "$ref": "#/definitions/WebhookHookParameter"
              }
            }
          }
        ]
      },
      "EmailHookInfoPatch": {
        "allOf": [
          {
            "$ref": "#/definitions/HookInfoPatch"
          },
          {
            "required": [
              "hookType"
            ],
            "type": "object",
            "properties": {
              "hookParameter": {
                "$ref": "#/definitions/EmailHookParameter"
              }
            }
          }
        ]
      },
      "HookList": {
        "type": "object",
        "properties": {
          "@nextLink": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "uniqueItems": true,
            "type": "array",
            "items": { },
            "readOnly": true
          }
        }
      },
      "IngestionStatusQueryOptions": {
        "required": [
          "endTime",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "startTime": {
            "format": "date-time",
            "description": "the start point of time range to query data ingestion status.",
            "type": "string"
          },
          "endTime": {
            "format": "date-time",
            "description": "the end point of time range to query data ingestion status.",
            "type": "string"
          }
        }
      },
      "IngestionStatus": {
        "type": "object",
        "properties": {
          "timestamp": {
            "format": "date-time",
            "description": "data slice timestamp.",
            "type": "string"
          },
          "status": {
            "description": "latest ingestion task status for this data slice.",
            "type": "string"
          },
          "message": {
            "description": "the trimmed message of last ingestion job.",
            "type": "string"
          }
        }
      },
      "IngestionStatusList": {
        "type": "object",
        "properties": {
          "@nextLink": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/IngestionStatus"
            },
            "readOnly": true
          }
        }
      },
      "IngestionProgressResetOptions": {
        "required": [
          "endTime",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "startTime": {
            "format": "date-time",
            "description": "the start point of time range to reset data ingestion status.",
            "type": "string"
          },
          "endTime": {
            "format": "date-time",
            "description": "the end point of time range to reset data ingestion status.",
            "type": "string"
          }
        }
      },
      "DataFeedIngestionProgress": {
        "type": "object",
        "properties": {
          "latestSuccessTimestamp": {
            "format": "date-time",
            "description": "the timestamp of lastest success ingestion job.\r\nnull indicates not available",
            "type": "string",
            "readOnly": true
          },
          "latestActiveTimestamp": {
            "format": "date-time",
            "description": "the timestamp of lastest ingestion job with status update.\r\nnull indicates not available",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "SeriesDimensionQueryOptions": {
        "required": [
          "startTime"
        ],
        "type": "object",
        "properties": {
          "startTime": {
            "format": "date-time",
            "description": "the start time of the time series dimension combinations to query, the format should be yyyy-MM-ddTHH:mm:ssZ",
            "type": "string"
          },
          "endTime": {
            "format": "date-time",
            "description": "the end time of time series dimension combinations to query, the format should be yyyy-MM-ddTHH:mm:ssZ, now will be used if omitted",
            "type": "string"
          },
          "dimensionFilter": {
            "description": "dimension name and value pair",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "DimValueCombineItem": {
        "type": "object",
        "properties": {
          "metricId": {
            "description": "metric unique id",
            "type": "string",
            "example": "37f0215d-28f1-468d-b177-19b017b05b35"
          },
          "dimension": {
            "description": "dimension name and value pair",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "DimensionValueList": {
        "type": "object",
        "properties": {
          "@nextLink": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DimValueCombineItem"
            },
            "readOnly": true
          }
        }
      },
      "SeriesDataQueryOptions": {
        "required": [
          "endTime",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "startTime": {
            "format": "date-time",
            "description": "start time of query a time series data, and format should be yyyy-MM-ddThh:mm:ssZ",
            "type": "string"
          },
          "endTime": {
            "format": "date-time",
            "description": "start time of query a time series data, and format should be yyyy-MM-ddThh:mm:ssZ",
            "type": "string"
          },
          "dimensionList": {
            "description": "dimension name and value pair",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      },
      "SeriesItem": {
        "type": "object",
        "properties": {
          "metricId": {
            "description": "metric unique id",
            "type": "string"
          },
          "dimension": {
            "description": "dimension name and value pair",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "SeriesDataItem": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/definitions/SeriesItem"
          },
          "timestampList": {
            "description": "timestamps of the data related to this time series",
            "type": "array",
            "items": {
              "format": "date-time",
              "type": "string"
            },
            "readOnly": true
          },
          "valueList": {
            "description": "values of the data related to this time series",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "readOnly": true
          }
        }
      },
      "SeriesDataList": {
        "type": "object",
        "properties": {
          "@nextLink": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SeriesDataItem"
            },
            "readOnly": true
          }
        }
      },
      "AnomalyDetectionConfigurationList": {
        "type": "object"
      },
      "EnrichmentStatusQueryOption": {
        "required": [
          "endTime",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "startTime": {
            "format": "date-time",
            "description": "the start point of time range to query anomaly detection status.",
            "type": "string"
          },
          "endTime": {
            "format": "date-time",
            "description": "the end point of time range to query anomaly detection status.",
            "type": "string"
          }
        }
      },
      "EnrichmentStatus": {
        "type": "object",
        "properties": {
          "timestamp": {
            "format": "date-time",
            "description": "data slice timestamp.",
            "type": "string"
          },
          "status": {
            "description": "latest enrichment status for this data slice.",
            "type": "string"
          },
          "message": {
            "description": "the trimmed message describes details of the enrichment status.",
            "type": "string"
          }
        }
      },
      "EnrichmentStatusList": {
        "type": "object",
        "properties": {
          "@nextLink": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/EnrichmentStatus"
            },
            "readOnly": true
          }
        }
      }
    },
    "securityDefinitions": {
      "apiKeyHeader": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header"
      }
    }
  }