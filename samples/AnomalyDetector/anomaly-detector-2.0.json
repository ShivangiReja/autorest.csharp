{
  "openapi": "3.0.1",
  "info": {
    "title": "Metrics Monitor API (OpenAPI v3)",
    "description": "Metrics Monitor API (OpenAPI v3)",
    "version": "1.20200701"
  },
  "paths": {
    "/alert/anomaly/configurations/{configurationId}": {
      "get": {
        "tags": [
          "AnomalyAlerting"
        ],
        "summary": "Query a single anomaly alerting configuration",
        "operationId": "getAnomalyAlertingConfiguration",
        "parameters": [
          {
            "name": "configurationId",
            "in": "path",
            "description": "anomaly alerting configuration unique id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "anomaly alerting configuration unique id",
              "format": "uuid",
              "example": "44444444-4444-4444-4444-000000000001"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnomalyAlertingConfiguration"
                },
                "example": {
  "anomalyAlertingConfigurationId": "44444444-4444-4444-4444-000000000001",
  "name": "alerting configuration name",
  "crossMetricsOperator": "AND",
  "hookIds": [
    "00000000-0000-0000-0000-000000000001"
  ],
  "metricAlertingConfigurations": [
    {
      "anomalyDetectionConfigurationId": "33333333-3333-3333-3333-000000000001",
      "anomalyScopeType": "All",
      "negationOperation": false,
      "severityFilter": {
        "minAlertSeverity": "Medium",
        "maxAlertSeverity": "High"
      },
      "snoozeFilter": {
        "autoSnooze": 0,
        "snoozeScope": "Series",
        "onlyForSuccessive": true
      }
    },
    {
      "anomalyDetectionConfigurationId": "33333333-3333-3333-3333-000000000002",
      "anomalyScopeType": "Dimension",
      "negationOperation": false,
      "dimensionAnomalyScope": {
        "dimension": {
          "city": "Beijing"
        }
      },
      "severityFilter": {
        "minAlertSeverity": "Low",
        "maxAlertSeverity": "High"
      },
      "snoozeFilter": {
        "autoSnooze": 0,
        "snoozeScope": "Series",
        "onlyForSuccessive": true
      },
      "valueFilter": {
        "lower": 0.0,
        "upper": 1000.0,
        "direction": "Both",
        "triggerForMissing": false
      }
    }
  ]
}
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "AnomalyAlerting"
        ],
        "summary": "Update anomaly alerting configuration",
        "operationId": "updateAnomalyAlertingConfiguration",
        "parameters": [
          {
            "name": "configurationId",
            "in": "path",
            "description": "anomaly alerting configuration unique id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "anomaly alerting configuration unique id",
              "format": "uuid",
              "example": "44444444-4444-4444-4444-000000000001"
            }
          }
        ],
        "requestBody": {
          "description": "anomaly alerting configuration",
          "content": {
            "application/json-merge-patch": {
              "schema": {
                "$ref": "#/components/schemas/AnomalyAlertingConfigurationPatch"
              },
              "example": {
  "name": "alerting configuration name",
  "crossMetricsOperator": "AND",
  "hookIds": [
    "00000000-0000-0000-0000-000000000001"
  ],
  "metricAlertingConfigurations": [
    {
      "anomalyDetectionConfigurationId": "33333333-3333-3333-3333-000000000001",
      "anomalyScopeType": "All",
      "negationOperation": false,
      "severityFilter": {
        "minAlertSeverity": "Medium",
        "maxAlertSeverity": "High"
      },
      "snoozeFilter": {
        "autoSnooze": 0,
        "snoozeScope": "Series",
        "onlyForSuccessive": true
      }
    },
    {
      "anomalyDetectionConfigurationId": "33333333-3333-3333-3333-000000000002",
      "anomalyScopeType": "Dimension",
      "negationOperation": false,
      "dimensionAnomalyScope": {
        "dimension": {
          "city": "Beijing"
        }
      },
      "severityFilter": {
        "minAlertSeverity": "Low",
        "maxAlertSeverity": "High"
      },
      "snoozeFilter": {
        "autoSnooze": 0,
        "snoozeScope": "Series",
        "onlyForSuccessive": true
      },
      "valueFilter": {
        "lower": 0.0,
        "upper": 1000.0,
        "direction": "Both",
        "triggerForMissing": false
      }
    }
  ]
}
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AnomalyAlerting"
        ],
        "summary": "Delete anomaly alerting configuration",
        "operationId": "deleteAnomalyAlertingConfiguration",
        "parameters": [
          {
            "name": "configurationId",
            "in": "path",
            "description": "anomaly alerting configuration unique id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "anomaly alerting configuration unique id",
              "format": "uuid",
              "example": "44444444-4444-4444-4444-000000000001"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource is deleted successfully or does not exist."
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        }
      }
    },
    "/alert/anomaly/configurations": {
      "post": {
        "tags": [
          "AnomalyAlerting"
        ],
        "summary": "Create anomaly alerting configuration",
        "operationId": "createAnomalyAlertingConfiguration",
        "requestBody": {
          "description": "anomaly alerting configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnomalyAlertingConfiguration"
              },
              "example": {
  "name": "alerting configuration name",
  "crossMetricsOperator": "AND",
  "hookIds": [
    "00000000-0000-0000-0000-000000000001"
  ],
  "metricAlertingConfigurations": [
    {
      "anomalyDetectionConfigurationId": "33333333-3333-3333-3333-000000000001",
      "anomalyScopeType": "All",
      "negationOperation": false,
      "severityFilter": {
        "minAlertSeverity": "Medium",
        "maxAlertSeverity": "High"
      },
      "snoozeFilter": {
        "autoSnooze": 0,
        "snoozeScope": "Series",
        "onlyForSuccessive": true
      }
    },
    {
      "anomalyDetectionConfigurationId": "33333333-3333-3333-3333-000000000002",
      "anomalyScopeType": "Dimension",
      "negationOperation": false,
      "dimensionAnomalyScope": {
        "dimension": {
          "city": "Beijing"
        }
      },
      "severityFilter": {
        "minAlertSeverity": "Low",
        "maxAlertSeverity": "High"
      },
      "snoozeFilter": {
        "autoSnooze": 0,
        "snoozeScope": "Series",
        "onlyForSuccessive": true
      },
      "valueFilter": {
        "lower": 0.0,
        "upper": 1000.0,
        "direction": "Both",
        "triggerForMissing": false
      }
    }
  ]
}
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "headers": {
              "Location": {
                "description": "Location of the newly created resource.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        }
      }
    },
    "/alert/anomaly/configurations/{configurationId}/alerts/query": {
      "post": {
        "tags": [
          "AnomalyAlerting"
        ],
        "summary": "Query alerts under anomaly alerting configuration",
        "operationId": "getAlertsByAnomalyAlertingConfiguration",
        "parameters": [
          {
            "name": "configurationId",
            "in": "path",
            "description": "anomaly alerting configuration unique id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "anomaly alerting configuration unique id",
              "format": "uuid",
              "example": "44444444-4444-4444-4444-000000000001"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "for paging, skipped number",
              "format": "int32"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "for paging, item number in response",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "query alerting result request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertingResultQuery"
              },
              "example": {
  "startTime": "2020-01-01T00:00:00Z",
  "endTime": "2020-02-01T00:00:00Z",
  "timeMode": "AnomalyTime"
}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertResultList"
                },
                "example": {
  "value": [
    {
      "alertId": "aaaaaaaaaaaa",
      "timestamp": "2020-01-01T00:00:00Z",
      "createdTime": "2020-07-02T01:01:49Z",
      "modifiedTime": "2020-07-02T01:01:49Z"
    }
  ]
}
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@nextLink"
        }
      }
    },
    "/alert/anomaly/configurations/{configurationId}/alerts/{alertId}/anomalies": {
      "get": {
        "tags": [
          "AnomalyAlerting"
        ],
        "summary": "Query anomalies under a specific alert",
        "operationId": "getAnomaliesFromAlertByAnomalyAlertingConfiguration",
        "parameters": [
          {
            "name": "configurationId",
            "in": "path",
            "description": "anomaly alerting configuration unique id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "anomaly alerting configuration unique id",
              "format": "uuid",
              "example": "44444444-4444-4444-4444-000000000001"
            }
          },
          {
            "name": "alertId",
            "in": "path",
            "description": "alert id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "alert id",
              "nullable": true,
              "example": "aaaaaaaaaaaa"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "for paging, skipped number",
              "format": "int32"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "for paging, item number in response",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnomalyResultList"
                },
                "example": {
  "value": [
    {
      "metricId": "22222222-2222-2222-2222-000000000001",
      "anomalyDetectionConfigurationId": "33333333-3333-3333-3333-000000000001",
      "timestamp": "2020-01-01T00:00:00Z",
      "createdTime": "2020-07-02T01:01:49Z",
      "modifiedTime": "2020-07-02T01:01:49Z",
      "dimension": {
        "category": "__SUM__",
        "city": "Beijing"
      },
      "property": {
        "anomalySeverity": "High",
        "anomalyStatus": "Active"
      }
    }
  ]
}
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@nextLink"
        }
      }
    },
    "/alert/anomaly/configurations/{configurationId}/alerts/{alertId}/incidents": {
      "get": {
        "tags": [
          "AnomalyAlerting"
        ],
        "summary": "Query incidents under a specific alert",
        "operationId": "getIncidentsFromAlertByAnomalyAlertingConfiguration",
        "parameters": [
          {
            "name": "configurationId",
            "in": "path",
            "description": "anomaly alerting configuration unique id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "anomaly alerting configuration unique id",
              "format": "uuid",
              "example": "44444444-4444-4444-4444-000000000001"
            }
          },
          {
            "name": "alertId",
            "in": "path",
            "description": "alert id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "alert id",
              "nullable": true,
              "example": "aaaaaaaaaaaa"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "for paging, skipped number",
              "format": "int32"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "for paging, item number in response",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentResultList"
                },
                "example": {
  "value": [
    {
      "metricId": "22222222-2222-2222-2222-000000000001",
      "anomalyDetectionConfigurationId": "33333333-3333-3333-3333-000000000001",
      "incidentId": "iiiiiiiiiiii",
      "startTime": "2020-01-01T00:00:00Z",
      "lastTime": "2020-02-01T00:00:00Z",
      "rootNode": {
        "dimension": {
          "category": "__SUM__",
          "city": "Beijing"
        }
      },
      "property": {
        "maxSeverity": "High",
        "incidentStatus": "Active"
      }
    }
  ]
}
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@nextLink"
        }
      }
    },
    "/enrichment/anomalyDetection/configurations/{configurationId}": {
      "get": {
        "tags": [
          "AnomalyDetection"
        ],
        "summary": "Query a single anomaly detection configuration",
        "operationId": "getAnomalyDetectionConfiguration",
        "parameters": [
          {
            "name": "configurationId",
            "in": "path",
            "description": "anomaly detection configuration unique id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "anomaly detection configuration unique id",
              "format": "uuid",
              "example": "33333333-3333-3333-3333-000000000001"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnomalyDetectionConfiguration"
                },
                "example": {
  "anomalyDetectionConfigurationId": "33333333-3333-3333-3333-000000000001",
  "name": "Anomaly detection configuration name",
  "description": "Anomaly detection configuration description",
  "metricId": "22222222-2222-2222-2222-000000000001",
  "wholeMetricConfiguration": {
    "conditionOperator": "AND",
    "smartDetectionCondition": {
      "sensitivity": 91.0,
      "anomalyDetectorDirection": "Both",
      "suppressCondition": {
        "minNumber": 1,
        "minRatio": 100.0
      }
    },
    "hardThresholdCondition": {
      "lowerBound": 1.0,
      "upperBound": 100.0,
      "anomalyDetectorDirection": "Both",
      "suppressCondition": {
        "minNumber": 1,
        "minRatio": 100.0
      }
    },
    "changeThresholdCondition": {
      "changePercentage": 5.0,
      "shiftPoint": 1,
      "withinRange": false,
      "anomalyDetectorDirection": "Both",
      "suppressCondition": {
        "minNumber": 1,
        "minRatio": 100.0
      }
    }
  },
  "dimensionGroupOverrideConfigurations": [
    {
      "group": {
        "dimension": {
          "city": "Beijing"
        }
      },
      "conditionOperator": "AND",
      "smartDetectionCondition": {
        "sensitivity": 91.0,
        "anomalyDetectorDirection": "Both",
        "suppressCondition": {
          "minNumber": 1,
          "minRatio": 100.0
        }
      },
      "hardThresholdCondition": {
        "lowerBound": 1.0,
        "upperBound": 100.0,
        "anomalyDetectorDirection": "Both",
        "suppressCondition": {
          "minNumber": 1,
          "minRatio": 100.0
        }
      },
      "changeThresholdCondition": {
        "changePercentage": 5.0,
        "shiftPoint": 1,
        "withinRange": false,
        "anomalyDetectorDirection": "Both",
        "suppressCondition": {
          "minNumber": 1,
          "minRatio": 100.0
        }
      }
    }
  ],
  "seriesOverrideConfigurations": [
    {
      "series": {
        "dimension": {
          "category": "Jewelry",
          "city": "Beijing"
        }
      },
      "conditionOperator": "AND",
      "smartDetectionCondition": {
        "sensitivity": 91.0,
        "anomalyDetectorDirection": "Both",
        "suppressCondition": {
          "minNumber": 1,
          "minRatio": 100.0
        }
      },
      "hardThresholdCondition": {
        "lowerBound": 1.0,
        "upperBound": 100.0,
        "anomalyDetectorDirection": "Both",
        "suppressCondition": {
          "minNumber": 1,
          "minRatio": 100.0
        }
      },
      "changeThresholdCondition": {
        "changePercentage": 5.0,
        "shiftPoint": 1,
        "withinRange": false,
        "anomalyDetectorDirection": "Both",
        "suppressCondition": {
          "minNumber": 1,
          "minRatio": 100.0
        }
      }
    }
  ]
}
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "AnomalyDetection"
        ],
        "summary": "Update anomaly detection configuration",
        "operationId": "updateAnomalyDetectionConfiguration",
        "parameters": [
          {
            "name": "configurationId",
            "in": "path",
            "description": "anomaly detection configuration unique id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "anomaly detection configuration unique id",
              "format": "uuid",
              "example": "33333333-3333-3333-3333-000000000001"
            }
          }
        ],
        "requestBody": {
          "description": "anomaly detection configuration",
          "content": {
            "application/json-merge-patch": {
              "schema": {
                "$ref": "#/components/schemas/AnomalyDetectionConfigurationPatch"
              },
              "example": {
  "name": "Anomaly detection configuration name",
  "description": "Anomaly detection configuration description",
  "wholeMetricConfiguration": {
    "conditionOperator": "AND",
    "smartDetectionCondition": {
      "sensitivity": 91.0,
      "anomalyDetectorDirection": "Both",
      "suppressCondition": {
        "minNumber": 1,
        "minRatio": 100.0
      }
    },
    "hardThresholdCondition": {
      "lowerBound": 1.0,
      "upperBound": 100.0,
      "anomalyDetectorDirection": "Both",
      "suppressCondition": {
        "minNumber": 1,
        "minRatio": 100.0
      }
    },
    "changeThresholdCondition": {
      "changePercentage": 5.0,
      "shiftPoint": 1,
      "withinRange": false,
      "anomalyDetectorDirection": "Both",
      "suppressCondition": {
        "minNumber": 1,
        "minRatio": 100.0
      }
    }
  },
  "dimensionGroupOverrideConfigurations": [
    {
      "group": {
        "dimension": {
          "city": "Beijing"
        }
      },
      "conditionOperator": "AND",
      "smartDetectionCondition": {
        "sensitivity": 91.0,
        "anomalyDetectorDirection": "Both",
        "suppressCondition": {
          "minNumber": 1,
          "minRatio": 100.0
        }
      },
      "hardThresholdCondition": {
        "lowerBound": 1.0,
        "upperBound": 100.0,
        "anomalyDetectorDirection": "Both",
        "suppressCondition": {
          "minNumber": 1,
          "minRatio": 100.0
        }
      },
      "changeThresholdCondition": {
        "changePercentage": 5.0,
        "shiftPoint": 1,
        "withinRange": false,
        "anomalyDetectorDirection": "Both",
        "suppressCondition": {
          "minNumber": 1,
          "minRatio": 100.0
        }
      }
    }
  ],
  "seriesOverrideConfigurations": [
    {
      "series": {
        "dimension": {
          "category": "Jewelry",
          "city": "Beijing"
        }
      },
      "conditionOperator": "AND",
      "smartDetectionCondition": {
        "sensitivity": 91.0,
        "anomalyDetectorDirection": "Both",
        "suppressCondition": {
          "minNumber": 1,
          "minRatio": 100.0
        }
      },
      "hardThresholdCondition": {
        "lowerBound": 1.0,
        "upperBound": 100.0,
        "anomalyDetectorDirection": "Both",
        "suppressCondition": {
          "minNumber": 1,
          "minRatio": 100.0
        }
      },
      "changeThresholdCondition": {
        "changePercentage": 5.0,
        "shiftPoint": 1,
        "withinRange": false,
        "anomalyDetectorDirection": "Both",
        "suppressCondition": {
          "minNumber": 1,
          "minRatio": 100.0
        }
      }
    }
  ]
}
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AnomalyDetection"
        ],
        "summary": "Delete anomaly detection configuration",
        "operationId": "deleteAnomalyDetectionConfiguration",
        "parameters": [
          {
            "name": "configurationId",
            "in": "path",
            "description": "anomaly detection configuration unique id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "anomaly detection configuration unique id",
              "format": "uuid",
              "example": "33333333-3333-3333-3333-000000000001"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource is deleted successfully or does not exist."
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        }
      }
    },
    "/enrichment/anomalyDetection/configurations": {
      "post": {
        "tags": [
          "AnomalyDetection"
        ],
        "summary": "Create anomaly detection configuration",
        "operationId": "createAnomalyDetectionConfiguration",
        "requestBody": {
          "description": "anomaly detection configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnomalyDetectionConfiguration"
              },
              "example": {
  "name": "Anomaly detection configuration name",
  "description": "Anomaly detection configuration description",
  "metricId": "22222222-2222-2222-2222-000000000001",
  "wholeMetricConfiguration": {
    "conditionOperator": "AND",
    "smartDetectionCondition": {
      "sensitivity": 91.0,
      "anomalyDetectorDirection": "Both",
      "suppressCondition": {
        "minNumber": 1,
        "minRatio": 100.0
      }
    },
    "hardThresholdCondition": {
      "lowerBound": 1.0,
      "upperBound": 100.0,
      "anomalyDetectorDirection": "Both",
      "suppressCondition": {
        "minNumber": 1,
        "minRatio": 100.0
      }
    },
    "changeThresholdCondition": {
      "changePercentage": 5.0,
      "shiftPoint": 1,
      "withinRange": false,
      "anomalyDetectorDirection": "Both",
      "suppressCondition": {
        "minNumber": 1,
        "minRatio": 100.0
      }
    }
  },
  "dimensionGroupOverrideConfigurations": [
    {
      "group": {
        "dimension": {
          "city": "Beijing"
        }
      },
      "conditionOperator": "AND",
      "smartDetectionCondition": {
        "sensitivity": 91.0,
        "anomalyDetectorDirection": "Both",
        "suppressCondition": {
          "minNumber": 1,
          "minRatio": 100.0
        }
      },
      "hardThresholdCondition": {
        "lowerBound": 1.0,
        "upperBound": 100.0,
        "anomalyDetectorDirection": "Both",
        "suppressCondition": {
          "minNumber": 1,
          "minRatio": 100.0
        }
      },
      "changeThresholdCondition": {
        "changePercentage": 5.0,
        "shiftPoint": 1,
        "withinRange": false,
        "anomalyDetectorDirection": "Both",
        "suppressCondition": {
          "minNumber": 1,
          "minRatio": 100.0
        }
      }
    }
  ],
  "seriesOverrideConfigurations": [
    {
      "series": {
        "dimension": {
          "category": "Jewelry",
          "city": "Beijing"
        }
      },
      "conditionOperator": "AND",
      "smartDetectionCondition": {
        "sensitivity": 91.0,
        "anomalyDetectorDirection": "Both",
        "suppressCondition": {
          "minNumber": 1,
          "minRatio": 100.0
        }
      },
      "hardThresholdCondition": {
        "lowerBound": 1.0,
        "upperBound": 100.0,
        "anomalyDetectorDirection": "Both",
        "suppressCondition": {
          "minNumber": 1,
          "minRatio": 100.0
        }
      },
      "changeThresholdCondition": {
        "changePercentage": 5.0,
        "shiftPoint": 1,
        "withinRange": false,
        "anomalyDetectorDirection": "Both",
        "suppressCondition": {
          "minNumber": 1,
          "minRatio": 100.0
        }
      }
    }
  ]
}
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "headers": {
              "Location": {
                "description": "Location of the newly created resource.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        }
      }
    },
    "/enrichment/anomalyDetection/configurations/{configurationId}/alert/anomaly/configurations": {
      "get": {
        "tags": [
          "AnomalyDetection"
        ],
        "summary": "Query all anomaly alerting configurations for specific anomaly detection configuration",
        "operationId": "getAnomalyAlertingConfigurationsByAnomalyDetectionConfiguration",
        "parameters": [
          {
            "name": "configurationId",
            "in": "path",
            "description": "anomaly detection configuration unique id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "anomaly detection configuration unique id",
              "format": "uuid",
              "example": "33333333-3333-3333-3333-000000000001"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnomalyAlertingConfigurationList"
                },
                "example": {
  "value": [
    {
      "anomalyAlertingConfigurationId": "44444444-4444-4444-4444-000000000001",
      "name": "alerting configuration name",
      "crossMetricsOperator": "AND",
      "hookIds": [
        "00000000-0000-0000-0000-000000000001"
      ],
      "metricAlertingConfigurations": [
        {
          "anomalyDetectionConfigurationId": "33333333-3333-3333-3333-000000000001",
          "anomalyScopeType": "All",
          "negationOperation": false,
          "severityFilter": {
            "minAlertSeverity": "Medium",
            "maxAlertSeverity": "High"
          },
          "snoozeFilter": {
            "autoSnooze": 0,
            "snoozeScope": "Series",
            "onlyForSuccessive": true
          }
        },
        {
          "anomalyDetectionConfigurationId": "33333333-3333-3333-3333-000000000002",
          "anomalyScopeType": "Dimension",
          "negationOperation": false,
          "dimensionAnomalyScope": {
            "dimension": {
              "city": "Beijing"
            }
          },
          "severityFilter": {
            "minAlertSeverity": "Low",
            "maxAlertSeverity": "High"
          },
          "snoozeFilter": {
            "autoSnooze": 0,
            "snoozeScope": "Series",
            "onlyForSuccessive": true
          },
          "valueFilter": {
            "lower": 0.0,
            "upper": 1000.0,
            "direction": "Both",
            "triggerForMissing": false
          }
        }
      ]
    }
  ]
}
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        }
      }
    },
    "/enrichment/anomalyDetection/configurations/{configurationId}/series/query": {
      "post": {
        "tags": [
          "AnomalyDetection"
        ],
        "summary": "Query series enriched by anomaly detection",
        "operationId": "getSeriesByAnomalyDetectionConfiguration",
        "parameters": [
          {
            "name": "configurationId",
            "in": "path",
            "description": "anomaly detection configuration unique id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "anomaly detection configuration unique id",
              "format": "uuid",
              "example": "33333333-3333-3333-3333-000000000001"
            }
          }
        ],
        "requestBody": {
          "description": "query series detection result request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DetectionSeriesQuery"
              },
              "example": {
  "startTime": "2020-01-01T00:00:00Z",
  "endTime": "2020-02-01T00:00:00Z",
  "series": [
    {
      "dimension": {
        "category": "Jewelry",
        "city": "Beijing"
      }
    }
  ]
}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeriesResultList"
                },
                "example": {
  "value": [
    {
      "series": {
        "dimension": {
          "category": "Jewelry",
          "city": "Beijing"
        }
      },
      "timestampList": [
        "2020-01-01T00:00:00Z"
      ],
      "valueList": [
        108.3
      ],
      "isAnomalyList": [
        false
      ],
      "trendChangeList": [
        false
      ],
      "periodList": [
        0
      ],
      "expectedValueList": [
        108.0
      ],
      "lowerBoundaryList": [
        100.1
      ],
      "upperBoundaryList": [
        112.8
      ]
    }
  ]
}
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        }
      }
    },
    "/enrichment/anomalyDetection/configurations/{configurationId}/anomalies/query": {
      "post": {
        "tags": [
          "AnomalyDetection"
        ],
        "summary": "Query anomalies under anomaly detection configuration",
        "operationId": "getAnomaliesByAnomalyDetectionConfiguration",
        "parameters": [
          {
            "name": "configurationId",
            "in": "path",
            "description": "anomaly detection configuration unique id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "anomaly detection configuration unique id",
              "format": "uuid",
              "example": "33333333-3333-3333-3333-000000000001"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "for paging, skipped number",
              "format": "int32"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "for paging, item number in response",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "query detection result request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DetectionResultQuery"
              },
              "example": {
  "startTime": "2020-01-01T00:00:00Z",
  "endTime": "2020-02-01T00:00:00Z",
  "filter": {
    "dimensionFilter": [
      {
        "dimension": {
          "city": "Beijing"
        }
      }
    ],
    "severityFilter": {
      "min": "Low",
      "max": "High"
    }
  }
}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnomalyResultList"
                },
                "example": {
  "value": [
    {
      "metricId": "22222222-2222-2222-2222-000000000001",
      "anomalyDetectionConfigurationId": "33333333-3333-3333-3333-000000000001",
      "timestamp": "2020-01-01T00:00:00Z",
      "createdTime": "2020-07-02T01:01:49Z",
      "modifiedTime": "2020-07-02T01:01:49Z",
      "dimension": {
        "category": "__SUM__",
        "city": "Beijing"
      },
      "property": {
        "anomalySeverity": "High",
        "anomalyStatus": "Active"
      }
    }
  ]
}
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@nextLink"
        }
      }
    },
    "/enrichment/anomalyDetection/configurations/{configurationId}/anomalies/dimension/query": {
      "post": {
        "tags": [
          "AnomalyDetection"
        ],
        "summary": "Query dimension values of anomalies",
        "operationId": "getDimensionOfAnomaliesByAnomalyDetectionConfiguration",
        "parameters": [
          {
            "name": "configurationId",
            "in": "path",
            "description": "anomaly detection configuration unique id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "anomaly detection configuration unique id",
              "format": "uuid",
              "example": "33333333-3333-3333-3333-000000000001"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "for paging, skipped number",
              "format": "int32"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "for paging, item number in response",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "query dimension values request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnomalyDimensionQuery"
              },
              "example": {
  "startTime": "2020-01-01T00:00:00Z",
  "endTime": "2020-02-01T00:00:00Z",
  "dimensionName": "category",
  "dimensionFilter": {
    "dimension": {
      "city": "Beijing"
    }
  }
}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnomalyDimensionList"
                },
                "example": {
  "value": [
    "Jewelry"
  ]
}
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@nextLink"
        }
      }
    },
    "/enrichment/anomalyDetection/configurations/{configurationId}/incidents/query": {
      "post": {
        "tags": [
          "AnomalyDetection"
        ],
        "summary": "Query incidents under anomaly detection configuration",
        "operationId": "getIncidentsByAnomalyDetectionConfiguration",
        "parameters": [
          {
            "name": "configurationId",
            "in": "path",
            "description": "anomaly detection configuration unique id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "anomaly detection configuration unique id",
              "format": "uuid",
              "example": "33333333-3333-3333-3333-000000000001"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "for paging, skipped number",
              "format": "int32"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "for paging, item number in response",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "query detection result request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DetectionResultQuery"
              },
              "example": {
  "startTime": "2020-01-01T00:00:00Z",
  "endTime": "2020-02-01T00:00:00Z",
  "filter": {
    "dimensionFilter": [
      {
        "dimension": {
          "city": "Beijing"
        }
      }
    ],
    "severityFilter": {
      "min": "Low",
      "max": "High"
    }
  }
}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentResultList"
                },
                "example": {
  "value": [
    {
      "metricId": "22222222-2222-2222-2222-000000000001",
      "anomalyDetectionConfigurationId": "33333333-3333-3333-3333-000000000001",
      "incidentId": "iiiiiiiiiiii",
      "startTime": "2020-01-01T00:00:00Z",
      "lastTime": "2020-02-01T00:00:00Z",
      "rootNode": {
        "dimension": {
          "category": "__SUM__",
          "city": "Beijing"
        }
      },
      "property": {
        "maxSeverity": "High",
        "incidentStatus": "Active"
      }
    }
  ]
}
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@nextLink"
        }
      }
    },
    "/enrichment/anomalyDetection/configurations/{configurationId}/incidents/{incidentId}/rootCause": {
      "get": {
        "tags": [
          "AnomalyDetection"
        ],
        "summary": "Query root cause for incident",
        "operationId": "getRootCauseOfIncidentByAnomalyDetectionConfiguration",
        "parameters": [
          {
            "name": "configurationId",
            "in": "path",
            "description": "anomaly detection configuration unique id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "anomaly detection configuration unique id",
              "format": "uuid",
              "example": "33333333-3333-3333-3333-000000000001"
            }
          },
          {
            "name": "incidentId",
            "in": "path",
            "description": "incident id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "incident id",
              "nullable": true,
              "example": "iiiiiiiiiiii"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RootCauseList"
                },
                "example": {
  "value": [
    {
      "rootCause": {
        "dimension": {
          "city": "Beijing"
        }
      },
      "path": [
        "city"
      ],
      "score": 0.67,
      "description": "city = Beijing contributes the most to this anomaly."
    }
  ]
}
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        }
      }
    },
    "/dataFeeds": {
      "get": {
        "tags": [
          "DataFeed"
        ],
        "summary": "List all data feeds",
        "operationId": "listDataFeeds",
        "parameters": [
          {
            "name": "dataFeedName",
            "in": "query",
            "description": "filter data feed by its name",
            "schema": {
              "type": "string",
              "description": "filter data feed by its name",
              "nullable": true,
              "example": "name_prefix"
            }
          },
          {
            "name": "dataSourceType",
            "in": "query",
            "description": "filter data feed by its source type",
            "schema": {
              "$ref": "#/components/schemas/DataSourceType"
            }
          },
          {
            "name": "granularityName",
            "in": "query",
            "description": "filter data feed by its granularity",
            "schema": {
              "$ref": "#/components/schemas/Granularity"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "filter data feed by its status",
            "schema": {
              "$ref": "#/components/schemas/EntityStatus"
            }
          },
          {
            "name": "creator",
            "in": "query",
            "description": "filter data feed by its creator",
            "schema": {
              "type": "string",
              "description": "filter data feed by its creator",
              "nullable": true,
              "example": "demo@microsoft.com"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "for paging, skipped number",
              "format": "int32"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "for paging, item number in response",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataFeedList"
                },
                "example": {
  "@nextLink": "https://localhost/dataFeeds?$skip=1&$top=1",
  "value": [
    {
      "dataSourceParameter": {
        "connectionString": "Server=your_sql_server,1433;Initial Catalog=your_database;Persist Security Info=False;User ID=your_user;Password=your_password;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;",
        "query": "select * from your_table where timestamp = @StartTime"
      },
      "dataFeedId": "11111111-1111-1111-1111-000000000001",
      "dataFeedName": "Sample - cost/revenue - city/category",
      "dataFeedDescription": "This is a sample data feed.",
      "granularityName": "Daily",
      "metrics": [
        {
          "metricId": "22222222-2222-2222-2222-000000000001",
          "metricName": "cost",
          "metricDisplayName": "cost"
        },
        {
          "metricId": "22222222-2222-2222-2222-000000000002",
          "metricName": "revenue",
          "metricDisplayName": "revenue"
        }
      ],
      "dimension": [
        {
          "dimensionName": "category",
          "dimensionDisplayName": "category"
        },
        {
          "dimensionName": "city",
          "dimensionDisplayName": "city"
        }
      ],
      "dataStartFrom": "2020-01-01T00:00:00Z",
      "dataSourceType": "SqlServer",
      "timestampColumn": "timestamp",
      "startOffsetInSeconds": 86400,
      "maxConcurrency": 5,
      "minRetryIntervalInSeconds": 3600,
      "stopRetryAfterInSeconds": 604800,
      "needRollup": "NeedRollup",
      "rollUpMethod": "Sum",
      "allUpIdentification": "__SUM__",
      "fillMissingPointType": "SmartFilling",
      "viewMode": "Private",
      "admins": [
        "admin@company.example"
      ],
      "viewers": [],
      "isAdmin": true,
      "creator": "admin@company.example",
      "status": "Active",
      "createdTime": "2020-03-01T00:00:00Z"
    }
  ]
}
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@nextLink"
        }
      },
      "post": {
        "tags": [
          "DataFeed"
        ],
        "summary": "Create a new data feed",
        "operationId": "createDataFeed",
        "requestBody": {
          "description": "parameters to create a data feed",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AzureApplicationInsightsDataFeed"
                  },
                  {
                    "$ref": "#/components/schemas/AzureBlobDataFeed"
                  },
                  {
                    "$ref": "#/components/schemas/AzureCosmosDBDataFeed"
                  },
                  {
                    "$ref": "#/components/schemas/AzureDataExplorerDataFeed"
                  },
                  {
                    "$ref": "#/components/schemas/AzureEventHubsDataFeed"
                  },
                  {
                    "$ref": "#/components/schemas/AzureTableDataFeed"
                  },
                  {
                    "$ref": "#/components/schemas/HttpRequestDataFeed"
                  },
                  {
                    "$ref": "#/components/schemas/InfluxDBDataFeed"
                  },
                  {
                    "$ref": "#/components/schemas/MySqlDataFeed"
                  },
                  {
                    "$ref": "#/components/schemas/PostgreSqlDataFeed"
                  },
                  {
                    "$ref": "#/components/schemas/SQLServerDataFeed"
                  },
                  {
                    "$ref": "#/components/schemas/MongoDBDataFeed"
                  }
                ],
                "description": "parameters to create a data feed",
                "nullable": true
              },
              "example": {
  "dataSourceParameter": {
    "connectionString": "Server=your_sql_server,1433;Initial Catalog=your_database;Persist Security Info=False;User ID=your_user;Password=your_password;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;",
    "query": "select * from your_table where timestamp = @StartTime"
  },
  "dataFeedName": "Sample - cost/revenue - city/category",
  "dataFeedDescription": "This is a sample data feed.",
  "granularityName": "Daily",
  "metrics": [
    {
      "metricName": "cost",
      "metricDisplayName": "cost"
    },
    {
      "metricName": "revenue",
      "metricDisplayName": "revenue"
    }
  ],
  "dimension": [
    {
      "dimensionName": "category",
      "dimensionDisplayName": "category"
    },
    {
      "dimensionName": "city",
      "dimensionDisplayName": "city"
    }
  ],
  "dataStartFrom": "2020-01-01T00:00:00Z",
  "dataSourceType": "SqlServer",
  "timestampColumn": "timestamp",
  "startOffsetInSeconds": 86400,
  "maxConcurrency": 5,
  "minRetryIntervalInSeconds": 3600,
  "stopRetryAfterInSeconds": 604800,
  "needRollup": "NeedRollup",
  "rollUpMethod": "Sum",
  "allUpIdentification": "__SUM__",
  "fillMissingPointType": "SmartFilling",
  "viewMode": "Private",
  "isAdmin": false
}
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "headers": {
              "Location": {
                "description": "Location of the newly created resource.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        }
      }
    },
    "/dataFeeds/{dataFeedId}": {
      "get": {
        "tags": [
          "DataFeed"
        ],
        "summary": "Get a data feed by its id",
        "operationId": "getDataFeedById",
        "parameters": [
          {
            "name": "dataFeedId",
            "in": "path",
            "description": "The data feed unique id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The data feed unique id",
              "format": "uuid",
              "example": "01234567-8901-2345-6789-012345678901"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AzureApplicationInsightsDataFeed"
                    },
                    {
                      "$ref": "#/components/schemas/AzureBlobDataFeed"
                    },
                    {
                      "$ref": "#/components/schemas/AzureCosmosDBDataFeed"
                    },
                    {
                      "$ref": "#/components/schemas/AzureDataExplorerDataFeed"
                    },
                    {
                      "$ref": "#/components/schemas/AzureEventHubsDataFeed"
                    },
                    {
                      "$ref": "#/components/schemas/AzureTableDataFeed"
                    },
                    {
                      "$ref": "#/components/schemas/HttpRequestDataFeed"
                    },
                    {
                      "$ref": "#/components/schemas/InfluxDBDataFeed"
                    },
                    {
                      "$ref": "#/components/schemas/MySqlDataFeed"
                    },
                    {
                      "$ref": "#/components/schemas/PostgreSqlDataFeed"
                    },
                    {
                      "$ref": "#/components/schemas/SQLServerDataFeed"
                    },
                    {
                      "$ref": "#/components/schemas/MongoDBDataFeed"
                    }
                  ]
                },
                "example": {
  "dataSourceParameter": {
    "connectionString": "Server=your_sql_server,1433;Initial Catalog=your_database;Persist Security Info=False;User ID=your_user;Password=your_password;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;",
    "query": "select * from your_table where timestamp = @StartTime"
  },
  "dataFeedId": "11111111-1111-1111-1111-000000000001",
  "dataFeedName": "Sample - cost/revenue - city/category",
  "dataFeedDescription": "This is a sample data feed.",
  "granularityName": "Daily",
  "metrics": [
    {
      "metricId": "22222222-2222-2222-2222-000000000001",
      "metricName": "cost",
      "metricDisplayName": "cost"
    },
    {
      "metricId": "22222222-2222-2222-2222-000000000002",
      "metricName": "revenue",
      "metricDisplayName": "revenue"
    }
  ],
  "dimension": [
    {
      "dimensionName": "category",
      "dimensionDisplayName": "category"
    },
    {
      "dimensionName": "city",
      "dimensionDisplayName": "city"
    }
  ],
  "dataStartFrom": "2020-01-01T00:00:00Z",
  "dataSourceType": "SqlServer",
  "timestampColumn": "timestamp",
  "startOffsetInSeconds": 86400,
  "maxConcurrency": 5,
  "minRetryIntervalInSeconds": 3600,
  "stopRetryAfterInSeconds": 604800,
  "needRollup": "NeedRollup",
  "rollUpMethod": "Sum",
  "allUpIdentification": "__SUM__",
  "fillMissingPointType": "SmartFilling",
  "viewMode": "Private",
  "admins": [
    "admin@company.example"
  ],
  "viewers": [],
  "isAdmin": true,
  "creator": "admin@company.example",
  "status": "Active",
  "createdTime": "2020-03-01T00:00:00Z"
}
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "DataFeed"
        ],
        "summary": "Update a data feed",
        "operationId": "updateDataFeed",
        "parameters": [
          {
            "name": "dataFeedId",
            "in": "path",
            "description": "The data feed unique id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The data feed unique id",
              "format": "uuid",
              "example": "01234567-8901-2345-6789-012345678901"
            }
          }
        ],
        "requestBody": {
          "description": "parameters to update a data feed",
          "content": {
            "application/json-merge-patch": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AzureApplicationInsightsDataFeedPatch"
                  },
                  {
                    "$ref": "#/components/schemas/AzureBlobDataFeedPatch"
                  },
                  {
                    "$ref": "#/components/schemas/AzureCosmosDBDataFeedPatch"
                  },
                  {
                    "$ref": "#/components/schemas/AzureDataExplorerDataFeedPatch"
                  },
                  {
                    "$ref": "#/components/schemas/AzureEventHubsDataFeedPatch"
                  },
                  {
                    "$ref": "#/components/schemas/AzureTableDataFeedPatch"
                  },
                  {
                    "$ref": "#/components/schemas/HttpRequestDataFeedPatch"
                  },
                  {
                    "$ref": "#/components/schemas/InfluxDBDataFeedPatch"
                  },
                  {
                    "$ref": "#/components/schemas/MySqlDataFeedPatch"
                  },
                  {
                    "$ref": "#/components/schemas/PostgreSqlDataFeedPatch"
                  },
                  {
                    "$ref": "#/components/schemas/SQLServerDataFeedPatch"
                  },
                  {
                    "$ref": "#/components/schemas/MongoDBDataFeedPatch"
                  }
                ],
                "description": "parameters to update a data feed",
                "nullable": true
              },
              "example": {
  "dataFeedName": "Sample - cost/revenue - city/category (modified)",
  "viewers": [
    "viewer@company.example"
  ]
}
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DataFeed"
        ],
        "summary": "Delete a data feed",
        "operationId": "deleteDataFeed",
        "parameters": [
          {
            "name": "dataFeedId",
            "in": "path",
            "description": "The data feed unique id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The data feed unique id",
              "format": "uuid",
              "example": "01234567-8901-2345-6789-012345678901"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource is deleted successfully or does not exist."
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        }
      }
    },
    "/feedback/metric/{feedbackId}": {
      "get": {
        "tags": [
          "Feedback"
        ],
        "summary": "Get a metric feedback by its id",
        "operationId": "getMetricFeedback",
        "parameters": [
          {
            "name": "feedbackId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "format": "uuid",
              "example": "99998888-7777-6666-5555-444433332222"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AnomalyFeedback"
                    },
                    {
                      "$ref": "#/components/schemas/ChangePointFeedback"
                    },
                    {
                      "$ref": "#/components/schemas/CommentFeedback"
                    },
                    {
                      "$ref": "#/components/schemas/PeriodFeedback"
                    }
                  ]
                },
                "example": {
  "startTime": "2020-01-01T00:00:00Z",
  "endTime": "2020-01-01T00:00:00Z",
  "value": {
    "anomalyValue": "NotAnomaly"
  },
  "sourceInfo": {
    "anomalyDetectionConfiguration": {
      "anomalyDetectionConfigurationId": "33333333-3333-3333-3333-000000000001",
      "name": "Anomaly detection configuration name",
      "description": "Anomaly detection configuration description",
      "metricId": "22222222-2222-2222-2222-000000000001",
      "wholeMetricConfiguration": {
        "conditionOperator": "AND",
        "smartDetectionCondition": {
          "sensitivity": 91.0,
          "anomalyDetectorDirection": "Both",
          "suppressCondition": {
            "minNumber": 1,
            "minRatio": 100.0
          }
        },
        "hardThresholdCondition": {
          "lowerBound": 1.0,
          "upperBound": 100.0,
          "anomalyDetectorDirection": "Both",
          "suppressCondition": {
            "minNumber": 1,
            "minRatio": 100.0
          }
        },
        "changeThresholdCondition": {
          "changePercentage": 5.0,
          "shiftPoint": 1,
          "withinRange": false,
          "anomalyDetectorDirection": "Both",
          "suppressCondition": {
            "minNumber": 1,
            "minRatio": 100.0
          }
        }
      },
      "dimensionGroupOverrideConfigurations": [
        {
          "group": {
            "dimension": {
              "city": "Beijing"
            }
          },
          "conditionOperator": "AND",
          "smartDetectionCondition": {
            "sensitivity": 91.0,
            "anomalyDetectorDirection": "Both",
            "suppressCondition": {
              "minNumber": 1,
              "minRatio": 100.0
            }
          },
          "hardThresholdCondition": {
            "lowerBound": 1.0,
            "upperBound": 100.0,
            "anomalyDetectorDirection": "Both",
            "suppressCondition": {
              "minNumber": 1,
              "minRatio": 100.0
            }
          },
          "changeThresholdCondition": {
            "changePercentage": 5.0,
            "shiftPoint": 1,
            "withinRange": false,
            "anomalyDetectorDirection": "Both",
            "suppressCondition": {
              "minNumber": 1,
              "minRatio": 100.0
            }
          }
        }
      ],
      "seriesOverrideConfigurations": [
        {
          "series": {
            "dimension": {
              "category": "Jewelry",
              "city": "Beijing"
            }
          },
          "conditionOperator": "AND",
          "smartDetectionCondition": {
            "sensitivity": 91.0,
            "anomalyDetectorDirection": "Both",
            "suppressCondition": {
              "minNumber": 1,
              "minRatio": 100.0
            }
          },
          "hardThresholdCondition": {
            "lowerBound": 1.0,
            "upperBound": 100.0,
            "anomalyDetectorDirection": "Both",
            "suppressCondition": {
              "minNumber": 1,
              "minRatio": 100.0
            }
          },
          "changeThresholdCondition": {
            "changePercentage": 5.0,
            "shiftPoint": 1,
            "withinRange": false,
            "anomalyDetectorDirection": "Both",
            "suppressCondition": {
              "minNumber": 1,
              "minRatio": 100.0
            }
          }
        }
      ]
    }
  },
  "feedbackId": "99999999-9999-9999-9999-000000000001",
  "createdTime": "2020-03-01T00:00:00Z",
  "userPrincipal": "viewer@company.example",
  "metricId": "22222222-2222-2222-2222-000000000001",
  "dimensionFilter": {
    "dimension": {
      "city": "Beijing"
    }
  },
  "feedbackType": "Anomaly"
}
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        }
      }
    },
    "/feedback/metric/query": {
      "post": {
        "tags": [
          "Feedback"
        ],
        "summary": "List feedback on the given metric",
        "operationId": "listMetricFeedbacks",
        "parameters": [
          {
            "name": "$skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "for paging, skipped number",
              "format": "int32"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "for paging, item number in response",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "metric feedback filter",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AnomalyFeedbackFilter"
                  },
                  {
                    "$ref": "#/components/schemas/ChangePointFeedbackFilter"
                  },
                  {
                    "$ref": "#/components/schemas/CommentFeedbackFilter"
                  },
                  {
                    "$ref": "#/components/schemas/PeriodFeedbackFilter"
                  }
                ],
                "description": "metric feedback filter",
                "nullable": true
              },
              "example": {
  "valueFilter": {
    "anomalyValue": "NotAnomaly"
  },
  "metricId": "22222222-2222-2222-2222-000000000001",
  "feedbackType": "Anomaly",
  "startTime": "2020-01-01T00:00:00Z",
  "endTime": "2020-01-01T00:00:00Z",
  "userPrincipal": "viewer@company.example"
}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricFeedbackList"
                },
                "example": {
  "@nextLink": "https://localhost/feedback?$skip=1&$top=1",
  "value": [
    {
      "startTime": "2020-01-01T00:00:00Z",
      "endTime": "2020-01-01T00:00:00Z",
      "value": {
        "anomalyValue": "NotAnomaly"
      },
      "sourceInfo": {
        "anomalyDetectionConfiguration": {
          "anomalyDetectionConfigurationId": "33333333-3333-3333-3333-000000000001",
          "name": "Anomaly detection configuration name",
          "description": "Anomaly detection configuration description",
          "metricId": "22222222-2222-2222-2222-000000000001",
          "wholeMetricConfiguration": {
            "conditionOperator": "AND",
            "smartDetectionCondition": {
              "sensitivity": 91.0,
              "anomalyDetectorDirection": "Both",
              "suppressCondition": {
                "minNumber": 1,
                "minRatio": 100.0
              }
            },
            "hardThresholdCondition": {
              "lowerBound": 1.0,
              "upperBound": 100.0,
              "anomalyDetectorDirection": "Both",
              "suppressCondition": {
                "minNumber": 1,
                "minRatio": 100.0
              }
            },
            "changeThresholdCondition": {
              "changePercentage": 5.0,
              "shiftPoint": 1,
              "withinRange": false,
              "anomalyDetectorDirection": "Both",
              "suppressCondition": {
                "minNumber": 1,
                "minRatio": 100.0
              }
            }
          },
          "dimensionGroupOverrideConfigurations": [
            {
              "group": {
                "dimension": {
                  "city": "Beijing"
                }
              },
              "conditionOperator": "AND",
              "smartDetectionCondition": {
                "sensitivity": 91.0,
                "anomalyDetectorDirection": "Both",
                "suppressCondition": {
                  "minNumber": 1,
                  "minRatio": 100.0
                }
              },
              "hardThresholdCondition": {
                "lowerBound": 1.0,
                "upperBound": 100.0,
                "anomalyDetectorDirection": "Both",
                "suppressCondition": {
                  "minNumber": 1,
                  "minRatio": 100.0
                }
              },
              "changeThresholdCondition": {
                "changePercentage": 5.0,
                "shiftPoint": 1,
                "withinRange": false,
                "anomalyDetectorDirection": "Both",
                "suppressCondition": {
                  "minNumber": 1,
                  "minRatio": 100.0
                }
              }
            }
          ],
          "seriesOverrideConfigurations": [
            {
              "series": {
                "dimension": {
                  "category": "Jewelry",
                  "city": "Beijing"
                }
              },
              "conditionOperator": "AND",
              "smartDetectionCondition": {
                "sensitivity": 91.0,
                "anomalyDetectorDirection": "Both",
                "suppressCondition": {
                  "minNumber": 1,
                  "minRatio": 100.0
                }
              },
              "hardThresholdCondition": {
                "lowerBound": 1.0,
                "upperBound": 100.0,
                "anomalyDetectorDirection": "Both",
                "suppressCondition": {
                  "minNumber": 1,
                  "minRatio": 100.0
                }
              },
              "changeThresholdCondition": {
                "changePercentage": 5.0,
                "shiftPoint": 1,
                "withinRange": false,
                "anomalyDetectorDirection": "Both",
                "suppressCondition": {
                  "minNumber": 1,
                  "minRatio": 100.0
                }
              }
            }
          ]
        }
      },
      "feedbackId": "99999999-9999-9999-9999-000000000001",
      "createdTime": "2020-03-01T00:00:00Z",
      "userPrincipal": "viewer@company.example",
      "metricId": "22222222-2222-2222-2222-000000000001",
      "dimensionFilter": {
        "dimension": {
          "city": "Beijing"
        }
      },
      "feedbackType": "Anomaly"
    }
  ]
}
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@nextLink"
        }
      }
    },
    "/feedback/metric": {
      "post": {
        "tags": [
          "Feedback"
        ],
        "summary": "Create a new metric feedback",
        "operationId": "createMetricFeedback",
        "requestBody": {
          "description": "metric feedback",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AnomalyFeedback"
                  },
                  {
                    "$ref": "#/components/schemas/ChangePointFeedback"
                  },
                  {
                    "$ref": "#/components/schemas/CommentFeedback"
                  },
                  {
                    "$ref": "#/components/schemas/PeriodFeedback"
                  }
                ],
                "description": "metric feedback",
                "nullable": true
              },
              "example": {
  "startTime": "2020-01-01T00:00:00Z",
  "endTime": "2020-01-01T00:00:00Z",
  "value": {
    "anomalyValue": "NotAnomaly"
  },
  "sourceInfo": {
    "anomalyDetectionConfiguration": {
      "anomalyDetectionConfigurationId": "33333333-3333-3333-3333-000000000001",
      "name": "Anomaly detection configuration name",
      "description": "Anomaly detection configuration description",
      "metricId": "22222222-2222-2222-2222-000000000001",
      "wholeMetricConfiguration": {
        "conditionOperator": "AND",
        "smartDetectionCondition": {
          "sensitivity": 91.0,
          "anomalyDetectorDirection": "Both",
          "suppressCondition": {
            "minNumber": 1,
            "minRatio": 100.0
          }
        },
        "hardThresholdCondition": {
          "lowerBound": 1.0,
          "upperBound": 100.0,
          "anomalyDetectorDirection": "Both",
          "suppressCondition": {
            "minNumber": 1,
            "minRatio": 100.0
          }
        },
        "changeThresholdCondition": {
          "changePercentage": 5.0,
          "shiftPoint": 1,
          "withinRange": false,
          "anomalyDetectorDirection": "Both",
          "suppressCondition": {
            "minNumber": 1,
            "minRatio": 100.0
          }
        }
      },
      "dimensionGroupOverrideConfigurations": [
        {
          "group": {
            "dimension": {
              "city": "Beijing"
            }
          },
          "conditionOperator": "AND",
          "smartDetectionCondition": {
            "sensitivity": 91.0,
            "anomalyDetectorDirection": "Both",
            "suppressCondition": {
              "minNumber": 1,
              "minRatio": 100.0
            }
          },
          "hardThresholdCondition": {
            "lowerBound": 1.0,
            "upperBound": 100.0,
            "anomalyDetectorDirection": "Both",
            "suppressCondition": {
              "minNumber": 1,
              "minRatio": 100.0
            }
          },
          "changeThresholdCondition": {
            "changePercentage": 5.0,
            "shiftPoint": 1,
            "withinRange": false,
            "anomalyDetectorDirection": "Both",
            "suppressCondition": {
              "minNumber": 1,
              "minRatio": 100.0
            }
          }
        }
      ],
      "seriesOverrideConfigurations": [
        {
          "series": {
            "dimension": {
              "category": "Jewelry",
              "city": "Beijing"
            }
          },
          "conditionOperator": "AND",
          "smartDetectionCondition": {
            "sensitivity": 91.0,
            "anomalyDetectorDirection": "Both",
            "suppressCondition": {
              "minNumber": 1,
              "minRatio": 100.0
            }
          },
          "hardThresholdCondition": {
            "lowerBound": 1.0,
            "upperBound": 100.0,
            "anomalyDetectorDirection": "Both",
            "suppressCondition": {
              "minNumber": 1,
              "minRatio": 100.0
            }
          },
          "changeThresholdCondition": {
            "changePercentage": 5.0,
            "shiftPoint": 1,
            "withinRange": false,
            "anomalyDetectorDirection": "Both",
            "suppressCondition": {
              "minNumber": 1,
              "minRatio": 100.0
            }
          }
        }
      ]
    }
  },
  "metricId": "22222222-2222-2222-2222-000000000001",
  "dimensionFilter": {
    "dimension": {
      "city": "Beijing"
    }
  },
  "feedbackType": "Anomaly"
}
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "headers": {
              "Location": {
                "description": "Location of the newly created resource.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        }
      }
    },
    "/hooks": {
      "get": {
        "tags": [
          "Hook"
        ],
        "summary": "List all hooks",
        "operationId": "listHooks",
        "parameters": [
          {
            "name": "hookName",
            "in": "query",
            "description": "filter hook by its name",
            "schema": {
              "type": "string",
              "description": "filter hook by its name",
              "nullable": true,
              "example": "name_prefix"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "for paging, skipped number",
              "format": "int32"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "for paging, item number in response",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HookList"
                },
                "example": {
  "@nextLink": "https://localhost/hooks?$skip=1&$top=1",
  "value": [
    {
      "hookParameter": {
        "endpoint": "https://localhost/demo/post"
      },
      "hookId": "00000000-0000-0000-0000-000000000001",
      "hookName": "A webhook",
      "hookType": "Webhook",
      "description": "This is a webhook.",
      "externalLink": "",
      "admins": [
        "admin@company.example"
      ]
    }
  ]
}
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@nextLink"
        }
      },
      "post": {
        "tags": [
          "Hook"
        ],
        "summary": "Create a new hook",
        "operationId": "createHook",
        "requestBody": {
          "description": "Create hook request",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/EmailHookInfo"
                  },
                  {
                    "$ref": "#/components/schemas/WebhookHookInfo"
                  }
                ],
                "description": "Create hook request",
                "nullable": true
              },
              "example": {
  "hookParameter": {
    "endpoint": "https://localhost/demo/post"
  },
  "hookName": "A webhook",
  "hookType": "Webhook",
  "description": "This is a webhook.",
  "externalLink": ""
}
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "headers": {
              "Location": {
                "description": "Location of the newly created resource.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        }
      }
    },
    "/hooks/{hookId}": {
      "get": {
        "tags": [
          "Hook"
        ],
        "summary": "Get a hook by its id",
        "operationId": "getHook",
        "parameters": [
          {
            "name": "hookId",
            "in": "path",
            "description": "Hook unique ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Hook unique ID",
              "format": "uuid",
              "example": "01234567-8901-2345-6789-012345678901"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/EmailHookInfo"
                    },
                    {
                      "$ref": "#/components/schemas/WebhookHookInfo"
                    }
                  ]
                },
                "example": {
  "hookParameter": {
    "endpoint": "https://localhost/demo/post"
  },
  "hookId": "00000000-0000-0000-0000-000000000001",
  "hookName": "A webhook",
  "hookType": "Webhook",
  "description": "This is a webhook.",
  "externalLink": "",
  "admins": [
    "admin@company.example"
  ]
}
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Hook"
        ],
        "summary": "Update a hook",
        "operationId": "updateHook",
        "parameters": [
          {
            "name": "hookId",
            "in": "path",
            "description": "Hook unique ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Hook unique ID",
              "format": "uuid",
              "example": "01234567-8901-2345-6789-012345678901"
            }
          }
        ],
        "requestBody": {
          "description": "Update hook request",
          "content": {
            "application/json-merge-patch": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/EmailHookInfoPatch"
                  },
                  {
                    "$ref": "#/components/schemas/WebhookHookInfoPatch"
                  }
                ],
                "description": "Update hook request",
                "nullable": true
              },
              "example": {
  "hookName": "A webhook (modified)",
  "description": "This is a webhook. (modified)"
}
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Hook"
        ],
        "summary": "Delete a hook",
        "operationId": "deleteHook",
        "parameters": [
          {
            "name": "hookId",
            "in": "path",
            "description": "Hook unique ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Hook unique ID",
              "format": "uuid",
              "example": "01234567-8901-2345-6789-012345678901"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource is deleted successfully or does not exist."
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        }
      }
    },
    "/dataFeeds/{dataFeedId}/ingestionStatus/query": {
      "post": {
        "tags": [
          "IngestionStatus"
        ],
        "summary": "Get data ingestion status by data feed",
        "operationId": "getDataFeedIngestionStatus",
        "parameters": [
          {
            "name": "dataFeedId",
            "in": "path",
            "description": "The data feed unique id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The data feed unique id",
              "format": "uuid",
              "example": "01234567-8901-2345-6789-012345678901"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "for paging, skipped number",
              "format": "int32"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "for paging, item number in response",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The query time range",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngestionStatusQueryOptions"
              },
              "example": {
  "startTime": "2020-01-01T00:00:00Z",
  "endTime": "2020-02-01T00:00:00Z"
}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngestionStatusList"
                },
                "example": {
  "@nextLink": "https://localhost/dataFeeds/01234567-8901-2345-6789-012345678901/ingestionStatus/query?$skip=2&$top=2",
  "value": [
    {
      "timestamp": "2020-01-01T00:00:00Z",
      "status": "Succeeded",
      "message": ""
    },
    {
      "timestamp": "2020-01-02T00:00:00Z",
      "status": "Succeeded",
      "message": ""
    }
  ]
}
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@nextLink"
        }
      }
    },
    "/dataFeeds/{dataFeedId}/ingestionProgress/reset": {
      "post": {
        "tags": [
          "IngestionStatus"
        ],
        "summary": "Reset data ingestion status by data feed to backfill data",
        "operationId": "resetDataFeedIngestionStatus",
        "parameters": [
          {
            "name": "dataFeedId",
            "in": "path",
            "description": "The data feed unique id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The data feed unique id",
              "format": "uuid",
              "example": "01234567-8901-2345-6789-012345678901"
            }
          }
        ],
        "requestBody": {
          "description": "The backfill time range",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngestionProgressResetOptions"
              },
              "example": {
  "startTime": "2020-01-01T00:00:00Z",
  "endTime": "2020-02-01T00:00:00Z"
}
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        }
      }
    },
    "/dataFeeds/{dataFeedId}/ingestionProgress": {
      "get": {
        "tags": [
          "IngestionStatus"
        ],
        "summary": "Get data last success ingestion job timestamp by data feed",
        "operationId": "getIngestionProgress",
        "parameters": [
          {
            "name": "dataFeedId",
            "in": "path",
            "description": "The data feed unique id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The data feed unique id",
              "format": "uuid",
              "example": "01234567-8901-2345-6789-012345678901"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataFeedIngestionProgress"
                },
                "example": {
  "latestSuccessTimestamp": "2020-01-30T00:00:00Z",
  "latestActiveTimestamp": "2020-01-31T00:00:00Z"
}
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/{metricId}/data/query": {
      "post": {
        "tags": [
          "Metric"
        ],
        "summary": "Get time series data from metric",
        "operationId": "getMetricData",
        "parameters": [
          {
            "name": "metricId",
            "in": "path",
            "description": "metric unique id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "metric unique id",
              "format": "uuid",
              "example": "22222222-2222-2222-2222-000000000001"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "for paging, skipped number",
              "format": "int32"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "for paging, item number in response",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "query time series data condition",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricDataQueryOptions"
              },
              "example": {
  "startTime": "2020-01-01T00:00:00Z",
  "endTime": "2020-02-01T00:00:00Z",
  "series": [
    {
      "category": "__SUM__",
      "city": "Beijing"
    }
  ]
}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricDataList"
                },
                "example": {
  "@nextLink": "https://localhost/metrics/11112222-3333-4444-5555-666677778888/series/data/query?$skip=1&$top=1",
  "value": [
    {
      "id": {
        "metricId": "22222222-2222-2222-2222-000000000001",
        "dimension": {
          "category": "__SUM__",
          "city": "Beijing"
        }
      },
      "timestampList": [
        "2020-01-01T00:00:00Z",
        "2020-01-02T00:00:00Z"
      ],
      "valueList": [
        2.718281828459045,
        3.141592653589793
      ]
    }
  ]
}
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@nextLink"
        }
      }
    },
    "/metrics/{metricId}/series/query": {
      "post": {
        "tags": [
          "Metric"
        ],
        "summary": "List series (dimension combinations) from metric",
        "operationId": "getMetricSeries",
        "parameters": [
          {
            "name": "metricId",
            "in": "path",
            "description": "metric unique id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "metric unique id",
              "format": "uuid",
              "example": "22222222-2222-2222-2222-000000000001"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "for paging, skipped number",
              "format": "int32"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "for paging, item number in response",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "filter to query series",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricSeriesQueryOptions"
              },
              "example": {
  "activeSince": "2020-01-01T00:00:00Z",
  "dimensionFilter": {
    "city": [
      "Beijing"
    ]
  }
}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricSeriesList"
                },
                "example": {
  "@nextLink": "https://localhost/metrics/22222222-2222-2222-2222-000000000001/series/dimension/query?$skip=2&$top=2",
  "value": [
    {
      "metricId": "22222222-2222-2222-2222-000000000001",
      "dimension": {
        "category": "__SUM__",
        "city": "Beijing"
      }
    },
    {
      "metricId": "22222222-2222-2222-2222-000000000001",
      "dimension": {
        "category": "Jewelry",
        "city": "Beijing"
      }
    }
  ]
}
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@nextLink"
        }
      }
    },
    "/metrics/{metricId}/dimension/query": {
      "post": {
        "tags": [
          "Metric"
        ],
        "summary": "List dimension from certain metric",
        "operationId": "getMetricDimension",
        "parameters": [
          {
            "name": "metricId",
            "in": "path",
            "description": "metric unique id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "metric unique id",
              "format": "uuid",
              "example": "22222222-2222-2222-2222-000000000001"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "for paging, skipped number",
              "format": "int32"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "for paging, item number in response",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "query dimension option",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricDimensionQueryOptions"
              },
              "example": {
  "dimensionName": "city"
}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricDimensionList"
                },
                "example": {
  "@nextLink": "https://localhost/metrics/22222222-2222-2222-2222-000000000001/dimension/query?$skip=2&$top=2",
  "value": [
    "__SUM__",
    "Beijing"
  ]
}
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@nextLink"
        }
      }
    },
    "/metrics/{metricId}/enrichment/anomalyDetection/configurations": {
      "get": {
        "tags": [
          "Metric"
        ],
        "summary": "Query all anomaly detection configurations for specific metric",
        "operationId": "getAnomalyDetectionConfigurationsByMetric",
        "parameters": [
          {
            "name": "metricId",
            "in": "path",
            "description": "metric unique id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "metric unique id",
              "format": "uuid",
              "example": "22222222-2222-2222-2222-000000000001"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnomalyDetectionConfigurationList"
                },
                "example": {
  "value": [
    {
      "anomalyDetectionConfigurationId": "33333333-3333-3333-3333-000000000001",
      "name": "Anomaly detection configuration name",
      "description": "Anomaly detection configuration description",
      "metricId": "22222222-2222-2222-2222-000000000001",
      "wholeMetricConfiguration": {
        "conditionOperator": "AND",
        "smartDetectionCondition": {
          "sensitivity": 91.0,
          "anomalyDetectorDirection": "Both",
          "suppressCondition": {
            "minNumber": 1,
            "minRatio": 100.0
          }
        },
        "hardThresholdCondition": {
          "lowerBound": 1.0,
          "upperBound": 100.0,
          "anomalyDetectorDirection": "Both",
          "suppressCondition": {
            "minNumber": 1,
            "minRatio": 100.0
          }
        },
        "changeThresholdCondition": {
          "changePercentage": 5.0,
          "shiftPoint": 1,
          "withinRange": false,
          "anomalyDetectorDirection": "Both",
          "suppressCondition": {
            "minNumber": 1,
            "minRatio": 100.0
          }
        }
      },
      "dimensionGroupOverrideConfigurations": [
        {
          "group": {
            "dimension": {
              "city": "Beijing"
            }
          },
          "conditionOperator": "AND",
          "smartDetectionCondition": {
            "sensitivity": 91.0,
            "anomalyDetectorDirection": "Both",
            "suppressCondition": {
              "minNumber": 1,
              "minRatio": 100.0
            }
          },
          "hardThresholdCondition": {
            "lowerBound": 1.0,
            "upperBound": 100.0,
            "anomalyDetectorDirection": "Both",
            "suppressCondition": {
              "minNumber": 1,
              "minRatio": 100.0
            }
          },
          "changeThresholdCondition": {
            "changePercentage": 5.0,
            "shiftPoint": 1,
            "withinRange": false,
            "anomalyDetectorDirection": "Both",
            "suppressCondition": {
              "minNumber": 1,
              "minRatio": 100.0
            }
          }
        }
      ],
      "seriesOverrideConfigurations": [
        {
          "series": {
            "dimension": {
              "category": "Jewelry",
              "city": "Beijing"
            }
          },
          "conditionOperator": "AND",
          "smartDetectionCondition": {
            "sensitivity": 91.0,
            "anomalyDetectorDirection": "Both",
            "suppressCondition": {
              "minNumber": 1,
              "minRatio": 100.0
            }
          },
          "hardThresholdCondition": {
            "lowerBound": 1.0,
            "upperBound": 100.0,
            "anomalyDetectorDirection": "Both",
            "suppressCondition": {
              "minNumber": 1,
              "minRatio": 100.0
            }
          },
          "changeThresholdCondition": {
            "changePercentage": 5.0,
            "shiftPoint": 1,
            "withinRange": false,
            "anomalyDetectorDirection": "Both",
            "suppressCondition": {
              "minNumber": 1,
              "minRatio": 100.0
            }
          }
        }
      ]
    }
  ]
}
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/{metricId}/status/enrichment/anomalyDetection/query": {
      "post": {
        "tags": [
          "Metric"
        ],
        "summary": "Query anomaly detection status",
        "operationId": "getEnrichmentStatusByMetric",
        "parameters": [
          {
            "name": "metricId",
            "in": "path",
            "description": "metric unique id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "metric unique id",
              "format": "uuid",
              "example": "22222222-2222-2222-2222-000000000001"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "for paging, skipped number",
              "format": "int32"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "for paging, item number in response",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "query options",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnrichmentStatusQueryOption"
              },
              "example": {
  "startTime": "2020-01-01T00:00:00Z",
  "endTime": "2020-02-01T00:00:00Z"
}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrichmentStatusList"
                },
                "example": {
  "@nextLink": "https://localhost/metrics/22222222-2222-2222-2222-000000000001/status/enrichment/anomalyDetection/query?$skip=2&$top=2",
  "value": [
    {
      "timestamp": "2020-01-01T00:00:00Z",
      "status": "Succeeded",
      "message": ""
    },
    {
      "timestamp": "2020-01-02T00:00:00Z",
      "status": "Succeeded",
      "message": ""
    }
  ]
}
              }
            }
          },
          "default": {
            "description": "Client error or server error (4xx or 5xx)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@nextLink"
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AnomalyAlertingConfigurationLogicType": {
        "enum": [
          "AND",
          "OR",
          "XOR"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "AnomalyAlertingConfigurationLogicType",
          "modelAsString": true
        }
      },
      "AnomalyScope": {
        "enum": [
          "All",
          "Dimension",
          "TopN"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "AnomalyScope",
          "modelAsString": true
        }
      },
      "DimensionGroupIdentity": {
        "required": [
          "dimension"
        ],
        "type": "object",
        "properties": {
          "dimension": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "dimension specified for series group"
          }
        },
        "additionalProperties": false
      },
      "TopNGroupScope": {
        "required": [
          "minTopCount",
          "period",
          "top"
        ],
        "type": "object",
        "properties": {
          "top": {
            "type": "integer",
            "description": "top N, value range : [1, +∞)",
            "format": "int32"
          },
          "period": {
            "type": "integer",
            "description": "point count used to look back, value range : [1, +∞)",
            "format": "int32"
          },
          "minTopCount": {
            "type": "integer",
            "description": "min count should be in top N, value range : [1, +∞)\r\n\r\nshould be less than or equal to period",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Severity": {
        "enum": [
          "Low",
          "Medium",
          "High"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "Severity",
          "modelAsString": true
        }
      },
      "SeverityCondition": {
        "required": [
          "maxAlertSeverity",
          "minAlertSeverity"
        ],
        "type": "object",
        "properties": {
          "minAlertSeverity": {
            "$ref": "#/components/schemas/Severity"
          },
          "maxAlertSeverity": {
            "$ref": "#/components/schemas/Severity"
          }
        },
        "additionalProperties": false
      },
      "SnoozeScope": {
        "enum": [
          "Metric",
          "Series"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "SnoozeScope",
          "modelAsString": true
        }
      },
      "AlertSnoozeCondition": {
        "required": [
          "autoSnooze",
          "onlyForSuccessive",
          "snoozeScope"
        ],
        "type": "object",
        "properties": {
          "autoSnooze": {
            "type": "integer",
            "description": "snooze point count, value range : [0, +∞)",
            "format": "int32"
          },
          "snoozeScope": {
            "$ref": "#/components/schemas/SnoozeScope"
          },
          "onlyForSuccessive": {
            "type": "boolean",
            "description": "only snooze for successive anomalies"
          }
        },
        "additionalProperties": false
      },
      "Direction": {
        "enum": [
          "Both",
          "Down",
          "Up"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "Direction",
          "modelAsString": true
        }
      },
      "ValueCondition": {
        "required": [
          "direction"
        ],
        "type": "object",
        "properties": {
          "lower": {
            "type": "number",
            "description": "lower bound\r\n\r\nshould be specified when direction is Both or Down",
            "format": "double",
            "nullable": true
          },
          "upper": {
            "type": "number",
            "description": "upper bound\r\n\r\nshould be specified when direction is Both or Up",
            "format": "double",
            "nullable": true
          },
          "direction": {
            "$ref": "#/components/schemas/Direction"
          },
          "metricId": {
            "type": "string",
            "description": "the other metric unique id used for value filter",
            "format": "uuid",
            "nullable": true
          },
          "triggerForMissing": {
            "type": "boolean",
            "description": "trigger alert when the corresponding point is missing in the other metric\r\n\r\nshould be specified only when using other metric to filter"
          }
        },
        "additionalProperties": false
      },
      "MetricAlertingConfiguration": {
        "required": [
          "anomalyDetectionConfigurationId",
          "anomalyScopeType",
          "negationOperation"
        ],
        "type": "object",
        "properties": {
          "anomalyDetectionConfigurationId": {
            "type": "string",
            "description": "Anomaly detection configuration unique id",
            "format": "uuid"
          },
          "anomalyScopeType": {
            "$ref": "#/components/schemas/AnomalyScope"
          },
          "negationOperation": {
            "type": "boolean",
            "description": "Negation operation"
          },
          "dimensionAnomalyScope": {
            "$ref": "#/components/schemas/DimensionGroupIdentity"
          },
          "topNAnomalyScope": {
            "$ref": "#/components/schemas/TopNGroupScope"
          },
          "severityFilter": {
            "$ref": "#/components/schemas/SeverityCondition"
          },
          "snoozeFilter": {
            "$ref": "#/components/schemas/AlertSnoozeCondition"
          },
          "valueFilter": {
            "$ref": "#/components/schemas/ValueCondition"
          }
        },
        "additionalProperties": false
      },
      "AnomalyAlertingConfiguration": {
        "required": [
          "crossMetricsOperator",
          "hookIds",
          "metricAlertingConfigurations",
          "name"
        ],
        "type": "object",
        "properties": {
          "anomalyAlertingConfigurationId": {
            "type": "string",
            "description": "Anomaly alerting configuration unique id",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Anomaly alerting configuration name"
          },
          "crossMetricsOperator": {
            "$ref": "#/components/schemas/AnomalyAlertingConfigurationLogicType"
          },
          "hookIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "hook unique ids"
          },
          "metricAlertingConfigurations": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricAlertingConfiguration"
            },
            "description": "Anomaly alerting configurations"
          }
        },
        "additionalProperties": false
      },
      "ErrorCode": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AnomalyAlertingConfigurationPatch": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Anomaly alerting configuration name",
            "nullable": true
          },
          "crossMetricsOperator": {
            "$ref": "#/components/schemas/AnomalyAlertingConfigurationLogicType"
          },
          "hookIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "hook unique ids",
            "nullable": true
          },
          "metricAlertingConfigurations": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricAlertingConfiguration"
            },
            "description": "Anomaly alerting configurations",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TimeMode": {
        "enum": [
          "AnomalyTime",
          "CreatedTime",
          "ModifiedTime"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "TimeMode",
          "modelAsString": true
        }
      },
      "AlertingResultQuery": {
        "required": [
          "endTime",
          "startTime",
          "timeMode"
        ],
        "type": "object",
        "properties": {
          "startTime": {
            "type": "string",
            "description": "start time",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "end time",
            "format": "date-time"
          },
          "timeMode": {
            "$ref": "#/components/schemas/TimeMode"
          }
        },
        "additionalProperties": false
      },
      "AlertResult": {
        "type": "object",
        "properties": {
          "alertId": {
            "type": "string",
            "description": "alert id",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "description": "anomaly time",
            "format": "date-time",
            "readOnly": true
          },
          "createdTime": {
            "type": "string",
            "description": "created time",
            "format": "date-time",
            "readOnly": true
          },
          "modifiedTime": {
            "type": "string",
            "description": "modified time",
            "format": "date-time",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "AlertResultList": {
        "type": "object",
        "properties": {
          "@nextLink": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertResult"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "AnomalyStatus": {
        "enum": [
          "Active",
          "Resolved"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "AnomalyStatus",
          "modelAsString": true
        }
      },
      "AnomalyProperty": {
        "type": "object",
        "properties": {
          "anomalySeverity": {
            "$ref": "#/components/schemas/Severity"
          },
          "anomalyStatus": {
            "$ref": "#/components/schemas/AnomalyStatus"
          }
        },
        "additionalProperties": false
      },
      "AnomalyResult": {
        "type": "object",
        "properties": {
          "metricId": {
            "type": "string",
            "description": "metric unique id\r\n\r\nonly return for alerting anomaly result",
            "format": "uuid",
            "readOnly": true
          },
          "anomalyDetectionConfigurationId": {
            "type": "string",
            "description": "anomaly detection configuration unique id\r\n\r\nonly return for alerting anomaly result",
            "format": "uuid",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "description": "anomaly time",
            "format": "date-time",
            "readOnly": true
          },
          "createdTime": {
            "type": "string",
            "description": "created time\r\n\r\nonly return for alerting result",
            "format": "date-time",
            "readOnly": true
          },
          "modifiedTime": {
            "type": "string",
            "description": "modified time\r\n\r\nonly return for alerting result",
            "format": "date-time",
            "readOnly": true
          },
          "dimension": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "dimension specified for series",
            "readOnly": true
          },
          "property": {
            "$ref": "#/components/schemas/AnomalyProperty"
          }
        },
        "additionalProperties": false
      },
      "AnomalyResultList": {
        "type": "object",
        "properties": {
          "@nextLink": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnomalyResult"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "SeriesIdentity": {
        "required": [
          "dimension"
        ],
        "type": "object",
        "properties": {
          "dimension": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "dimension specified for series"
          }
        },
        "additionalProperties": false
      },
      "IncidentStatus": {
        "enum": [
          "Active",
          "Resolved"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "IncidentStatus",
          "modelAsString": true
        }
      },
      "IncidentProperty": {
        "type": "object",
        "properties": {
          "maxSeverity": {
            "$ref": "#/components/schemas/Severity"
          },
          "incidentStatus": {
            "$ref": "#/components/schemas/IncidentStatus"
          }
        },
        "additionalProperties": false
      },
      "IncidentResult": {
        "type": "object",
        "properties": {
          "metricId": {
            "type": "string",
            "description": "metric unique id\r\n\r\nonly return for alerting incident result",
            "format": "uuid",
            "readOnly": true
          },
          "anomalyDetectionConfigurationId": {
            "type": "string",
            "description": "anomaly detection configuration unique id\r\n\r\nonly return for alerting incident result",
            "format": "uuid",
            "readOnly": true
          },
          "incidentId": {
            "type": "string",
            "description": "incident id",
            "readOnly": true
          },
          "startTime": {
            "type": "string",
            "description": "incident start time",
            "format": "date-time",
            "readOnly": true
          },
          "lastTime": {
            "type": "string",
            "description": "incident last time",
            "format": "date-time",
            "readOnly": true
          },
          "rootNode": {
            "$ref": "#/components/schemas/SeriesIdentity"
          },
          "property": {
            "$ref": "#/components/schemas/IncidentProperty"
          }
        },
        "additionalProperties": false
      },
      "IncidentResultList": {
        "type": "object",
        "properties": {
          "@nextLink": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentResult"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "AnomalyDetectionConfigurationLogicType": {
        "enum": [
          "AND",
          "OR"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "AnomalyDetectionConfigurationLogicType",
          "modelAsString": true
        }
      },
      "AnomalyDetectorDirection": {
        "enum": [
          "Both",
          "Down",
          "Up"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "AnomalyDetectorDirection",
          "modelAsString": true
        }
      },
      "SuppressCondition": {
        "required": [
          "minNumber",
          "minRatio"
        ],
        "type": "object",
        "properties": {
          "minNumber": {
            "type": "integer",
            "description": "min point number, value range : [1, +∞)",
            "format": "int32"
          },
          "minRatio": {
            "type": "number",
            "description": "min point ratio, value range : (0, 100]",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "SmartDetectionCondition": {
        "required": [
          "anomalyDetectorDirection",
          "sensitivity",
          "suppressCondition"
        ],
        "type": "object",
        "properties": {
          "sensitivity": {
            "type": "number",
            "description": "sensitivity, value range : (0, 100]",
            "format": "double"
          },
          "anomalyDetectorDirection": {
            "$ref": "#/components/schemas/AnomalyDetectorDirection"
          },
          "suppressCondition": {
            "$ref": "#/components/schemas/SuppressCondition"
          }
        },
        "additionalProperties": false
      },
      "HardThresholdCondition": {
        "required": [
          "anomalyDetectorDirection",
          "suppressCondition"
        ],
        "type": "object",
        "properties": {
          "lowerBound": {
            "type": "number",
            "description": "lower bound\r\n\r\nshould be specified when anomalyDetectorDirection is Both or Down",
            "format": "double",
            "nullable": true
          },
          "upperBound": {
            "type": "number",
            "description": "upper bound\r\n\r\nshould be specified when anomalyDetectorDirection is Both or Up",
            "format": "double",
            "nullable": true
          },
          "anomalyDetectorDirection": {
            "$ref": "#/components/schemas/AnomalyDetectorDirection"
          },
          "suppressCondition": {
            "$ref": "#/components/schemas/SuppressCondition"
          }
        },
        "additionalProperties": false
      },
      "ChangeThresholdCondition": {
        "required": [
          "anomalyDetectorDirection",
          "changePercentage",
          "shiftPoint",
          "suppressCondition",
          "withinRange"
        ],
        "type": "object",
        "properties": {
          "changePercentage": {
            "type": "number",
            "description": "change percentage, value range : [0, +∞)",
            "format": "double"
          },
          "shiftPoint": {
            "type": "integer",
            "description": "shift point, value range : [1, +∞)",
            "format": "int32"
          },
          "withinRange": {
            "type": "boolean",
            "description": "if the withinRange = true, detected data is abnormal when the value falls in the range, in this case anomalyDetectorDirection must be Both\r\nif the withinRange = false, detected data is abnormal when the value falls out of the range"
          },
          "anomalyDetectorDirection": {
            "$ref": "#/components/schemas/AnomalyDetectorDirection"
          },
          "suppressCondition": {
            "$ref": "#/components/schemas/SuppressCondition"
          }
        },
        "additionalProperties": false
      },
      "WholeMetricConfiguration": {
        "required": [
          "conditionOperator"
        ],
        "type": "object",
        "properties": {
          "conditionOperator": {
            "$ref": "#/components/schemas/AnomalyDetectionConfigurationLogicType"
          },
          "smartDetectionCondition": {
            "$ref": "#/components/schemas/SmartDetectionCondition"
          },
          "hardThresholdCondition": {
            "$ref": "#/components/schemas/HardThresholdCondition"
          },
          "changeThresholdCondition": {
            "$ref": "#/components/schemas/ChangeThresholdCondition"
          }
        },
        "additionalProperties": false
      },
      "DimensionGroupConfiguration": {
        "required": [
          "conditionOperator",
          "group"
        ],
        "type": "object",
        "properties": {
          "group": {
            "$ref": "#/components/schemas/DimensionGroupIdentity"
          },
          "conditionOperator": {
            "$ref": "#/components/schemas/AnomalyDetectionConfigurationLogicType"
          },
          "smartDetectionCondition": {
            "$ref": "#/components/schemas/SmartDetectionCondition"
          },
          "hardThresholdCondition": {
            "$ref": "#/components/schemas/HardThresholdCondition"
          },
          "changeThresholdCondition": {
            "$ref": "#/components/schemas/ChangeThresholdCondition"
          }
        },
        "additionalProperties": false
      },
      "SeriesConfiguration": {
        "required": [
          "conditionOperator",
          "series"
        ],
        "type": "object",
        "properties": {
          "series": {
            "$ref": "#/components/schemas/SeriesIdentity"
          },
          "conditionOperator": {
            "$ref": "#/components/schemas/AnomalyDetectionConfigurationLogicType"
          },
          "smartDetectionCondition": {
            "$ref": "#/components/schemas/SmartDetectionCondition"
          },
          "hardThresholdCondition": {
            "$ref": "#/components/schemas/HardThresholdCondition"
          },
          "changeThresholdCondition": {
            "$ref": "#/components/schemas/ChangeThresholdCondition"
          }
        },
        "additionalProperties": false
      },
      "AnomalyDetectionConfiguration": {
        "required": [
          "description",
          "dimensionGroupOverrideConfigurations",
          "metricId",
          "name",
          "seriesOverrideConfigurations",
          "wholeMetricConfiguration"
        ],
        "type": "object",
        "properties": {
          "anomalyDetectionConfigurationId": {
            "type": "string",
            "description": "Anomaly detection configuration unique id",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "anomaly detection configuration name"
          },
          "description": {
            "type": "string",
            "description": "anomaly detection configuration description"
          },
          "metricId": {
            "type": "string",
            "description": "metric unique id",
            "format": "uuid"
          },
          "wholeMetricConfiguration": {
            "$ref": "#/components/schemas/WholeMetricConfiguration"
          },
          "dimensionGroupOverrideConfigurations": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DimensionGroupConfiguration"
            },
            "description": "detection configuration for series group"
          },
          "seriesOverrideConfigurations": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeriesConfiguration"
            },
            "description": "detection configuration for specific series"
          }
        },
        "additionalProperties": false
      },
      "AnomalyDetectionConfigurationPatch": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "anomaly detection configuration name",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "anomaly detection configuration description",
            "nullable": true
          },
          "wholeMetricConfiguration": {
            "$ref": "#/components/schemas/WholeMetricConfiguration"
          },
          "dimensionGroupOverrideConfigurations": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DimensionGroupConfiguration"
            },
            "description": "detection configuration for series group",
            "nullable": true
          },
          "seriesOverrideConfigurations": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeriesConfiguration"
            },
            "description": "detection configuration for specific series",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AnomalyAlertingConfigurationList": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnomalyAlertingConfiguration"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DetectionSeriesQuery": {
        "required": [
          "endTime",
          "series",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "startTime": {
            "type": "string",
            "description": "start time",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "end time",
            "format": "date-time"
          },
          "series": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeriesIdentity"
            },
            "description": "series"
          }
        },
        "additionalProperties": false
      },
      "SeriesResult": {
        "type": "object",
        "properties": {
          "series": {
            "$ref": "#/components/schemas/SeriesIdentity"
          },
          "timestampList": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            },
            "description": "timestamps of the series",
            "readOnly": true
          },
          "valueList": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "description": "values of the series",
            "readOnly": true
          },
          "isAnomalyList": {
            "type": "array",
            "items": {
              "type": "boolean"
            },
            "description": "whether points of the series are anomalies",
            "readOnly": true
          },
          "trendChangeList": {
            "type": "array",
            "items": {
              "type": "boolean"
            },
            "description": "whether points of the series are trend change points",
            "readOnly": true
          },
          "periodList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "period calculated on each point of the series",
            "readOnly": true
          },
          "expectedValueList": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "description": "expected values of the series given by smart detector",
            "readOnly": true
          },
          "lowerBoundaryList": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "description": "lower boundary list of the series given by smart detector",
            "readOnly": true
          },
          "upperBoundaryList": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "description": "upper boundary list of the series given by smart detector",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "SeriesResultList": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeriesResult"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "SeverityFilterCondition": {
        "required": [
          "max",
          "min"
        ],
        "type": "object",
        "properties": {
          "min": {
            "$ref": "#/components/schemas/Severity"
          },
          "max": {
            "$ref": "#/components/schemas/Severity"
          }
        },
        "additionalProperties": false
      },
      "DetectionFilterCondition": {
        "type": "object",
        "properties": {
          "dimensionFilter": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DimensionGroupIdentity"
            },
            "description": "dimension filter",
            "nullable": true
          },
          "severityFilter": {
            "$ref": "#/components/schemas/SeverityFilterCondition"
          }
        },
        "additionalProperties": false
      },
      "DetectionResultQuery": {
        "required": [
          "endTime",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "startTime": {
            "type": "string",
            "description": "start time",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "end time",
            "format": "date-time"
          },
          "filter": {
            "$ref": "#/components/schemas/DetectionFilterCondition"
          }
        },
        "additionalProperties": false
      },
      "AnomalyDimensionQuery": {
        "required": [
          "dimensionName",
          "endTime",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "startTime": {
            "type": "string",
            "description": "start time",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "end time",
            "format": "date-time"
          },
          "dimensionName": {
            "type": "string",
            "description": "dimension to query"
          },
          "dimensionFilter": {
            "$ref": "#/components/schemas/DimensionGroupIdentity"
          }
        },
        "additionalProperties": false
      },
      "AnomalyDimensionList": {
        "type": "object",
        "properties": {
          "@nextLink": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "RootCause": {
        "type": "object",
        "properties": {
          "rootCause": {
            "$ref": "#/components/schemas/DimensionGroupIdentity"
          },
          "path": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "drilling down path from query anomaly to root cause",
            "readOnly": true
          },
          "score": {
            "type": "number",
            "description": "score",
            "format": "double",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "description",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "RootCauseList": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RootCause"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DataSourceType": {
        "enum": [
          "AzureApplicationInsights",
          "AzureBlob",
          "AzureCosmosDB",
          "AzureDataExplorer",
          "AzureEventHubs",
          "AzureTable",
          "HttpRequest",
          "InfluxDB",
          "MongoDB",
          "MySql",
          "PostgreSql",
          "SqlServer"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "DataSourceType",
          "modelAsString": true
        }
      },
      "Granularity": {
        "enum": [
          "Yearly",
          "Monthly",
          "Weekly",
          "Daily",
          "Hourly",
          "Minutely",
          "Secondly",
          "Custom"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "Granularity",
          "modelAsString": true
        }
      },
      "EntityStatus": {
        "enum": [
          "Active",
          "Paused"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "EntityStatus",
          "modelAsString": true
        }
      },
      "AzureApplicationInsightsParameter": {
        "required": [
          "apiKey",
          "applicationId",
          "azureCloud",
          "query"
        ],
        "type": "object",
        "properties": {
          "azureCloud": {
            "type": "string",
            "description": "Azure cloud environment"
          },
          "applicationId": {
            "type": "string",
            "description": "Azure Application Insights ID"
          },
          "apiKey": {
            "type": "string",
            "description": "API Key"
          },
          "query": {
            "type": "string",
            "description": "Query"
          }
        },
        "additionalProperties": false
      },
      "Metric": {
        "required": [
          "metricName"
        ],
        "type": "object",
        "properties": {
          "metricId": {
            "type": "string",
            "description": "metric id",
            "format": "uuid",
            "readOnly": true
          },
          "metricName": {
            "type": "string",
            "description": "metric name"
          },
          "metricDisplayName": {
            "pattern": "[.a-zA-Z0-9_-]+",
            "type": "string",
            "description": "metric display name",
            "nullable": true
          },
          "metricDescription": {
            "type": "string",
            "description": "metric description",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Dimension": {
        "required": [
          "dimensionName"
        ],
        "type": "object",
        "properties": {
          "dimensionName": {
            "type": "string",
            "description": "dimension name"
          },
          "dimensionDisplayName": {
            "pattern": "[.a-zA-Z0-9_-]+",
            "type": "string",
            "description": "dimension display name",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NeedRollupEnum": {
        "enum": [
          "NoRollup",
          "NeedRollup",
          "AlreadyRollup"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "NeedRollupEnum",
          "modelAsString": true
        }
      },
      "RollUpMethod": {
        "enum": [
          "None",
          "Sum",
          "Max",
          "Min",
          "Avg",
          "Count"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "RollUpMethod",
          "modelAsString": true
        }
      },
      "FillMissingPointType": {
        "enum": [
          "SmartFilling",
          "PreviousValue",
          "CustomValue",
          "NoFilling"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "FillMissingPointType",
          "modelAsString": true
        }
      },
      "ViewMode": {
        "enum": [
          "Private",
          "Public"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "ViewMode",
          "modelAsString": true
        }
      },
      "DataFeedDetail": {
        "required": [
          "dataFeedName",
          "dataSourceType",
          "dataStartFrom",
          "dimension",
          "granularityName",
          "metrics"
        ],
        "type": "object",
        "properties": {
          "dataSourceType": {
            "$ref": "#/components/schemas/DataSourceType"
          },
          "dataFeedId": {
            "type": "string",
            "description": "data feed unique id",
            "format": "uuid",
            "readOnly": true
          },
          "dataFeedName": {
            "type": "string",
            "description": "data feed name",
            "example": "dummy data feed name"
          },
          "dataFeedDescription": {
            "type": "string",
            "description": "data feed description",
            "nullable": true
          },
          "granularityName": {
            "$ref": "#/components/schemas/Granularity"
          },
          "granularityAmount": {
            "type": "integer",
            "description": "if granularity is custom,it is required.",
            "format": "int32",
            "nullable": true
          },
          "metrics": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metric"
            },
            "description": "measure list"
          },
          "dimension": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Dimension"
            },
            "description": "dimension list"
          },
          "dataStartFrom": {
            "type": "string",
            "description": "ingestion start time",
            "format": "date-time"
          },
          "timestampColumn": {
            "type": "string",
            "description": "user-defined timestamp column. if timestampColumn is null, start time of every time slice will be used as default value.",
            "nullable": true
          },
          "startOffsetInSeconds": {
            "type": "integer",
            "description": "the time that the beginning of data ingestion task will delay for every data slice according to this offset.",
            "format": "int64",
            "default": 0
          },
          "maxConcurrency": {
            "type": "integer",
            "description": "the max concurrency of data ingestion queries against user data source. 0 means no limitation.",
            "format": "int32",
            "default": -1
          },
          "minRetryIntervalInSeconds": {
            "type": "integer",
            "description": "the min retry interval for failed data ingestion tasks.",
            "format": "int64",
            "default": -1
          },
          "stopRetryAfterInSeconds": {
            "type": "integer",
            "description": "stop retry data ingestion after the data slice first schedule time in seconds.",
            "format": "int64",
            "default": -1
          },
          "needRollup": {
            "$ref": "#/components/schemas/NeedRollupEnum"
          },
          "rollUpMethod": {
            "$ref": "#/components/schemas/RollUpMethod"
          },
          "rollUpColumns": {
            "type": "string",
            "description": "roll up columns",
            "nullable": true
          },
          "allUpIdentification": {
            "type": "string",
            "description": "the identification value for the row of calculated all-up value.",
            "nullable": true
          },
          "fillMissingPointType": {
            "$ref": "#/components/schemas/FillMissingPointType"
          },
          "fillMissingPointValue": {
            "type": "number",
            "description": "the value of fill missing point for anomaly detection",
            "format": "double",
            "nullable": true
          },
          "viewMode": {
            "$ref": "#/components/schemas/ViewMode"
          },
          "admins": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "data feed administrator",
            "nullable": true
          },
          "viewers": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "data feed viewer",
            "nullable": true
          },
          "isAdmin": {
            "type": "boolean",
            "description": "the query user is one of data feed administrator or not",
            "readOnly": true
          },
          "creator": {
            "type": "string",
            "description": "data feed creator",
            "readOnly": true
          },
          "status": {
            "$ref": "#/components/schemas/EntityStatus"
          },
          "createdTime": {
            "type": "string",
            "description": "data feed created time",
            "format": "date-time",
            "readOnly": true
          },
          "actionLinkTemplate": {
            "type": "string",
            "description": "action link for alert",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "dataSourceType"
        }
      },
      "AzureApplicationInsightsDataFeed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataFeedDetail"
          },
          {
            "required": [
              "dataFeedName",
              "dataSourceParameter",
              "dataSourceType",
              "dataStartFrom",
              "dimension",
              "granularityName",
              "metrics"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/components/schemas/AzureApplicationInsightsParameter"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "AzureBlobParameter": {
        "required": [
          "blobTemplate",
          "connectionString",
          "container"
        ],
        "type": "object",
        "properties": {
          "connectionString": {
            "type": "string",
            "description": "Azure Blob connection string"
          },
          "container": {
            "type": "string",
            "description": "Container"
          },
          "blobTemplate": {
            "type": "string",
            "description": "Blob Template"
          }
        },
        "additionalProperties": false
      },
      "AzureBlobDataFeed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataFeedDetail"
          },
          {
            "required": [
              "dataFeedName",
              "dataSourceParameter",
              "dataSourceType",
              "dataStartFrom",
              "dimension",
              "granularityName",
              "metrics"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/components/schemas/AzureBlobParameter"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "AzureCosmosDBParameter": {
        "required": [
          "collectionId",
          "connectionString",
          "database",
          "sqlQuery"
        ],
        "type": "object",
        "properties": {
          "connectionString": {
            "type": "string",
            "description": "Azure CosmosDB connection string"
          },
          "sqlQuery": {
            "type": "string",
            "description": "Query script"
          },
          "database": {
            "type": "string",
            "description": "Database name"
          },
          "collectionId": {
            "type": "string",
            "description": "Collection id"
          }
        },
        "additionalProperties": false
      },
      "AzureCosmosDBDataFeed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataFeedDetail"
          },
          {
            "required": [
              "dataFeedName",
              "dataSourceParameter",
              "dataSourceType",
              "dataStartFrom",
              "dimension",
              "granularityName",
              "metrics"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/components/schemas/AzureCosmosDBParameter"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SqlSourceParameter": {
        "required": [
          "connectionString",
          "query"
        ],
        "type": "object",
        "properties": {
          "connectionString": {
            "type": "string",
            "description": "Database connection string"
          },
          "query": {
            "type": "string",
            "description": "Query script"
          }
        },
        "additionalProperties": false
      },
      "AzureDataExplorerDataFeed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataFeedDetail"
          },
          {
            "required": [
              "dataFeedName",
              "dataSourceParameter",
              "dataSourceType",
              "dataStartFrom",
              "dimension",
              "granularityName",
              "metrics"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/components/schemas/SqlSourceParameter"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "AzureEventHubsParameter": {
        "required": [
          "connectionString",
          "consumerGroup"
        ],
        "type": "object",
        "properties": {
          "connectionString": {
            "type": "string",
            "description": "Azure Event Hubs connection string"
          },
          "consumerGroup": {
            "type": "string",
            "description": "Azure Event Hubs consumer group"
          }
        },
        "additionalProperties": false
      },
      "AzureEventHubsDataFeed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataFeedDetail"
          },
          {
            "required": [
              "dataFeedName",
              "dataSourceParameter",
              "dataSourceType",
              "dataStartFrom",
              "dimension",
              "granularityName",
              "metrics"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/components/schemas/AzureEventHubsParameter"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "AzureTableParameter": {
        "required": [
          "connectionString",
          "script",
          "table"
        ],
        "type": "object",
        "properties": {
          "connectionString": {
            "type": "string",
            "description": "Azure Table connection string"
          },
          "script": {
            "type": "string",
            "description": "Query script"
          },
          "table": {
            "type": "string",
            "description": "Table name"
          }
        },
        "additionalProperties": false
      },
      "AzureTableDataFeed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataFeedDetail"
          },
          {
            "required": [
              "dataFeedName",
              "dataSourceParameter",
              "dataSourceType",
              "dataStartFrom",
              "dimension",
              "granularityName",
              "metrics"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/components/schemas/AzureTableParameter"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "HttpRequestParameter": {
        "required": [
          "httpHeader",
          "httpMethod",
          "payload",
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "HTTP URL"
          },
          "httpHeader": {
            "type": "string",
            "description": "HTTP header"
          },
          "httpMethod": {
            "type": "string",
            "description": "HTTP method"
          },
          "payload": {
            "type": "string",
            "description": "HTTP reuqest body"
          }
        },
        "additionalProperties": false
      },
      "HttpRequestDataFeed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataFeedDetail"
          },
          {
            "required": [
              "dataFeedName",
              "dataSourceParameter",
              "dataSourceType",
              "dataStartFrom",
              "dimension",
              "granularityName",
              "metrics"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/components/schemas/HttpRequestParameter"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "InfluxDBParameter": {
        "required": [
          "connectionString",
          "database",
          "password",
          "query",
          "userName"
        ],
        "type": "object",
        "properties": {
          "connectionString": {
            "type": "string",
            "description": "InfluxDB connection string"
          },
          "database": {
            "type": "string",
            "description": "Database name"
          },
          "userName": {
            "type": "string",
            "description": "Database access user"
          },
          "password": {
            "type": "string",
            "description": "Database access password"
          },
          "query": {
            "type": "string",
            "description": "Query script"
          }
        },
        "additionalProperties": false
      },
      "InfluxDBDataFeed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataFeedDetail"
          },
          {
            "required": [
              "dataFeedName",
              "dataSourceParameter",
              "dataSourceType",
              "dataStartFrom",
              "dimension",
              "granularityName",
              "metrics"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/components/schemas/InfluxDBParameter"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "MySqlDataFeed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataFeedDetail"
          },
          {
            "required": [
              "dataFeedName",
              "dataSourceParameter",
              "dataSourceType",
              "dataStartFrom",
              "dimension",
              "granularityName",
              "metrics"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/components/schemas/SqlSourceParameter"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "PostgreSqlDataFeed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataFeedDetail"
          },
          {
            "required": [
              "dataFeedName",
              "dataSourceParameter",
              "dataSourceType",
              "dataStartFrom",
              "dimension",
              "granularityName",
              "metrics"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/components/schemas/SqlSourceParameter"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SQLServerDataFeed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataFeedDetail"
          },
          {
            "required": [
              "dataFeedName",
              "dataSourceParameter",
              "dataSourceType",
              "dataStartFrom",
              "dimension",
              "granularityName",
              "metrics"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/components/schemas/SqlSourceParameter"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "MongoDBParameter": {
        "required": [
          "command",
          "connectionString",
          "database"
        ],
        "type": "object",
        "properties": {
          "connectionString": {
            "type": "string",
            "description": "MongoDB connection string"
          },
          "database": {
            "type": "string",
            "description": "Database name"
          },
          "command": {
            "type": "string",
            "description": "Query script"
          }
        },
        "additionalProperties": false
      },
      "MongoDBDataFeed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataFeedDetail"
          },
          {
            "required": [
              "dataFeedName",
              "dataSourceParameter",
              "dataSourceType",
              "dataStartFrom",
              "dimension",
              "granularityName",
              "metrics"
            ],
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/components/schemas/MongoDBParameter"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "DataFeedList": {
        "type": "object",
        "properties": {
          "@nextLink": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AzureApplicationInsightsDataFeed"
                },
                {
                  "$ref": "#/components/schemas/AzureBlobDataFeed"
                },
                {
                  "$ref": "#/components/schemas/AzureCosmosDBDataFeed"
                },
                {
                  "$ref": "#/components/schemas/AzureDataExplorerDataFeed"
                },
                {
                  "$ref": "#/components/schemas/AzureEventHubsDataFeed"
                },
                {
                  "$ref": "#/components/schemas/AzureTableDataFeed"
                },
                {
                  "$ref": "#/components/schemas/HttpRequestDataFeed"
                },
                {
                  "$ref": "#/components/schemas/InfluxDBDataFeed"
                },
                {
                  "$ref": "#/components/schemas/MySqlDataFeed"
                },
                {
                  "$ref": "#/components/schemas/PostgreSqlDataFeed"
                },
                {
                  "$ref": "#/components/schemas/SQLServerDataFeed"
                },
                {
                  "$ref": "#/components/schemas/MongoDBDataFeed"
                }
              ]
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DataFeedDetailPatch": {
        "required": [
          "dataSourceType"
        ],
        "type": "object",
        "properties": {
          "dataSourceType": {
            "$ref": "#/components/schemas/DataSourceType"
          },
          "dataFeedName": {
            "type": "string",
            "description": "data feed name",
            "nullable": true
          },
          "dataFeedDescription": {
            "type": "string",
            "description": "data feed description",
            "nullable": true
          },
          "dataStartFrom": {
            "type": "string",
            "description": "ingestion start time",
            "format": "date-time",
            "nullable": true
          },
          "timestampColumn": {
            "type": "string",
            "description": "user-defined timestamp column. if timestampColumn is null, start time of every time slice will be used as default value.",
            "nullable": true
          },
          "startOffsetInSeconds": {
            "type": "integer",
            "description": "the time that the beginning of data ingestion task will delay for every data slice according to this offset.",
            "format": "int64",
            "nullable": true
          },
          "maxConcurrency": {
            "type": "integer",
            "description": "the max concurrency of data ingestion queries against user data source. 0 means no limitation.",
            "format": "int32",
            "nullable": true
          },
          "minRetryIntervalInSeconds": {
            "type": "integer",
            "description": "the min retry interval for failed data ingestion tasks.",
            "format": "int64",
            "nullable": true
          },
          "stopRetryAfterInSeconds": {
            "type": "integer",
            "description": "stop retry data ingestion after the data slice first schedule time in seconds.",
            "format": "int64",
            "nullable": true
          },
          "needRollup": {
            "$ref": "#/components/schemas/NeedRollupEnum"
          },
          "rollUpMethod": {
            "$ref": "#/components/schemas/RollUpMethod"
          },
          "rollUpColumns": {
            "type": "string",
            "description": "roll up columns",
            "nullable": true
          },
          "allUpIdentification": {
            "type": "string",
            "description": "the identification value for the row of calculated all-up value.",
            "nullable": true
          },
          "fillMissingPointForAd": {
            "$ref": "#/components/schemas/FillMissingPointType"
          },
          "fillMissingPointForAdValue": {
            "type": "number",
            "description": "the value of fill missing point for anomaly detection",
            "format": "double",
            "nullable": true
          },
          "viewMode": {
            "$ref": "#/components/schemas/ViewMode"
          },
          "admins": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "data feed administrator",
            "nullable": true
          },
          "viewers": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "data feed viewer",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/EntityStatus"
          },
          "actionLinkTemplate": {
            "type": "string",
            "description": "action link for alert",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "dataSourceType"
        }
      },
      "AzureApplicationInsightsDataFeedPatch": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataFeedDetailPatch"
          },
          {
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/components/schemas/AzureApplicationInsightsParameter"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "AzureBlobDataFeedPatch": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataFeedDetailPatch"
          },
          {
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/components/schemas/AzureBlobParameter"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "AzureCosmosDBDataFeedPatch": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataFeedDetailPatch"
          },
          {
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/components/schemas/AzureCosmosDBParameter"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "AzureDataExplorerDataFeedPatch": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataFeedDetailPatch"
          },
          {
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/components/schemas/SqlSourceParameter"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "AzureEventHubsDataFeedPatch": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataFeedDetailPatch"
          },
          {
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/components/schemas/AzureEventHubsParameter"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "AzureTableDataFeedPatch": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataFeedDetailPatch"
          },
          {
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/components/schemas/AzureTableParameter"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "HttpRequestDataFeedPatch": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataFeedDetailPatch"
          },
          {
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/components/schemas/HttpRequestParameter"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "InfluxDBDataFeedPatch": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataFeedDetailPatch"
          },
          {
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/components/schemas/InfluxDBParameter"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "MySqlDataFeedPatch": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataFeedDetailPatch"
          },
          {
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/components/schemas/SqlSourceParameter"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "PostgreSqlDataFeedPatch": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataFeedDetailPatch"
          },
          {
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/components/schemas/SqlSourceParameter"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SQLServerDataFeedPatch": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataFeedDetailPatch"
          },
          {
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/components/schemas/SqlSourceParameter"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "MongoDBDataFeedPatch": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataFeedDetailPatch"
          },
          {
            "type": "object",
            "properties": {
              "dataSourceParameter": {
                "$ref": "#/components/schemas/MongoDBParameter"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "AnomalyValue": {
        "enum": [
          "AutoDetect",
          "Anomaly",
          "NotAnomaly"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "AnomalyValue",
          "modelAsString": true
        }
      },
      "AnomalyFeedbackValue": {
        "required": [
          "anomalyValue"
        ],
        "type": "object",
        "properties": {
          "anomalyValue": {
            "$ref": "#/components/schemas/AnomalyValue"
          }
        },
        "additionalProperties": false
      },
      "MetricAnomalyFeedbackSourceInfo": {
        "required": [
          "anomalyDetectionConfiguration"
        ],
        "type": "object",
        "properties": {
          "anomalyDetectionConfiguration": {
            "$ref": "#/components/schemas/AnomalyDetectionConfiguration"
          }
        },
        "additionalProperties": false
      },
      "FeedbackDimensionFilter": {
        "required": [
          "dimension"
        ],
        "type": "object",
        "properties": {
          "dimension": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "metric dimension filter"
          }
        },
        "additionalProperties": false
      },
      "FeedbackType": {
        "enum": [
          "Anomaly",
          "ChangePoint",
          "Period",
          "Comment"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "FeedbackType",
          "modelAsString": true
        }
      },
      "MetricFeedback": {
        "required": [
          "feedbackType",
          "metricId"
        ],
        "type": "object",
        "properties": {
          "feedbackType": {
            "$ref": "#/components/schemas/FeedbackType"
          },
          "feedbackId": {
            "type": "string",
            "description": "feedback unique id",
            "format": "uuid",
            "readOnly": true
          },
          "createdTime": {
            "type": "string",
            "description": "feedback created time",
            "format": "date-time",
            "readOnly": true
          },
          "userPrincipal": {
            "type": "string",
            "description": "user who gives this feedback",
            "readOnly": true
          },
          "metricId": {
            "type": "string",
            "description": "metric unique id",
            "format": "uuid"
          },
          "dimensionFilter": {
            "$ref": "#/components/schemas/FeedbackDimensionFilter"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "feedbackType"
        }
      },
      "AnomalyFeedback": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetricFeedback"
          },
          {
            "required": [
              "endTime",
              "feedbackType",
              "metricId",
              "startTime",
              "value"
            ],
            "type": "object",
            "properties": {
              "startTime": {
                "type": "string",
                "description": "the start timestamp of feedback timerange",
                "format": "date-time"
              },
              "endTime": {
                "type": "string",
                "description": "the end timestamp of feedback timerange, when equals to startTime means only one timestamp",
                "format": "date-time"
              },
              "value": {
                "$ref": "#/components/schemas/AnomalyFeedbackValue"
              },
              "sourceInfo": {
                "$ref": "#/components/schemas/MetricAnomalyFeedbackSourceInfo"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ChangePointValue": {
        "enum": [
          "AutoDetect",
          "ChangePoint",
          "NotChangePoint"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "ChangePointValue",
          "modelAsString": true
        }
      },
      "ChangePointFeedbackValue": {
        "required": [
          "changePointValue"
        ],
        "type": "object",
        "properties": {
          "changePointValue": {
            "$ref": "#/components/schemas/ChangePointValue"
          }
        },
        "additionalProperties": false
      },
      "ChangePointFeedback": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetricFeedback"
          },
          {
            "required": [
              "endTime",
              "feedbackType",
              "metricId",
              "startTime",
              "value"
            ],
            "type": "object",
            "properties": {
              "startTime": {
                "type": "string",
                "description": "the start timestamp of feedback timerange",
                "format": "date-time"
              },
              "endTime": {
                "type": "string",
                "description": "the end timestamp of feedback timerange, when equals to startTime means only one timestamp",
                "format": "date-time"
              },
              "value": {
                "$ref": "#/components/schemas/ChangePointFeedbackValue"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "CommentFeedbackValue": {
        "required": [
          "commentValue"
        ],
        "type": "object",
        "properties": {
          "commentValue": {
            "type": "string",
            "description": "the comment string"
          }
        },
        "additionalProperties": false
      },
      "CommentFeedback": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetricFeedback"
          },
          {
            "required": [
              "feedbackType",
              "metricId",
              "value"
            ],
            "type": "object",
            "properties": {
              "startTime": {
                "type": "string",
                "description": "the start timestamp of feedback timerange",
                "format": "date-time"
              },
              "endTime": {
                "type": "string",
                "description": "the end timestamp of feedback timerange, when equals to startTime means only one timestamp",
                "format": "date-time"
              },
              "value": {
                "$ref": "#/components/schemas/CommentFeedbackValue"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "PeriodType": {
        "enum": [
          "AutoDetect",
          "AssignValue"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "PeriodType",
          "modelAsString": true
        }
      },
      "PeriodFeedbackValue": {
        "required": [
          "periodType",
          "periodValue"
        ],
        "type": "object",
        "properties": {
          "periodType": {
            "$ref": "#/components/schemas/PeriodType"
          },
          "periodValue": {
            "type": "integer",
            "description": "the number of intervals a period contains, when no period set to 0",
            "format": "int32",
            "default": 0
          }
        },
        "additionalProperties": false
      },
      "PeriodFeedback": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetricFeedback"
          },
          {
            "required": [
              "feedbackType",
              "metricId",
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "$ref": "#/components/schemas/PeriodFeedbackValue"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "MetricFeedbackFilter": {
        "required": [
          "feedbackType",
          "metricId"
        ],
        "type": "object",
        "properties": {
          "feedbackType": {
            "$ref": "#/components/schemas/FeedbackType"
          },
          "metricId": {
            "type": "string",
            "description": "filter feedbacks by metric id",
            "format": "uuid"
          },
          "dimensionFilter": {
            "$ref": "#/components/schemas/FeedbackDimensionFilter"
          },
          "startTime": {
            "type": "string",
            "description": "filter feedbacks which startTime equals or larger than this timestamp",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "filter feedbacks which endTime equals or smaller than this timestamp",
            "format": "date-time"
          },
          "userPrincipal": {
            "type": "string",
            "description": "filter feedbacks given by this user",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "feedbackType"
        }
      },
      "AnomalyFeedbackFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetricFeedbackFilter"
          },
          {
            "required": [
              "metricId"
            ],
            "type": "object",
            "properties": {
              "valueFilter": {
                "$ref": "#/components/schemas/AnomalyFeedbackValue"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ChangePointFeedbackFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetricFeedbackFilter"
          },
          {
            "required": [
              "metricId"
            ],
            "type": "object",
            "properties": {
              "valueFilter": {
                "$ref": "#/components/schemas/ChangePointFeedbackValue"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "CommentFeedbackFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetricFeedbackFilter"
          },
          {
            "required": [
              "metricId"
            ],
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "PeriodFeedbackFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetricFeedbackFilter"
          },
          {
            "required": [
              "metricId"
            ],
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "MetricFeedbackList": {
        "type": "object",
        "properties": {
          "@nextLink": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AnomalyFeedback"
                },
                {
                  "$ref": "#/components/schemas/ChangePointFeedback"
                },
                {
                  "$ref": "#/components/schemas/CommentFeedback"
                },
                {
                  "$ref": "#/components/schemas/PeriodFeedback"
                }
              ]
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "EmailHookParameter": {
        "required": [
          "toList"
        ],
        "type": "object",
        "properties": {
          "toList": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Email TO: list."
          }
        },
        "additionalProperties": false
      },
      "HookType": {
        "enum": [
          "Webhook",
          "Email"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "HookType",
          "modelAsString": true
        }
      },
      "HookInfo": {
        "required": [
          "hookName",
          "hookType"
        ],
        "type": "object",
        "properties": {
          "hookType": {
            "$ref": "#/components/schemas/HookType"
          },
          "hookId": {
            "type": "string",
            "description": "Hook unique id",
            "format": "uuid",
            "readOnly": true
          },
          "hookName": {
            "type": "string",
            "description": "hook unique name"
          },
          "description": {
            "type": "string",
            "description": "hook description",
            "nullable": true
          },
          "externalLink": {
            "type": "string",
            "description": "hook external link",
            "nullable": true
          },
          "admins": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "hook administrators",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "hookType"
        }
      },
      "EmailHookInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HookInfo"
          },
          {
            "required": [
              "hookName",
              "hookParameter",
              "hookType"
            ],
            "type": "object",
            "properties": {
              "hookParameter": {
                "$ref": "#/components/schemas/EmailHookParameter"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "WebhookHookParameter": {
        "required": [
          "endpoint"
        ],
        "type": "object",
        "properties": {
          "endpoint": {
            "type": "string",
            "description": "API address, will be called when alert is triggered, only support POST method via SSL"
          },
          "username": {
            "type": "string",
            "description": "basic authentication",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "basic authentication",
            "nullable": true
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "custom headers in api call",
            "nullable": true
          },
          "certificateKey": {
            "type": "string",
            "description": "client certificate",
            "nullable": true
          },
          "certificatePassword": {
            "type": "string",
            "description": "client certificate password",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WebhookHookInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HookInfo"
          },
          {
            "required": [
              "hookName",
              "hookParameter",
              "hookType"
            ],
            "type": "object",
            "properties": {
              "hookParameter": {
                "$ref": "#/components/schemas/WebhookHookParameter"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "HookList": {
        "type": "object",
        "properties": {
          "@nextLink": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/EmailHookInfo"
                },
                {
                  "$ref": "#/components/schemas/WebhookHookInfo"
                }
              ]
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "HookInfoPatch": {
        "required": [
          "hookType"
        ],
        "type": "object",
        "properties": {
          "hookType": {
            "$ref": "#/components/schemas/HookType"
          },
          "hookName": {
            "type": "string",
            "description": "hook unique name",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "hook description",
            "nullable": true
          },
          "externalLink": {
            "type": "string",
            "description": "hook external link",
            "nullable": true
          },
          "admins": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "hook administrators",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "hookType"
        }
      },
      "EmailHookInfoPatch": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HookInfoPatch"
          },
          {
            "type": "object",
            "properties": {
              "hookParameter": {
                "$ref": "#/components/schemas/EmailHookParameter"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "WebhookHookInfoPatch": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HookInfoPatch"
          },
          {
            "type": "object",
            "properties": {
              "hookParameter": {
                "$ref": "#/components/schemas/WebhookHookParameter"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "IngestionStatusQueryOptions": {
        "required": [
          "endTime",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "startTime": {
            "type": "string",
            "description": "the start point of time range to query data ingestion status.",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "the end point of time range to query data ingestion status.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "IngestionStatusType": {
        "enum": [
          "NotStarted",
          "Scheduled",
          "Running",
          "Succeeded",
          "Failed",
          "NoData",
          "Error",
          "Paused"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "IngestionStatusType",
          "modelAsString": true
        }
      },
      "IngestionStatus": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "data slice timestamp.",
            "format": "date-time",
            "readOnly": true
          },
          "status": {
            "$ref": "#/components/schemas/IngestionStatusType"
          },
          "message": {
            "type": "string",
            "description": "the trimmed message of last ingestion job.",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "IngestionStatusList": {
        "type": "object",
        "properties": {
          "@nextLink": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IngestionStatus"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "IngestionProgressResetOptions": {
        "required": [
          "endTime",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "startTime": {
            "type": "string",
            "description": "the start point of time range to reset data ingestion status.",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "the end point of time range to reset data ingestion status.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "DataFeedIngestionProgress": {
        "type": "object",
        "properties": {
          "latestSuccessTimestamp": {
            "type": "string",
            "description": "the timestamp of lastest success ingestion job.\r\nnull indicates not available",
            "format": "date-time",
            "readOnly": true
          },
          "latestActiveTimestamp": {
            "type": "string",
            "description": "the timestamp of lastest ingestion job with status update.\r\nnull indicates not available",
            "format": "date-time",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MetricDataQueryOptions": {
        "required": [
          "endTime",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "startTime": {
            "type": "string",
            "description": "start time of query a time series data, and format should be yyyy-MM-ddThh:mm:ssZ",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "start time of query a time series data, and format should be yyyy-MM-ddThh:mm:ssZ",
            "format": "date-time"
          },
          "series": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "query specific series",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MetricSeriesItem": {
        "type": "object",
        "properties": {
          "metricId": {
            "type": "string",
            "description": "metric unique id",
            "format": "uuid",
            "readOnly": true
          },
          "dimension": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "dimension name and value pair",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MetricDataItem": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/MetricSeriesItem"
          },
          "timestampList": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            },
            "description": "timestamps of the data related to this time series",
            "readOnly": true
          },
          "valueList": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "description": "values of the data related to this time series",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MetricDataList": {
        "type": "object",
        "properties": {
          "@nextLink": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricDataItem"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MetricSeriesQueryOptions": {
        "required": [
          "activeSince"
        ],
        "type": "object",
        "properties": {
          "activeSince": {
            "type": "string",
            "description": "query series ingested after this time, the format should be yyyy-MM-ddTHH:mm:ssZ",
            "format": "date-time"
          },
          "dimensionFilter": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "filter specfic dimension name and values",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MetricSeriesList": {
        "type": "object",
        "properties": {
          "@nextLink": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricSeriesItem"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MetricDimensionQueryOptions": {
        "required": [
          "dimensionName"
        ],
        "type": "object",
        "properties": {
          "dimensionName": {
            "type": "string",
            "description": "dimension name"
          },
          "dimensionValueFilter": {
            "type": "string",
            "description": "dimension value to be filtered",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MetricDimensionList": {
        "type": "object",
        "properties": {
          "@nextLink": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "AnomalyDetectionConfigurationList": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnomalyDetectionConfiguration"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "EnrichmentStatusQueryOption": {
        "required": [
          "endTime",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "startTime": {
            "type": "string",
            "description": "the start point of time range to query anomaly detection status.",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "the end point of time range to query anomaly detection status.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EnrichmentStatus": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "data slice timestamp.",
            "format": "date-time",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "description": "latest enrichment status for this data slice.",
            "readOnly": true
          },
          "message": {
            "type": "string",
            "description": "the trimmed message describes details of the enrichment status.",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "EnrichmentStatusList": {
        "type": "object",
        "properties": {
          "@nextLink": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnrichmentStatus"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "apiKeyHeader": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header"
      }
    }
  }
}