// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;

namespace LiveVideoAnalytics
{
    /// <summary> The LiveVideoAnalytics service client. </summary>
    public partial class LiveVideoAnalyticsClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal LiveVideoAnalyticsRestClient RestClient { get; }
        /// <summary> Initializes a new instance of LiveVideoAnalyticsClient for mocking. </summary>
        protected LiveVideoAnalyticsClient()
        {
        }
        /// <summary> Initializes a new instance of LiveVideoAnalyticsClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        internal LiveVideoAnalyticsClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            RestClient = new LiveVideoAnalyticsRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Retrieves a list of graph topologies that have been added to the Live Video Analytics IoT Edge module. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<MediaGraphTopologyCollection>> GraphTopologyListAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LiveVideoAnalyticsClient.GraphTopologyList");
            scope.Start();
            try
            {
                return await RestClient.GraphTopologyListAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieves a list of graph topologies that have been added to the Live Video Analytics IoT Edge module. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<MediaGraphTopologyCollection> GraphTopologyList(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LiveVideoAnalyticsClient.GraphTopologyList");
            scope.Start();
            try
            {
                return RestClient.GraphTopologyList(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new topology or updates an existing one, with the given name. A topology is a blueprint defining what nodes are in a graph, and how they are interconnected. </summary>
        /// <param name="topology"> The MediaGraphTopology to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<MediaGraphTopology>> GraphTopologySetAsync(MediaGraphTopology topology, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LiveVideoAnalyticsClient.GraphTopologySet");
            scope.Start();
            try
            {
                return await RestClient.GraphTopologySetAsync(topology, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new topology or updates an existing one, with the given name. A topology is a blueprint defining what nodes are in a graph, and how they are interconnected. </summary>
        /// <param name="topology"> The MediaGraphTopology to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<MediaGraphTopology> GraphTopologySet(MediaGraphTopology topology, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LiveVideoAnalyticsClient.GraphTopologySet");
            scope.Start();
            try
            {
                return RestClient.GraphTopologySet(topology, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieves a graph topology by name. If a topology with that name has been previously set, then the call will return the JSON representation of that topology. </summary>
        /// <param name="name"> Name of the graph topology to be retrieved. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<MediaGraphTopology>> GraphTopologyGetAsync(string name, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LiveVideoAnalyticsClient.GraphTopologyGet");
            scope.Start();
            try
            {
                return await RestClient.GraphTopologyGetAsync(name, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieves a graph topology by name. If a topology with that name has been previously set, then the call will return the JSON representation of that topology. </summary>
        /// <param name="name"> Name of the graph topology to be retrieved. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<MediaGraphTopology> GraphTopologyGet(string name, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LiveVideoAnalyticsClient.GraphTopologyGet");
            scope.Start();
            try
            {
                return RestClient.GraphTopologyGet(name, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a graph topology with the given name. This method should be called after all instances of the topology have been stopped and deleted. </summary>
        /// <param name="name"> Name of the graph topology to be deleted. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GraphTopologyDeleteAsync(string name, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LiveVideoAnalyticsClient.GraphTopologyDelete");
            scope.Start();
            try
            {
                return await RestClient.GraphTopologyDeleteAsync(name, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a graph topology with the given name. This method should be called after all instances of the topology have been stopped and deleted. </summary>
        /// <param name="name"> Name of the graph topology to be deleted. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GraphTopologyDelete(string name, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LiveVideoAnalyticsClient.GraphTopologyDelete");
            scope.Start();
            try
            {
                return RestClient.GraphTopologyDelete(name, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieves a list of graph instances, if any, that have been created in the Live Video Analytics IoT Edge module. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<MediaGraphInstanceCollection>> GraphInstanceListAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LiveVideoAnalyticsClient.GraphInstanceList");
            scope.Start();
            try
            {
                return await RestClient.GraphInstanceListAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieves a list of graph instances, if any, that have been created in the Live Video Analytics IoT Edge module. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<MediaGraphInstanceCollection> GraphInstanceList(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LiveVideoAnalyticsClient.GraphInstanceList");
            scope.Start();
            try
            {
                return RestClient.GraphInstanceList(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates a graph instance. </summary>
        /// <param name="instance"> The MediaGraphInstance to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<MediaGraphInstance>> GraphInstanceSetAsync(MediaGraphInstance instance, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LiveVideoAnalyticsClient.GraphInstanceSet");
            scope.Start();
            try
            {
                return await RestClient.GraphInstanceSetAsync(instance, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates a graph instance. </summary>
        /// <param name="instance"> The MediaGraphInstance to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<MediaGraphInstance> GraphInstanceSet(MediaGraphInstance instance, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LiveVideoAnalyticsClient.GraphInstanceSet");
            scope.Start();
            try
            {
                return RestClient.GraphInstanceSet(instance, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieves a  graph instance by name. If a graph instance with that name has been previously created, then the direct method call will return the JSON representation of that instance. </summary>
        /// <param name="name"> Name of the graph instance to be retrieved. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<MediaGraphInstance>> GraphInstanceGetAsync(string name, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LiveVideoAnalyticsClient.GraphInstanceGet");
            scope.Start();
            try
            {
                return await RestClient.GraphInstanceGetAsync(name, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieves a  graph instance by name. If a graph instance with that name has been previously created, then the direct method call will return the JSON representation of that instance. </summary>
        /// <param name="name"> Name of the graph instance to be retrieved. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<MediaGraphInstance> GraphInstanceGet(string name, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LiveVideoAnalyticsClient.GraphInstanceGet");
            scope.Start();
            try
            {
                return RestClient.GraphInstanceGet(name, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a graph instance. </summary>
        /// <param name="name"> Name of the graph instance to be deleted. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GraphInstanceDeleteAsync(string name, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LiveVideoAnalyticsClient.GraphInstanceDelete");
            scope.Start();
            try
            {
                return await RestClient.GraphInstanceDeleteAsync(name, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a graph instance. </summary>
        /// <param name="name"> Name of the graph instance to be deleted. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GraphInstanceDelete(string name, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LiveVideoAnalyticsClient.GraphInstanceDelete");
            scope.Start();
            try
            {
                return RestClient.GraphInstanceDelete(name, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Activates a graph instance with the name provided, if it exists. </summary>
        /// <param name="name"> Name of the graph instance to be activated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GraphInstanceActivateAsync(string name, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LiveVideoAnalyticsClient.GraphInstanceActivate");
            scope.Start();
            try
            {
                return await RestClient.GraphInstanceActivateAsync(name, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Activates a graph instance with the name provided, if it exists. </summary>
        /// <param name="name"> Name of the graph instance to be activated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GraphInstanceActivate(string name, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LiveVideoAnalyticsClient.GraphInstanceActivate");
            scope.Start();
            try
            {
                return RestClient.GraphInstanceActivate(name, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deactivates a graph instance with the name provided, if it is active. </summary>
        /// <param name="name"> Name of the graph instance to be deactivated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GraphInstanceDeactivateAsync(string name, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LiveVideoAnalyticsClient.GraphInstanceDeactivate");
            scope.Start();
            try
            {
                return await RestClient.GraphInstanceDeactivateAsync(name, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deactivates a graph instance with the name provided, if it is active. </summary>
        /// <param name="name"> Name of the graph instance to be deactivated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GraphInstanceDeactivate(string name, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LiveVideoAnalyticsClient.GraphInstanceDeactivate");
            scope.Start();
            try
            {
                return RestClient.GraphInstanceDeactivate(name, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
