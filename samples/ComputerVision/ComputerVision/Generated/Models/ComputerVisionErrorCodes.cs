// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace ComputerVision.Models
{
    /// <summary> The error code. </summary>
    public readonly partial struct ComputerVisionErrorCodes : IEquatable<ComputerVisionErrorCodes>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ComputerVisionErrorCodes"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ComputerVisionErrorCodes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InvalidImageFormatValue = "InvalidImageFormat";
        private const string UnsupportedMediaTypeValue = "UnsupportedMediaType";
        private const string InvalidImageUrlValue = "InvalidImageUrl";
        private const string NotSupportedFeatureValue = "NotSupportedFeature";
        private const string NotSupportedImageValue = "NotSupportedImage";
        private const string TimeoutValue = "Timeout";
        private const string InternalServerErrorValue = "InternalServerError";
        private const string InvalidImageSizeValue = "InvalidImageSize";
        private const string BadArgumentValue = "BadArgument";
        private const string DetectFaceErrorValue = "DetectFaceError";
        private const string NotSupportedLanguageValue = "NotSupportedLanguage";
        private const string InvalidThumbnailSizeValue = "InvalidThumbnailSize";
        private const string InvalidDetailsValue = "InvalidDetails";
        private const string InvalidModelValue = "InvalidModel";
        private const string CancelledRequestValue = "CancelledRequest";
        private const string NotSupportedVisualFeatureValue = "NotSupportedVisualFeature";
        private const string FailedToProcessValue = "FailedToProcess";
        private const string UnspecifiedValue = "Unspecified";
        private const string StorageExceptionValue = "StorageException";

        /// <summary> InvalidImageFormat. </summary>
        public static ComputerVisionErrorCodes InvalidImageFormat { get; } = new ComputerVisionErrorCodes(InvalidImageFormatValue);
        /// <summary> UnsupportedMediaType. </summary>
        public static ComputerVisionErrorCodes UnsupportedMediaType { get; } = new ComputerVisionErrorCodes(UnsupportedMediaTypeValue);
        /// <summary> InvalidImageUrl. </summary>
        public static ComputerVisionErrorCodes InvalidImageUrl { get; } = new ComputerVisionErrorCodes(InvalidImageUrlValue);
        /// <summary> NotSupportedFeature. </summary>
        public static ComputerVisionErrorCodes NotSupportedFeature { get; } = new ComputerVisionErrorCodes(NotSupportedFeatureValue);
        /// <summary> NotSupportedImage. </summary>
        public static ComputerVisionErrorCodes NotSupportedImage { get; } = new ComputerVisionErrorCodes(NotSupportedImageValue);
        /// <summary> Timeout. </summary>
        public static ComputerVisionErrorCodes Timeout { get; } = new ComputerVisionErrorCodes(TimeoutValue);
        /// <summary> InternalServerError. </summary>
        public static ComputerVisionErrorCodes InternalServerError { get; } = new ComputerVisionErrorCodes(InternalServerErrorValue);
        /// <summary> InvalidImageSize. </summary>
        public static ComputerVisionErrorCodes InvalidImageSize { get; } = new ComputerVisionErrorCodes(InvalidImageSizeValue);
        /// <summary> BadArgument. </summary>
        public static ComputerVisionErrorCodes BadArgument { get; } = new ComputerVisionErrorCodes(BadArgumentValue);
        /// <summary> DetectFaceError. </summary>
        public static ComputerVisionErrorCodes DetectFaceError { get; } = new ComputerVisionErrorCodes(DetectFaceErrorValue);
        /// <summary> NotSupportedLanguage. </summary>
        public static ComputerVisionErrorCodes NotSupportedLanguage { get; } = new ComputerVisionErrorCodes(NotSupportedLanguageValue);
        /// <summary> InvalidThumbnailSize. </summary>
        public static ComputerVisionErrorCodes InvalidThumbnailSize { get; } = new ComputerVisionErrorCodes(InvalidThumbnailSizeValue);
        /// <summary> InvalidDetails. </summary>
        public static ComputerVisionErrorCodes InvalidDetails { get; } = new ComputerVisionErrorCodes(InvalidDetailsValue);
        /// <summary> InvalidModel. </summary>
        public static ComputerVisionErrorCodes InvalidModel { get; } = new ComputerVisionErrorCodes(InvalidModelValue);
        /// <summary> CancelledRequest. </summary>
        public static ComputerVisionErrorCodes CancelledRequest { get; } = new ComputerVisionErrorCodes(CancelledRequestValue);
        /// <summary> NotSupportedVisualFeature. </summary>
        public static ComputerVisionErrorCodes NotSupportedVisualFeature { get; } = new ComputerVisionErrorCodes(NotSupportedVisualFeatureValue);
        /// <summary> FailedToProcess. </summary>
        public static ComputerVisionErrorCodes FailedToProcess { get; } = new ComputerVisionErrorCodes(FailedToProcessValue);
        /// <summary> Unspecified. </summary>
        public static ComputerVisionErrorCodes Unspecified { get; } = new ComputerVisionErrorCodes(UnspecifiedValue);
        /// <summary> StorageException. </summary>
        public static ComputerVisionErrorCodes StorageException { get; } = new ComputerVisionErrorCodes(StorageExceptionValue);
        /// <summary> Determines if two <see cref="ComputerVisionErrorCodes"/> values are the same. </summary>
        public static bool operator ==(ComputerVisionErrorCodes left, ComputerVisionErrorCodes right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ComputerVisionErrorCodes"/> values are not the same. </summary>
        public static bool operator !=(ComputerVisionErrorCodes left, ComputerVisionErrorCodes right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ComputerVisionErrorCodes"/>. </summary>
        public static implicit operator ComputerVisionErrorCodes(string value) => new ComputerVisionErrorCodes(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ComputerVisionErrorCodes other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ComputerVisionErrorCodes other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
