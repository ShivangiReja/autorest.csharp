// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace ComputerVision.Models
{
    public partial class ImageDescription
    {
        internal static ImageDescription DeserializeImageDescription(JsonElement element)
        {
            Optional<string> requestId = default;
            Optional<ImageMetadata> metadata = default;
            Optional<IReadOnlyList<string>> tags = default;
            Optional<IReadOnlyList<ImageCaption>> captions = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("requestId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        requestId = null;
                        continue;
                    }
                    requestId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("metadata"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        metadata = null;
                        continue;
                    }
                    metadata = ImageMetadata.DeserializeImageMetadata(property.Value);
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("tags"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                tags = null;
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                if (item.ValueKind == JsonValueKind.Null)
                                {
                                    array.Add(null);
                                }
                                else
                                {
                                    array.Add(item.GetString());
                                }
                            }
                            tags = array;
                            continue;
                        }
                        if (property0.NameEquals("captions"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                captions = null;
                                continue;
                            }
                            List<ImageCaption> array = new List<ImageCaption>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                if (item.ValueKind == JsonValueKind.Null)
                                {
                                    array.Add(null);
                                }
                                else
                                {
                                    array.Add(ImageCaption.DeserializeImageCaption(item));
                                }
                            }
                            captions = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new ImageDescription(requestId.Value, metadata.Value, Optional.ToList(tags), Optional.ToList(captions));
        }
    }
}
