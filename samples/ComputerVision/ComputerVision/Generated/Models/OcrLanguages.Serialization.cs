// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace ComputerVision.Models
{
    internal static class OcrLanguagesExtensions
    {
        public static string ToSerialString(this OcrLanguages value) => value switch
        {
            OcrLanguages.Unk => "unk",
            OcrLanguages.ZhHans => "zh-Hans",
            OcrLanguages.ZhHant => "zh-Hant",
            OcrLanguages.Cs => "cs",
            OcrLanguages.Da => "da",
            OcrLanguages.Nl => "nl",
            OcrLanguages.En => "en",
            OcrLanguages.Fi => "fi",
            OcrLanguages.Fr => "fr",
            OcrLanguages.De => "de",
            OcrLanguages.El => "el",
            OcrLanguages.Hu => "hu",
            OcrLanguages.It => "it",
            OcrLanguages.Ja => "ja",
            OcrLanguages.Ko => "ko",
            OcrLanguages.Nb => "nb",
            OcrLanguages.Pl => "pl",
            OcrLanguages.Pt => "pt",
            OcrLanguages.Ru => "ru",
            OcrLanguages.Es => "es",
            OcrLanguages.Sv => "sv",
            OcrLanguages.Tr => "tr",
            OcrLanguages.Ar => "ar",
            OcrLanguages.Ro => "ro",
            OcrLanguages.SrCyrl => "sr-Cyrl",
            OcrLanguages.SrLatn => "sr-Latn",
            OcrLanguages.Sk => "sk",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown OcrLanguages value.")
        };

        public static OcrLanguages ToOcrLanguages(this string value)
        {
            if (string.Equals(value, "unk", StringComparison.InvariantCultureIgnoreCase)) return OcrLanguages.Unk;
            if (string.Equals(value, "zh-Hans", StringComparison.InvariantCultureIgnoreCase)) return OcrLanguages.ZhHans;
            if (string.Equals(value, "zh-Hant", StringComparison.InvariantCultureIgnoreCase)) return OcrLanguages.ZhHant;
            if (string.Equals(value, "cs", StringComparison.InvariantCultureIgnoreCase)) return OcrLanguages.Cs;
            if (string.Equals(value, "da", StringComparison.InvariantCultureIgnoreCase)) return OcrLanguages.Da;
            if (string.Equals(value, "nl", StringComparison.InvariantCultureIgnoreCase)) return OcrLanguages.Nl;
            if (string.Equals(value, "en", StringComparison.InvariantCultureIgnoreCase)) return OcrLanguages.En;
            if (string.Equals(value, "fi", StringComparison.InvariantCultureIgnoreCase)) return OcrLanguages.Fi;
            if (string.Equals(value, "fr", StringComparison.InvariantCultureIgnoreCase)) return OcrLanguages.Fr;
            if (string.Equals(value, "de", StringComparison.InvariantCultureIgnoreCase)) return OcrLanguages.De;
            if (string.Equals(value, "el", StringComparison.InvariantCultureIgnoreCase)) return OcrLanguages.El;
            if (string.Equals(value, "hu", StringComparison.InvariantCultureIgnoreCase)) return OcrLanguages.Hu;
            if (string.Equals(value, "it", StringComparison.InvariantCultureIgnoreCase)) return OcrLanguages.It;
            if (string.Equals(value, "ja", StringComparison.InvariantCultureIgnoreCase)) return OcrLanguages.Ja;
            if (string.Equals(value, "ko", StringComparison.InvariantCultureIgnoreCase)) return OcrLanguages.Ko;
            if (string.Equals(value, "nb", StringComparison.InvariantCultureIgnoreCase)) return OcrLanguages.Nb;
            if (string.Equals(value, "pl", StringComparison.InvariantCultureIgnoreCase)) return OcrLanguages.Pl;
            if (string.Equals(value, "pt", StringComparison.InvariantCultureIgnoreCase)) return OcrLanguages.Pt;
            if (string.Equals(value, "ru", StringComparison.InvariantCultureIgnoreCase)) return OcrLanguages.Ru;
            if (string.Equals(value, "es", StringComparison.InvariantCultureIgnoreCase)) return OcrLanguages.Es;
            if (string.Equals(value, "sv", StringComparison.InvariantCultureIgnoreCase)) return OcrLanguages.Sv;
            if (string.Equals(value, "tr", StringComparison.InvariantCultureIgnoreCase)) return OcrLanguages.Tr;
            if (string.Equals(value, "ar", StringComparison.InvariantCultureIgnoreCase)) return OcrLanguages.Ar;
            if (string.Equals(value, "ro", StringComparison.InvariantCultureIgnoreCase)) return OcrLanguages.Ro;
            if (string.Equals(value, "sr-Cyrl", StringComparison.InvariantCultureIgnoreCase)) return OcrLanguages.SrCyrl;
            if (string.Equals(value, "sr-Latn", StringComparison.InvariantCultureIgnoreCase)) return OcrLanguages.SrLatn;
            if (string.Equals(value, "sk", StringComparison.InvariantCultureIgnoreCase)) return OcrLanguages.Sk;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown OcrLanguages value.");
        }
    }
}
