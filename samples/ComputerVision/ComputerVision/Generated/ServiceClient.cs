// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using ComputerVision.Models;

namespace ComputerVision
{
    /// <summary> The Service service client. </summary>
    public partial class ServiceClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal ServiceRestClient RestClient { get; }
        /// <summary> Initializes a new instance of ServiceClient for mocking. </summary>
        protected ServiceClient()
        {
        }
        /// <summary> Initializes a new instance of ServiceClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> Supported Cognitive Services endpoints. </param>
        internal ServiceClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string endpoint)
        {
            RestClient = new ServiceRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Classify an image and saves the result. </summary>
        /// <param name="projectId"> The project id. </param>
        /// <param name="publishedName"> Specifies the name of the model to evaluate against. </param>
        /// <param name="imageData"> Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB. </param>
        /// <param name="application"> Optional. Specifies the name of application using the endpoint. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ImagePrediction>> ClassifyImageAsync(Guid projectId, string publishedName, Stream imageData, string application = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.ClassifyImage");
            scope.Start();
            try
            {
                return await RestClient.ClassifyImageAsync(projectId, publishedName, imageData, application, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Classify an image and saves the result. </summary>
        /// <param name="projectId"> The project id. </param>
        /// <param name="publishedName"> Specifies the name of the model to evaluate against. </param>
        /// <param name="imageData"> Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB. </param>
        /// <param name="application"> Optional. Specifies the name of application using the endpoint. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ImagePrediction> ClassifyImage(Guid projectId, string publishedName, Stream imageData, string application = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.ClassifyImage");
            scope.Start();
            try
            {
                return RestClient.ClassifyImage(projectId, publishedName, imageData, application, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Classify an image without saving the result. </summary>
        /// <param name="projectId"> The project id. </param>
        /// <param name="publishedName"> Specifies the name of the model to evaluate against. </param>
        /// <param name="imageData"> Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB. </param>
        /// <param name="application"> Optional. Specifies the name of application using the endpoint. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ImagePrediction>> ClassifyImageWithNoStoreAsync(Guid projectId, string publishedName, Stream imageData, string application = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.ClassifyImageWithNoStore");
            scope.Start();
            try
            {
                return await RestClient.ClassifyImageWithNoStoreAsync(projectId, publishedName, imageData, application, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Classify an image without saving the result. </summary>
        /// <param name="projectId"> The project id. </param>
        /// <param name="publishedName"> Specifies the name of the model to evaluate against. </param>
        /// <param name="imageData"> Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB. </param>
        /// <param name="application"> Optional. Specifies the name of application using the endpoint. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ImagePrediction> ClassifyImageWithNoStore(Guid projectId, string publishedName, Stream imageData, string application = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.ClassifyImageWithNoStore");
            scope.Start();
            try
            {
                return RestClient.ClassifyImageWithNoStore(projectId, publishedName, imageData, application, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Classify an image url and saves the result. </summary>
        /// <param name="projectId"> The project id. </param>
        /// <param name="publishedName"> Specifies the name of the model to evaluate against. </param>
        /// <param name="imageUrl"> An ImageUrl that contains the url of the image to be evaluated. </param>
        /// <param name="application"> Optional. Specifies the name of application using the endpoint. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ImagePrediction>> ClassifyImageUrlAsync(Guid projectId, string publishedName, ImageUrl imageUrl, string application = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.ClassifyImageUrl");
            scope.Start();
            try
            {
                return await RestClient.ClassifyImageUrlAsync(projectId, publishedName, imageUrl, application, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Classify an image url and saves the result. </summary>
        /// <param name="projectId"> The project id. </param>
        /// <param name="publishedName"> Specifies the name of the model to evaluate against. </param>
        /// <param name="imageUrl"> An ImageUrl that contains the url of the image to be evaluated. </param>
        /// <param name="application"> Optional. Specifies the name of application using the endpoint. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ImagePrediction> ClassifyImageUrl(Guid projectId, string publishedName, ImageUrl imageUrl, string application = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.ClassifyImageUrl");
            scope.Start();
            try
            {
                return RestClient.ClassifyImageUrl(projectId, publishedName, imageUrl, application, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Classify an image url without saving the result. </summary>
        /// <param name="projectId"> The project id. </param>
        /// <param name="publishedName"> Specifies the name of the model to evaluate against. </param>
        /// <param name="imageUrl"> An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be evaluated. </param>
        /// <param name="application"> Optional. Specifies the name of application using the endpoint. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ImagePrediction>> ClassifyImageUrlWithNoStoreAsync(Guid projectId, string publishedName, ImageUrl imageUrl, string application = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.ClassifyImageUrlWithNoStore");
            scope.Start();
            try
            {
                return await RestClient.ClassifyImageUrlWithNoStoreAsync(projectId, publishedName, imageUrl, application, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Classify an image url without saving the result. </summary>
        /// <param name="projectId"> The project id. </param>
        /// <param name="publishedName"> Specifies the name of the model to evaluate against. </param>
        /// <param name="imageUrl"> An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be evaluated. </param>
        /// <param name="application"> Optional. Specifies the name of application using the endpoint. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ImagePrediction> ClassifyImageUrlWithNoStore(Guid projectId, string publishedName, ImageUrl imageUrl, string application = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.ClassifyImageUrlWithNoStore");
            scope.Start();
            try
            {
                return RestClient.ClassifyImageUrlWithNoStore(projectId, publishedName, imageUrl, application, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Detect objects in an image and saves the result. </summary>
        /// <param name="projectId"> The project id. </param>
        /// <param name="publishedName"> Specifies the name of the model to evaluate against. </param>
        /// <param name="imageData"> Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB. </param>
        /// <param name="application"> Optional. Specifies the name of application using the endpoint. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ImagePrediction>> DetectImageAsync(Guid projectId, string publishedName, Stream imageData, string application = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.DetectImage");
            scope.Start();
            try
            {
                return await RestClient.DetectImageAsync(projectId, publishedName, imageData, application, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Detect objects in an image and saves the result. </summary>
        /// <param name="projectId"> The project id. </param>
        /// <param name="publishedName"> Specifies the name of the model to evaluate against. </param>
        /// <param name="imageData"> Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB. </param>
        /// <param name="application"> Optional. Specifies the name of application using the endpoint. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ImagePrediction> DetectImage(Guid projectId, string publishedName, Stream imageData, string application = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.DetectImage");
            scope.Start();
            try
            {
                return RestClient.DetectImage(projectId, publishedName, imageData, application, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Detect objects in an image without saving the result. </summary>
        /// <param name="projectId"> The project id. </param>
        /// <param name="publishedName"> Specifies the name of the model to evaluate against. </param>
        /// <param name="imageData"> Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB. </param>
        /// <param name="application"> Optional. Specifies the name of application using the endpoint. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ImagePrediction>> DetectImageWithNoStoreAsync(Guid projectId, string publishedName, Stream imageData, string application = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.DetectImageWithNoStore");
            scope.Start();
            try
            {
                return await RestClient.DetectImageWithNoStoreAsync(projectId, publishedName, imageData, application, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Detect objects in an image without saving the result. </summary>
        /// <param name="projectId"> The project id. </param>
        /// <param name="publishedName"> Specifies the name of the model to evaluate against. </param>
        /// <param name="imageData"> Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB. </param>
        /// <param name="application"> Optional. Specifies the name of application using the endpoint. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ImagePrediction> DetectImageWithNoStore(Guid projectId, string publishedName, Stream imageData, string application = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.DetectImageWithNoStore");
            scope.Start();
            try
            {
                return RestClient.DetectImageWithNoStore(projectId, publishedName, imageData, application, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Detect objects in an image url and saves the result. </summary>
        /// <param name="projectId"> The project id. </param>
        /// <param name="publishedName"> Specifies the name of the model to evaluate against. </param>
        /// <param name="imageUrl"> An ImageUrl that contains the url of the image to be evaluated. </param>
        /// <param name="application"> Optional. Specifies the name of application using the endpoint. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ImagePrediction>> DetectImageUrlAsync(Guid projectId, string publishedName, ImageUrl imageUrl, string application = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.DetectImageUrl");
            scope.Start();
            try
            {
                return await RestClient.DetectImageUrlAsync(projectId, publishedName, imageUrl, application, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Detect objects in an image url and saves the result. </summary>
        /// <param name="projectId"> The project id. </param>
        /// <param name="publishedName"> Specifies the name of the model to evaluate against. </param>
        /// <param name="imageUrl"> An ImageUrl that contains the url of the image to be evaluated. </param>
        /// <param name="application"> Optional. Specifies the name of application using the endpoint. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ImagePrediction> DetectImageUrl(Guid projectId, string publishedName, ImageUrl imageUrl, string application = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.DetectImageUrl");
            scope.Start();
            try
            {
                return RestClient.DetectImageUrl(projectId, publishedName, imageUrl, application, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Detect objects in an image url without saving the result. </summary>
        /// <param name="projectId"> The project id. </param>
        /// <param name="publishedName"> Specifies the name of the model to evaluate against. </param>
        /// <param name="imageUrl"> An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be evaluated. </param>
        /// <param name="application"> Optional. Specifies the name of application using the endpoint. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ImagePrediction>> DetectImageUrlWithNoStoreAsync(Guid projectId, string publishedName, ImageUrl imageUrl, string application = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.DetectImageUrlWithNoStore");
            scope.Start();
            try
            {
                return await RestClient.DetectImageUrlWithNoStoreAsync(projectId, publishedName, imageUrl, application, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Detect objects in an image url without saving the result. </summary>
        /// <param name="projectId"> The project id. </param>
        /// <param name="publishedName"> Specifies the name of the model to evaluate against. </param>
        /// <param name="imageUrl"> An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be evaluated. </param>
        /// <param name="application"> Optional. Specifies the name of application using the endpoint. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ImagePrediction> DetectImageUrlWithNoStore(Guid projectId, string publishedName, ImageUrl imageUrl, string application = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.DetectImageUrlWithNoStore");
            scope.Start();
            try
            {
                return RestClient.DetectImageUrlWithNoStore(projectId, publishedName, imageUrl, application, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
