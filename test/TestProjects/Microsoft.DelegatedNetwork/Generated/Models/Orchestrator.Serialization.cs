// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Microsoft.DelegatedNetwork.Models
{
    public partial class Orchestrator : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Location))
            {
                writer.WritePropertyName("location");
                writer.WriteStringValue(Location);
            }
            writer.WritePropertyName("kind");
            writer.WriteStringValue(Kind.ToString());
            if (Optional.IsDefined(Identity))
            {
                writer.WritePropertyName("identity");
                writer.WriteObjectValue(Identity);
            }
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags");
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(OrchestratorAppId))
            {
                writer.WritePropertyName("orchestratorAppId");
                writer.WriteStringValue(OrchestratorAppId);
            }
            if (Optional.IsDefined(OrchestratorTenantId))
            {
                writer.WritePropertyName("orchestratorTenantId");
                writer.WriteStringValue(OrchestratorTenantId);
            }
            if (Optional.IsDefined(ClusterRootCA))
            {
                writer.WritePropertyName("clusterRootCA");
                writer.WriteStringValue(ClusterRootCA);
            }
            if (Optional.IsDefined(ApiServerEndpoint))
            {
                writer.WritePropertyName("apiServerEndpoint");
                writer.WriteStringValue(ApiServerEndpoint);
            }
            if (Optional.IsDefined(PrivateLinkResourceId))
            {
                writer.WritePropertyName("privateLinkResourceId");
                writer.WriteStringValue(PrivateLinkResourceId);
            }
            if (Optional.IsDefined(ControllerDetails))
            {
                writer.WritePropertyName("controllerDetails");
                writer.WriteObjectValue(ControllerDetails);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static Orchestrator DeserializeOrchestrator(JsonElement element)
        {
            Optional<string> id = default;
            Optional<string> name = default;
            Optional<string> type = default;
            Optional<string> location = default;
            OrchestratorKind kind = default;
            Optional<OrchestratorIdentity> identity = default;
            Optional<IDictionary<string, string>> tags = default;
            Optional<string> resourceGuid = default;
            Optional<OrchestratorInstanceState> provisioningState = default;
            Optional<string> orchestratorAppId = default;
            Optional<string> orchestratorTenantId = default;
            Optional<string> clusterRootCA = default;
            Optional<string> apiServerEndpoint = default;
            Optional<string> privateLinkResourceId = default;
            Optional<ControllerDetails> controllerDetails = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("location"))
                {
                    location = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("kind"))
                {
                    kind = new OrchestratorKind(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("identity"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    identity = OrchestratorIdentity.DeserializeOrchestratorIdentity(property.Value);
                    continue;
                }
                if (property.NameEquals("tags"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("resourceGuid"))
                        {
                            resourceGuid = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            provisioningState = new OrchestratorInstanceState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("orchestratorAppId"))
                        {
                            orchestratorAppId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("orchestratorTenantId"))
                        {
                            orchestratorTenantId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("clusterRootCA"))
                        {
                            clusterRootCA = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("apiServerEndpoint"))
                        {
                            apiServerEndpoint = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("privateLinkResourceId"))
                        {
                            privateLinkResourceId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("controllerDetails"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            controllerDetails = ControllerDetails.DeserializeControllerDetails(property0.Value);
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new Orchestrator(id.Value, name.Value, type.Value, location.Value, kind, identity.Value, Optional.ToDictionary(tags), resourceGuid.Value, Optional.ToNullable(provisioningState), orchestratorAppId.Value, orchestratorTenantId.Value, clusterRootCA.Value, apiServerEndpoint.Value, privateLinkResourceId.Value, controllerDetails.Value);
        }
    }
}
