// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;

namespace Microsoft.DelegatedNetwork.Models
{
    /// <summary> Represents an instance of a orchestrator. </summary>
    public partial class Orchestrator : OrchestratorResource
    {
        /// <summary> Initializes a new instance of Orchestrator. </summary>
        /// <param name="kind"> The kind of workbook. Choices are user and shared. </param>
        public Orchestrator(OrchestratorKind kind) : base(kind)
        {
        }

        /// <summary> Initializes a new instance of Orchestrator. </summary>
        /// <param name="id"> An identifier that represents the resource. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of resource. </param>
        /// <param name="location"> Location of the resource. </param>
        /// <param name="kind"> The kind of workbook. Choices are user and shared. </param>
        /// <param name="identity"> The identity of the orchestrator. </param>
        /// <param name="tags"> The resource tags. </param>
        /// <param name="resourceGuid"> Resource guid. </param>
        /// <param name="provisioningState"> The current state of orchestratorInstance resource. </param>
        /// <param name="orchestratorAppId"> AAD ID used with apiserver. </param>
        /// <param name="orchestratorTenantId"> TenantID of server App ID. </param>
        /// <param name="clusterRootCA"> RootCA certificate of kubernetes cluster base64 encoded. </param>
        /// <param name="apiServerEndpoint"> K8s APIServer url. Either one of apiServerEndpoint or privateLinkResourceId can be specified. </param>
        /// <param name="privateLinkResourceId"> private link arm resource id. Either one of apiServerEndpoint or privateLinkResourceId can be specified. </param>
        /// <param name="controllerDetails"> Properties of the controller. </param>
        internal Orchestrator(string id, string name, string type, string location, OrchestratorKind kind, OrchestratorIdentity identity, IDictionary<string, string> tags, string resourceGuid, OrchestratorInstanceState? provisioningState, string orchestratorAppId, string orchestratorTenantId, string clusterRootCA, string apiServerEndpoint, string privateLinkResourceId, ControllerDetails controllerDetails) : base(id, name, type, location, kind, identity, tags)
        {
            ResourceGuid = resourceGuid;
            ProvisioningState = provisioningState;
            OrchestratorAppId = orchestratorAppId;
            OrchestratorTenantId = orchestratorTenantId;
            ClusterRootCA = clusterRootCA;
            ApiServerEndpoint = apiServerEndpoint;
            PrivateLinkResourceId = privateLinkResourceId;
            ControllerDetails = controllerDetails;
        }

        /// <summary> Resource guid. </summary>
        public string ResourceGuid { get; }
        /// <summary> The current state of orchestratorInstance resource. </summary>
        public OrchestratorInstanceState? ProvisioningState { get; }
        /// <summary> AAD ID used with apiserver. </summary>
        public string OrchestratorAppId { get; set; }
        /// <summary> TenantID of server App ID. </summary>
        public string OrchestratorTenantId { get; set; }
        /// <summary> RootCA certificate of kubernetes cluster base64 encoded. </summary>
        public string ClusterRootCA { get; set; }
        /// <summary> K8s APIServer url. Either one of apiServerEndpoint or privateLinkResourceId can be specified. </summary>
        public string ApiServerEndpoint { get; set; }
        /// <summary> private link arm resource id. Either one of apiServerEndpoint or privateLinkResourceId can be specified. </summary>
        public string PrivateLinkResourceId { get; set; }
        /// <summary> Properties of the controller. </summary>
        public ControllerDetails ControllerDetails { get; set; }
    }
}
