// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using SignalR.Models;

namespace SignalR
{
    /// <summary> The WebPubSub service client. </summary>
    public partial class WebPubSubClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal WebPubSubRestClient RestClient { get; }

        /// <summary> Initializes a new instance of WebPubSubClient for mocking. </summary>
        protected WebPubSubClient()
        {
        }

        /// <summary> Initializes a new instance of WebPubSubClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal WebPubSubClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null, string apiVersion = "2020-10-01")
        {
            RestClient = new WebPubSubRestClient(clientDiagnostics, pipeline, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Broadcast content inside request body to all the connected client connections. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> SendToAllAsync(string hub, ContentType contentType, Stream payloadMessage, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.SendToAll");
            scope.Start();
            try
            {
                return await RestClient.SendToAllAsync(hub, contentType, payloadMessage, excluded, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Broadcast content inside request body to all the connected client connections. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response SendToAll(string hub, ContentType contentType, Stream payloadMessage, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.SendToAll");
            scope.Start();
            try
            {
                return RestClient.SendToAll(hub, contentType, payloadMessage, excluded, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Broadcast content inside request body to all the connected client connections. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> SendToAllAsync(string hub, string payloadMessage, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.SendToAll");
            scope.Start();
            try
            {
                return await RestClient.SendToAllAsync(hub, payloadMessage, excluded, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Broadcast content inside request body to all the connected client connections. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response SendToAll(string hub, string payloadMessage, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.SendToAll");
            scope.Start();
            try
            {
                return RestClient.SendToAll(hub, payloadMessage, excluded, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Check if the connection with the given connectionId exists. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CheckConnectionExistenceAsync(string hub, string connectionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.CheckConnectionExistence");
            scope.Start();
            try
            {
                return await RestClient.CheckConnectionExistenceAsync(hub, connectionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Check if the connection with the given connectionId exists. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CheckConnectionExistence(string hub, string connectionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.CheckConnectionExistence");
            scope.Start();
            try
            {
                return RestClient.CheckConnectionExistence(hub, connectionId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Close the client connection. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="reason"> The reason closing the client connection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CloseClientConnectionAsync(string hub, string connectionId, string reason = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.CloseClientConnection");
            scope.Start();
            try
            {
                return await RestClient.CloseClientConnectionAsync(hub, connectionId, reason, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Close the client connection. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="reason"> The reason closing the client connection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CloseClientConnection(string hub, string connectionId, string reason = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.CloseClientConnection");
            scope.Start();
            try
            {
                return RestClient.CloseClientConnection(hub, connectionId, reason, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> SendToConnectionAsync(string hub, string connectionId, ContentType contentType, Stream payloadMessage, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.SendToConnection");
            scope.Start();
            try
            {
                return await RestClient.SendToConnectionAsync(hub, connectionId, contentType, payloadMessage, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response SendToConnection(string hub, string connectionId, ContentType contentType, Stream payloadMessage, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.SendToConnection");
            scope.Start();
            try
            {
                return RestClient.SendToConnection(hub, connectionId, contentType, payloadMessage, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> SendToConnectionAsync(string hub, string connectionId, string payloadMessage, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.SendToConnection");
            scope.Start();
            try
            {
                return await RestClient.SendToConnectionAsync(hub, connectionId, payloadMessage, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response SendToConnection(string hub, string connectionId, string payloadMessage, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.SendToConnection");
            scope.Start();
            try
            {
                return RestClient.SendToConnection(hub, connectionId, payloadMessage, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Check if there are any client connections inside the given group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CheckGroupExistenceAsync(string hub, string group, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.CheckGroupExistence");
            scope.Start();
            try
            {
                return await RestClient.CheckGroupExistenceAsync(hub, group, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Check if there are any client connections inside the given group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CheckGroupExistence(string hub, string group, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.CheckGroupExistence");
            scope.Start();
            try
            {
                return RestClient.CheckGroupExistence(hub, group, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> SendToGroupAsync(string hub, string group, ContentType contentType, Stream payloadMessage, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.SendToGroup");
            scope.Start();
            try
            {
                return await RestClient.SendToGroupAsync(hub, group, contentType, payloadMessage, excluded, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response SendToGroup(string hub, string group, ContentType contentType, Stream payloadMessage, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.SendToGroup");
            scope.Start();
            try
            {
                return RestClient.SendToGroup(hub, group, contentType, payloadMessage, excluded, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> SendToGroupAsync(string hub, string group, string payloadMessage, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.SendToGroup");
            scope.Start();
            try
            {
                return await RestClient.SendToGroupAsync(hub, group, payloadMessage, excluded, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response SendToGroup(string hub, string group, string payloadMessage, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.SendToGroup");
            scope.Start();
            try
            {
                return RestClient.SendToGroup(hub, group, payloadMessage, excluded, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add a connection to the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> AddConnectionToGroupAsync(string hub, string group, string connectionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.AddConnectionToGroup");
            scope.Start();
            try
            {
                return await RestClient.AddConnectionToGroupAsync(hub, group, connectionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add a connection to the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response AddConnectionToGroup(string hub, string group, string connectionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.AddConnectionToGroup");
            scope.Start();
            try
            {
                return RestClient.AddConnectionToGroup(hub, group, connectionId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Remove a connection from the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> RemoveConnectionFromGroupAsync(string hub, string group, string connectionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.RemoveConnectionFromGroup");
            scope.Start();
            try
            {
                return await RestClient.RemoveConnectionFromGroupAsync(hub, group, connectionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Remove a connection from the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response RemoveConnectionFromGroup(string hub, string group, string connectionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.RemoveConnectionFromGroup");
            scope.Start();
            try
            {
                return RestClient.RemoveConnectionFromGroup(hub, group, connectionId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Check if there are any client connections connected for the given user. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CheckUserExistenceAsync(string hub, string userId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.CheckUserExistence");
            scope.Start();
            try
            {
                return await RestClient.CheckUserExistenceAsync(hub, userId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Check if there are any client connections connected for the given user. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CheckUserExistence(string hub, string userId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.CheckUserExistence");
            scope.Start();
            try
            {
                return RestClient.CheckUserExistence(hub, userId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="userId"> The user Id. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> SendToUserAsync(string hub, string userId, ContentType contentType, Stream payloadMessage, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.SendToUser");
            scope.Start();
            try
            {
                return await RestClient.SendToUserAsync(hub, userId, contentType, payloadMessage, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="userId"> The user Id. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response SendToUser(string hub, string userId, ContentType contentType, Stream payloadMessage, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.SendToUser");
            scope.Start();
            try
            {
                return RestClient.SendToUser(hub, userId, contentType, payloadMessage, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="userId"> The user Id. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> SendToUserAsync(string hub, string userId, string payloadMessage, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.SendToUser");
            scope.Start();
            try
            {
                return await RestClient.SendToUserAsync(hub, userId, payloadMessage, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="userId"> The user Id. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response SendToUser(string hub, string userId, string payloadMessage, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.SendToUser");
            scope.Start();
            try
            {
                return RestClient.SendToUser(hub, userId, payloadMessage, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Check whether a user exists in the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CheckUserExistenceInGroupAsync(string hub, string group, string userId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.CheckUserExistenceInGroup");
            scope.Start();
            try
            {
                return await RestClient.CheckUserExistenceInGroupAsync(hub, group, userId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Check whether a user exists in the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CheckUserExistenceInGroup(string hub, string group, string userId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.CheckUserExistenceInGroup");
            scope.Start();
            try
            {
                return RestClient.CheckUserExistenceInGroup(hub, group, userId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add a user to the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> AddUserToGroupAsync(string hub, string group, string userId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.AddUserToGroup");
            scope.Start();
            try
            {
                return await RestClient.AddUserToGroupAsync(hub, group, userId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add a user to the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response AddUserToGroup(string hub, string group, string userId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.AddUserToGroup");
            scope.Start();
            try
            {
                return RestClient.AddUserToGroup(hub, group, userId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Remove a user from the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> RemoveUserFromGroupAsync(string hub, string group, string userId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.RemoveUserFromGroup");
            scope.Start();
            try
            {
                return await RestClient.RemoveUserFromGroupAsync(hub, group, userId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Remove a user from the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response RemoveUserFromGroup(string hub, string group, string userId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.RemoveUserFromGroup");
            scope.Start();
            try
            {
                return RestClient.RemoveUserFromGroup(hub, group, userId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Remove a user from all groups. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> RemoveUserFromAllGroupsAsync(string hub, string userId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.RemoveUserFromAllGroups");
            scope.Start();
            try
            {
                return await RestClient.RemoveUserFromAllGroupsAsync(hub, userId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Remove a user from all groups. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response RemoveUserFromAllGroups(string hub, string userId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.RemoveUserFromAllGroups");
            scope.Start();
            try
            {
                return RestClient.RemoveUserFromAllGroups(hub, userId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Grant permission to the connection. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="targetName"> Optional. If not set, grant the permission to all the targets. If set, grant the permission to the specific target. The meaning of the target depends on the specific permission. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GrantPermissionAsync(string hub, Permission permission, string connectionId, string targetName = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.GrantPermission");
            scope.Start();
            try
            {
                return await RestClient.GrantPermissionAsync(hub, permission, connectionId, targetName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Grant permission to the connection. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="targetName"> Optional. If not set, grant the permission to all the targets. If set, grant the permission to the specific target. The meaning of the target depends on the specific permission. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GrantPermission(string hub, Permission permission, string connectionId, string targetName = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.GrantPermission");
            scope.Start();
            try
            {
                return RestClient.GrantPermission(hub, permission, connectionId, targetName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Revoke permission for the connection. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="targetName"> Optional. If not set, revoke the permission for all targets. If set, revoke the permission for the specific target. The meaning of the target depends on the specific permission. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> RevokePermissionAsync(string hub, Permission permission, string connectionId, string targetName = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.RevokePermission");
            scope.Start();
            try
            {
                return await RestClient.RevokePermissionAsync(hub, permission, connectionId, targetName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Revoke permission for the connection. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="targetName"> Optional. If not set, revoke the permission for all targets. If set, revoke the permission for the specific target. The meaning of the target depends on the specific permission. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response RevokePermission(string hub, Permission permission, string connectionId, string targetName = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.RevokePermission");
            scope.Start();
            try
            {
                return RestClient.RevokePermission(hub, permission, connectionId, targetName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Check if a connection have permission to the specific action. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="targetName"> Optional. If not set, get the permission for all targets. If set, get the permission for the specific target. The meaning of the target depends on the specific permission. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CheckPermissionAsync(string hub, Permission permission, string connectionId, string targetName = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.CheckPermission");
            scope.Start();
            try
            {
                return await RestClient.CheckPermissionAsync(hub, permission, connectionId, targetName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Check if a connection have permission to the specific action. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="targetName"> Optional. If not set, get the permission for all targets. If set, get the permission for the specific target. The meaning of the target depends on the specific permission. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CheckPermission(string hub, Permission permission, string connectionId, string targetName = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WebPubSubClient.CheckPermission");
            scope.Start();
            try
            {
                return RestClient.CheckPermission(hub, permission, connectionId, targetName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
