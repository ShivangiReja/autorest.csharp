// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace SignalR.Models
{
    /// <summary> The Permission. </summary>
    public readonly partial struct Permission : IEquatable<Permission>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="Permission"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Permission(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SendToGroupValue = "sendToGroup";
        private const string JoinLeaveGroupValue = "joinLeaveGroup";

        /// <summary> sendToGroup. </summary>
        public static Permission SendToGroup { get; } = new Permission(SendToGroupValue);
        /// <summary> joinLeaveGroup. </summary>
        public static Permission JoinLeaveGroup { get; } = new Permission(JoinLeaveGroupValue);
        /// <summary> Determines if two <see cref="Permission"/> values are the same. </summary>
        public static bool operator ==(Permission left, Permission right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Permission"/> values are not the same. </summary>
        public static bool operator !=(Permission left, Permission right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Permission"/>. </summary>
        public static implicit operator Permission(string value) => new Permission(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Permission other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Permission other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
