// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using SignalR.Models;

namespace SignalR
{
    internal partial class WebPubSubRestClient
    {
        private Uri endpoint;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of WebPubSubRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        public WebPubSubRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null, string apiVersion = "2020-10-01")
        {
            endpoint ??= new Uri("");

            this.endpoint = endpoint;
            this.apiVersion = apiVersion;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateSendToAllRequest(string hub, ContentType contentType, Stream payloadMessage, IEnumerable<string> excluded)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/:send", false);
            if (excluded != null)
            {
                uri.AppendQueryDelimited("excluded", excluded, ",", true);
            }
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", contentType.ToSerialString());
            request.Content = RequestContent.Create(payloadMessage);
            return message;
        }

        /// <summary> Broadcast content inside request body to all the connected client connections. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/> or <paramref name="payloadMessage"/> is null. </exception>
        public async Task<Response> SendToAllAsync(string hub, ContentType contentType, Stream payloadMessage, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (payloadMessage == null)
            {
                throw new ArgumentNullException(nameof(payloadMessage));
            }

            using var message = CreateSendToAllRequest(hub, contentType, payloadMessage, excluded);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Broadcast content inside request body to all the connected client connections. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/> or <paramref name="payloadMessage"/> is null. </exception>
        public Response SendToAll(string hub, ContentType contentType, Stream payloadMessage, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (payloadMessage == null)
            {
                throw new ArgumentNullException(nameof(payloadMessage));
            }

            using var message = CreateSendToAllRequest(hub, contentType, payloadMessage, excluded);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSendToAllRequest(string hub, string payloadMessage, IEnumerable<string> excluded)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/:send", false);
            if (excluded != null)
            {
                uri.AppendQueryDelimited("excluded", excluded, ",", true);
            }
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "text/plain");
            request.Content = new StringRequestContent(payloadMessage);
            return message;
        }

        /// <summary> Broadcast content inside request body to all the connected client connections. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/> or <paramref name="payloadMessage"/> is null. </exception>
        public async Task<Response> SendToAllAsync(string hub, string payloadMessage, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (payloadMessage == null)
            {
                throw new ArgumentNullException(nameof(payloadMessage));
            }

            using var message = CreateSendToAllRequest(hub, payloadMessage, excluded);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Broadcast content inside request body to all the connected client connections. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/> or <paramref name="payloadMessage"/> is null. </exception>
        public Response SendToAll(string hub, string payloadMessage, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (payloadMessage == null)
            {
                throw new ArgumentNullException(nameof(payloadMessage));
            }

            using var message = CreateSendToAllRequest(hub, payloadMessage, excluded);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCheckConnectionExistenceRequest(string hub, string connectionId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            return message;
        }

        /// <summary> Check if the connection with the given connectionId exists. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/> or <paramref name="connectionId"/> is null. </exception>
        public async Task<Response> CheckConnectionExistenceAsync(string hub, string connectionId, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateCheckConnectionExistenceRequest(hub, connectionId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Check if the connection with the given connectionId exists. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/> or <paramref name="connectionId"/> is null. </exception>
        public Response CheckConnectionExistence(string hub, string connectionId, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateCheckConnectionExistenceRequest(hub, connectionId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCloseClientConnectionRequest(string hub, string connectionId, string reason)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            if (reason != null)
            {
                uri.AppendQuery("reason", reason, true);
            }
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            return message;
        }

        /// <summary> Close the client connection. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="reason"> The reason closing the client connection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/> or <paramref name="connectionId"/> is null. </exception>
        public async Task<Response> CloseClientConnectionAsync(string hub, string connectionId, string reason = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateCloseClientConnectionRequest(hub, connectionId, reason);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Close the client connection. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="reason"> The reason closing the client connection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/> or <paramref name="connectionId"/> is null. </exception>
        public Response CloseClientConnection(string hub, string connectionId, string reason = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateCloseClientConnectionRequest(hub, connectionId, reason);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSendToConnectionRequest(string hub, string connectionId, ContentType contentType, Stream payloadMessage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            uri.AppendPath("/:send", false);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", contentType.ToSerialString());
            request.Content = RequestContent.Create(payloadMessage);
            return message;
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/>, <paramref name="connectionId"/>, or <paramref name="payloadMessage"/> is null. </exception>
        public async Task<Response> SendToConnectionAsync(string hub, string connectionId, ContentType contentType, Stream payloadMessage, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }
            if (payloadMessage == null)
            {
                throw new ArgumentNullException(nameof(payloadMessage));
            }

            using var message = CreateSendToConnectionRequest(hub, connectionId, contentType, payloadMessage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/>, <paramref name="connectionId"/>, or <paramref name="payloadMessage"/> is null. </exception>
        public Response SendToConnection(string hub, string connectionId, ContentType contentType, Stream payloadMessage, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }
            if (payloadMessage == null)
            {
                throw new ArgumentNullException(nameof(payloadMessage));
            }

            using var message = CreateSendToConnectionRequest(hub, connectionId, contentType, payloadMessage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSendToConnectionRequest(string hub, string connectionId, string payloadMessage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            uri.AppendPath("/:send", false);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "text/plain");
            request.Content = new StringRequestContent(payloadMessage);
            return message;
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/>, <paramref name="connectionId"/>, or <paramref name="payloadMessage"/> is null. </exception>
        public async Task<Response> SendToConnectionAsync(string hub, string connectionId, string payloadMessage, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }
            if (payloadMessage == null)
            {
                throw new ArgumentNullException(nameof(payloadMessage));
            }

            using var message = CreateSendToConnectionRequest(hub, connectionId, payloadMessage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/>, <paramref name="connectionId"/>, or <paramref name="payloadMessage"/> is null. </exception>
        public Response SendToConnection(string hub, string connectionId, string payloadMessage, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }
            if (payloadMessage == null)
            {
                throw new ArgumentNullException(nameof(payloadMessage));
            }

            using var message = CreateSendToConnectionRequest(hub, connectionId, payloadMessage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCheckGroupExistenceRequest(string hub, string group)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            return message;
        }

        /// <summary> Check if there are any client connections inside the given group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/> or <paramref name="group"/> is null. </exception>
        public async Task<Response> CheckGroupExistenceAsync(string hub, string group, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }

            using var message = CreateCheckGroupExistenceRequest(hub, group);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Check if there are any client connections inside the given group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/> or <paramref name="group"/> is null. </exception>
        public Response CheckGroupExistence(string hub, string group, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }

            using var message = CreateCheckGroupExistenceRequest(hub, group);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSendToGroupRequest(string hub, string group, ContentType contentType, Stream payloadMessage, IEnumerable<string> excluded)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            uri.AppendPath("/:send", false);
            if (excluded != null)
            {
                uri.AppendQueryDelimited("excluded", excluded, ",", true);
            }
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", contentType.ToSerialString());
            request.Content = RequestContent.Create(payloadMessage);
            return message;
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/>, <paramref name="group"/>, or <paramref name="payloadMessage"/> is null. </exception>
        public async Task<Response> SendToGroupAsync(string hub, string group, ContentType contentType, Stream payloadMessage, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (payloadMessage == null)
            {
                throw new ArgumentNullException(nameof(payloadMessage));
            }

            using var message = CreateSendToGroupRequest(hub, group, contentType, payloadMessage, excluded);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/>, <paramref name="group"/>, or <paramref name="payloadMessage"/> is null. </exception>
        public Response SendToGroup(string hub, string group, ContentType contentType, Stream payloadMessage, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (payloadMessage == null)
            {
                throw new ArgumentNullException(nameof(payloadMessage));
            }

            using var message = CreateSendToGroupRequest(hub, group, contentType, payloadMessage, excluded);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSendToGroupRequest(string hub, string group, string payloadMessage, IEnumerable<string> excluded)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            uri.AppendPath("/:send", false);
            if (excluded != null)
            {
                uri.AppendQueryDelimited("excluded", excluded, ",", true);
            }
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "text/plain");
            request.Content = new StringRequestContent(payloadMessage);
            return message;
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/>, <paramref name="group"/>, or <paramref name="payloadMessage"/> is null. </exception>
        public async Task<Response> SendToGroupAsync(string hub, string group, string payloadMessage, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (payloadMessage == null)
            {
                throw new ArgumentNullException(nameof(payloadMessage));
            }

            using var message = CreateSendToGroupRequest(hub, group, payloadMessage, excluded);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/>, <paramref name="group"/>, or <paramref name="payloadMessage"/> is null. </exception>
        public Response SendToGroup(string hub, string group, string payloadMessage, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (payloadMessage == null)
            {
                throw new ArgumentNullException(nameof(payloadMessage));
            }

            using var message = CreateSendToGroupRequest(hub, group, payloadMessage, excluded);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAddConnectionToGroupRequest(string hub, string group, string connectionId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            return message;
        }

        /// <summary> Add a connection to the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/>, <paramref name="group"/>, or <paramref name="connectionId"/> is null. </exception>
        public async Task<Response> AddConnectionToGroupAsync(string hub, string group, string connectionId, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateAddConnectionToGroupRequest(hub, group, connectionId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Add a connection to the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/>, <paramref name="group"/>, or <paramref name="connectionId"/> is null. </exception>
        public Response AddConnectionToGroup(string hub, string group, string connectionId, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateAddConnectionToGroupRequest(hub, group, connectionId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRemoveConnectionFromGroupRequest(string hub, string group, string connectionId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            return message;
        }

        /// <summary> Remove a connection from the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/>, <paramref name="group"/>, or <paramref name="connectionId"/> is null. </exception>
        public async Task<Response> RemoveConnectionFromGroupAsync(string hub, string group, string connectionId, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateRemoveConnectionFromGroupRequest(hub, group, connectionId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Remove a connection from the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/>, <paramref name="group"/>, or <paramref name="connectionId"/> is null. </exception>
        public Response RemoveConnectionFromGroup(string hub, string group, string connectionId, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateRemoveConnectionFromGroupRequest(hub, group, connectionId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCheckUserExistenceRequest(string hub, string userId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            return message;
        }

        /// <summary> Check if there are any client connections connected for the given user. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/> or <paramref name="userId"/> is null. </exception>
        public async Task<Response> CheckUserExistenceAsync(string hub, string userId, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateCheckUserExistenceRequest(hub, userId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Check if there are any client connections connected for the given user. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/> or <paramref name="userId"/> is null. </exception>
        public Response CheckUserExistence(string hub, string userId, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateCheckUserExistenceRequest(hub, userId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSendToUserRequest(string hub, string userId, ContentType contentType, Stream payloadMessage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/:send", false);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", contentType.ToSerialString());
            request.Content = RequestContent.Create(payloadMessage);
            return message;
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="userId"> The user Id. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/>, <paramref name="userId"/>, or <paramref name="payloadMessage"/> is null. </exception>
        public async Task<Response> SendToUserAsync(string hub, string userId, ContentType contentType, Stream payloadMessage, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }
            if (payloadMessage == null)
            {
                throw new ArgumentNullException(nameof(payloadMessage));
            }

            using var message = CreateSendToUserRequest(hub, userId, contentType, payloadMessage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="userId"> The user Id. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/>, <paramref name="userId"/>, or <paramref name="payloadMessage"/> is null. </exception>
        public Response SendToUser(string hub, string userId, ContentType contentType, Stream payloadMessage, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }
            if (payloadMessage == null)
            {
                throw new ArgumentNullException(nameof(payloadMessage));
            }

            using var message = CreateSendToUserRequest(hub, userId, contentType, payloadMessage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSendToUserRequest(string hub, string userId, string payloadMessage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/:send", false);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "text/plain");
            request.Content = new StringRequestContent(payloadMessage);
            return message;
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="userId"> The user Id. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/>, <paramref name="userId"/>, or <paramref name="payloadMessage"/> is null. </exception>
        public async Task<Response> SendToUserAsync(string hub, string userId, string payloadMessage, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }
            if (payloadMessage == null)
            {
                throw new ArgumentNullException(nameof(payloadMessage));
            }

            using var message = CreateSendToUserRequest(hub, userId, payloadMessage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="userId"> The user Id. </param>
        /// <param name="payloadMessage"> The payload body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/>, <paramref name="userId"/>, or <paramref name="payloadMessage"/> is null. </exception>
        public Response SendToUser(string hub, string userId, string payloadMessage, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }
            if (payloadMessage == null)
            {
                throw new ArgumentNullException(nameof(payloadMessage));
            }

            using var message = CreateSendToUserRequest(hub, userId, payloadMessage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCheckUserExistenceInGroupRequest(string hub, string group, string userId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            return message;
        }

        /// <summary> Check whether a user exists in the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/>, <paramref name="group"/>, or <paramref name="userId"/> is null. </exception>
        public async Task<Response> CheckUserExistenceInGroupAsync(string hub, string group, string userId, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateCheckUserExistenceInGroupRequest(hub, group, userId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Check whether a user exists in the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/>, <paramref name="group"/>, or <paramref name="userId"/> is null. </exception>
        public Response CheckUserExistenceInGroup(string hub, string group, string userId, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateCheckUserExistenceInGroupRequest(hub, group, userId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAddUserToGroupRequest(string hub, string group, string userId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            return message;
        }

        /// <summary> Add a user to the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/>, <paramref name="group"/>, or <paramref name="userId"/> is null. </exception>
        public async Task<Response> AddUserToGroupAsync(string hub, string group, string userId, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateAddUserToGroupRequest(hub, group, userId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Add a user to the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/>, <paramref name="group"/>, or <paramref name="userId"/> is null. </exception>
        public Response AddUserToGroup(string hub, string group, string userId, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateAddUserToGroupRequest(hub, group, userId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRemoveUserFromGroupRequest(string hub, string group, string userId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            return message;
        }

        /// <summary> Remove a user from the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/>, <paramref name="group"/>, or <paramref name="userId"/> is null. </exception>
        public async Task<Response> RemoveUserFromGroupAsync(string hub, string group, string userId, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateRemoveUserFromGroupRequest(hub, group, userId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Remove a user from the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/>, <paramref name="group"/>, or <paramref name="userId"/> is null. </exception>
        public Response RemoveUserFromGroup(string hub, string group, string userId, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateRemoveUserFromGroupRequest(hub, group, userId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRemoveUserFromAllGroupsRequest(string hub, string userId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/groups", false);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            return message;
        }

        /// <summary> Remove a user from all groups. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/> or <paramref name="userId"/> is null. </exception>
        public async Task<Response> RemoveUserFromAllGroupsAsync(string hub, string userId, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateRemoveUserFromAllGroupsRequest(hub, userId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Remove a user from all groups. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="userId"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/> or <paramref name="userId"/> is null. </exception>
        public Response RemoveUserFromAllGroups(string hub, string userId, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateRemoveUserFromAllGroupsRequest(hub, userId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGrantPermissionRequest(string hub, Permission permission, string connectionId, string targetName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/permissions/", false);
            uri.AppendPath(permission.ToString(), true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            if (targetName != null)
            {
                uri.AppendQuery("targetName", targetName, true);
            }
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            return message;
        }

        /// <summary> Grant permission to the connection. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="targetName"> Optional. If not set, grant the permission to all the targets. If set, grant the permission to the specific target. The meaning of the target depends on the specific permission. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/> or <paramref name="connectionId"/> is null. </exception>
        public async Task<Response> GrantPermissionAsync(string hub, Permission permission, string connectionId, string targetName = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateGrantPermissionRequest(hub, permission, connectionId, targetName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Grant permission to the connection. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="targetName"> Optional. If not set, grant the permission to all the targets. If set, grant the permission to the specific target. The meaning of the target depends on the specific permission. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/> or <paramref name="connectionId"/> is null. </exception>
        public Response GrantPermission(string hub, Permission permission, string connectionId, string targetName = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateGrantPermissionRequest(hub, permission, connectionId, targetName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRevokePermissionRequest(string hub, Permission permission, string connectionId, string targetName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/permissions/", false);
            uri.AppendPath(permission.ToString(), true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            if (targetName != null)
            {
                uri.AppendQuery("targetName", targetName, true);
            }
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            return message;
        }

        /// <summary> Revoke permission for the connection. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="targetName"> Optional. If not set, revoke the permission for all targets. If set, revoke the permission for the specific target. The meaning of the target depends on the specific permission. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/> or <paramref name="connectionId"/> is null. </exception>
        public async Task<Response> RevokePermissionAsync(string hub, Permission permission, string connectionId, string targetName = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateRevokePermissionRequest(hub, permission, connectionId, targetName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Revoke permission for the connection. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="targetName"> Optional. If not set, revoke the permission for all targets. If set, revoke the permission for the specific target. The meaning of the target depends on the specific permission. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/> or <paramref name="connectionId"/> is null. </exception>
        public Response RevokePermission(string hub, Permission permission, string connectionId, string targetName = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateRevokePermissionRequest(hub, permission, connectionId, targetName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCheckPermissionRequest(string hub, Permission permission, string connectionId, string targetName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/permissions/", false);
            uri.AppendPath(permission.ToString(), true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            if (targetName != null)
            {
                uri.AppendQuery("targetName", targetName, true);
            }
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            return message;
        }

        /// <summary> Check if a connection have permission to the specific action. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="targetName"> Optional. If not set, get the permission for all targets. If set, get the permission for the specific target. The meaning of the target depends on the specific permission. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/> or <paramref name="connectionId"/> is null. </exception>
        public async Task<Response> CheckPermissionAsync(string hub, Permission permission, string connectionId, string targetName = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateCheckPermissionRequest(hub, permission, connectionId, targetName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Check if a connection have permission to the specific action. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="targetName"> Optional. If not set, get the permission for all targets. If set, get the permission for the specific target. The meaning of the target depends on the specific permission. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hub"/> or <paramref name="connectionId"/> is null. </exception>
        public Response CheckPermission(string hub, Permission permission, string connectionId, string targetName = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateCheckPermissionRequest(hub, permission, connectionId, targetName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
